(()=>{"use strict";var n={402:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".content-box-container {\n  width: 100%;\n  height: 100vh;\n  min-height: 435px;\n  display: grid;\n  grid-template: 70px 1fr 65px / 1fr;\n  background-color: white;\n}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 200,\n  'opsz' 48;\n  font-size: 1.65rem;\n}\n\n.content-box-title {\n  justify-content: center;\n  align-items: center;\n  gap: 11px;\n  grid-area: 1 / 1 / 2 / -1;\n  color: white;\n  background-color: var(--accent-3);\n  font-size: 1.95rem;\n  font-family: 'PT Mono', monospace;\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.25);\n}\n\n@media (min-width: 650px) {\n  .content-box-container {\n    max-width: 950px;\n    height: min(550px, 85%);\n    grid-template: 70px 1fr / 165px 1fr;\n    box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  }\n\n  .content-box-title {\n    justify-content: start;\n    padding-left: 25px;\n  }\n}\n\n@media (min-width: 850px) {\n  .content-box-container {\n    grid-template: 70px 1fr / 185px 1fr;\n  }\n}\n\n@media (min-width: 1600px) {\n  .content-box-container {\n    max-width: 1050px;\n    height: min(570px, 85%);\n    grid-template: 70px 1fr / 200px 1fr;\n  }\n}\n","",{version:3,sources:["webpack://./src/components/contentBox/contentBox.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,aAAa;EACb,iBAAiB;EACjB,aAAa;EACb,kCAAkC;EAClC,uBAAuB;AACzB;;AAEA;EACE;;;;WAIS;EACT,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,yBAAyB;EACzB,YAAY;EACZ,iCAAiC;EACjC,kBAAkB;EAClB,iCAAiC;EACjC,2CAA2C;AAC7C;;AAEA;EACE;IACE,gBAAgB;IAChB,uBAAuB;IACvB,mCAAmC;IACnC,6CAA6C;EAC/C;;EAEA;IACE,sBAAsB;IACtB,kBAAkB;EACpB;AACF;;AAEA;EACE;IACE,mCAAmC;EACrC;AACF;;AAEA;EACE;IACE,iBAAiB;IACjB,uBAAuB;IACvB,mCAAmC;EACrC;AACF",sourcesContent:[".content-box-container {\n  width: 100%;\n  height: 100vh;\n  min-height: 435px;\n  display: grid;\n  grid-template: 70px 1fr 65px / 1fr;\n  background-color: white;\n}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 200,\n  'opsz' 48;\n  font-size: 1.65rem;\n}\n\n.content-box-title {\n  justify-content: center;\n  align-items: center;\n  gap: 11px;\n  grid-area: 1 / 1 / 2 / -1;\n  color: white;\n  background-color: var(--accent-3);\n  font-size: 1.95rem;\n  font-family: 'PT Mono', monospace;\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.25);\n}\n\n@media (min-width: 650px) {\n  .content-box-container {\n    max-width: 950px;\n    height: min(550px, 85%);\n    grid-template: 70px 1fr / 165px 1fr;\n    box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  }\n\n  .content-box-title {\n    justify-content: start;\n    padding-left: 25px;\n  }\n}\n\n@media (min-width: 850px) {\n  .content-box-container {\n    grid-template: 70px 1fr / 185px 1fr;\n  }\n}\n\n@media (min-width: 1600px) {\n  .content-box-container {\n    max-width: 1050px;\n    height: min(570px, 85%);\n    grid-template: 70px 1fr / 200px 1fr;\n  }\n}\n"],sourceRoot:""}]);const s=i},52:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".del-confirmation-container {\n  width: 255px;\n  height: 140px;\n  gap: 35px;\n  background-color: white;\n  padding: 10px 15px;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 100;\n}\n\n.del-confirmation-msg {\n  font-size: 1.25rem;\n}\n\n.del-confirmation-btns-container {\n  gap: 15px;\n}\n\n.del-confirmation-no-btn,\n.del-confirmation-yes-btn {\n  width: 100px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.del-confirmation-no-btn:hover,\n.del-confirmation-yes-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.del-confirmation-no-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.del-confirmation-yes-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.del-confirmation-no-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.del-confirmation-yes-btn:hover {\n  background-color: var(--accent-1);\n}\n\n\n\n","",{version:3,sources:["webpack://./src/components/delConfirmation/delConfirmation.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,SAAS;EACT,uBAAuB;EACvB,kBAAkB;EAClB,+BAA+B;EAC/B,kBAAkB;EAClB,6CAA6C;EAC7C,eAAe;EACf,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,SAAS;AACX;;AAEA;;EAEE,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,mBAAmB;EACnB,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,eAAe;EACf,uBAAuB;EACvB,eAAe;AACjB;;AAEA;;EAEE,YAAY;EACZ,2BAA2B;EAC3B,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;AACnC",sourcesContent:[".del-confirmation-container {\n  width: 255px;\n  height: 140px;\n  gap: 35px;\n  background-color: white;\n  padding: 10px 15px;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 100;\n}\n\n.del-confirmation-msg {\n  font-size: 1.25rem;\n}\n\n.del-confirmation-btns-container {\n  gap: 15px;\n}\n\n.del-confirmation-no-btn,\n.del-confirmation-yes-btn {\n  width: 100px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.del-confirmation-no-btn:hover,\n.del-confirmation-yes-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.del-confirmation-no-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.del-confirmation-yes-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.del-confirmation-no-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.del-confirmation-yes-btn:hover {\n  background-color: var(--accent-1);\n}\n\n\n\n"],sourceRoot:""}]);const s=i},417:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".holder-box-container {\n  grid-area: 2 / 1 / 3 / -1;\n  justify-content: start;\n  align-items: center;\n  padding: 15px 10px;\n  font-family: 'Lato', sans-serif;\n  font-size: 1.15rem;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.holder-box-container::-webkit-scrollbar {\n  display: none;\n}\n\n@media (min-width: 650px) {\n  .holder-box-container {\n    grid-area: 2 / 2 / -1 / -1;\n    padding: 15px;\n  }\n}","",{version:3,sources:["webpack://./src/components/holderBox/holderBox.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,sBAAsB;EACtB,mBAAmB;EACnB,kBAAkB;EAClB,+BAA+B;EAC/B,kBAAkB;EAClB,gBAAgB;EAChB,wBAAwB,GAAG,gBAAgB;EAC3C,qBAAqB,GAAG,YAAY;AACtC;;AAEA,gDAAgD;AAChD;EACE,aAAa;AACf;;AAEA;EACE;IACE,0BAA0B;IAC1B,aAAa;EACf;AACF",sourcesContent:[".holder-box-container {\n  grid-area: 2 / 1 / 3 / -1;\n  justify-content: start;\n  align-items: center;\n  padding: 15px 10px;\n  font-family: 'Lato', sans-serif;\n  font-size: 1.15rem;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.holder-box-container::-webkit-scrollbar {\n  display: none;\n}\n\n@media (min-width: 650px) {\n  .holder-box-container {\n    grid-area: 2 / 2 / -1 / -1;\n    padding: 15px;\n  }\n}"],sourceRoot:""}]);const s=i},851:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".navbar-container {\n  width: 100%;\n  height: 65px;\n  grid-area: 3 / 1 / -1 / -1;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 15px;\n  background-color: var(--accent-4);\n  font-family: 'Press Start 2P', cursive;\n}\n\n.navbar-btn {\n  height: 40px;\n  width: 40px;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n  color: white;\n  transition: .4s;\n  cursor: pointer;\n}\n\n.navbar-btn:hover,\n.navbar-btn-selected {\n  transform: scale(1.2);\n  color: var(--accent-3);\n}\n\n.navbar-plus-btn {\n  font-family: 'Montserrat', sans-serif;\n  font-size: 2.55rem;\n  margin-bottom: 4px;\n  color: var(--accent-1)\n}\n\n.navbar-plus-btn:hover {\n  color: var(--accent-1);\n}\n\n@media (min-width: 400px) {\n  .navbar-container {\n    padding: 0 30px;\n  }\n}\n\n@media (min-width: 500px) {\n  .navbar-container {\n    padding: 0 60px;\n  }\n}\n\n@media (min-width: 600px) {\n  .navbar-container {\n    padding: 0 80px;\n  }\n}\n\n@media (min-width: 650px) {\n  .navbar-container {\n    height: 100%;\n    grid-area: 2 / 1 / 3 / 2;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 0 20px 0;\n    background-color: var(--accent-5);\n    box-shadow: 1px 0 4px 0 rgba(0, 0, 0, 0.25);\n  }\n\n  .navbar-btn {\n    width: 100%;\n    height: 60px;\n    justify-content: start;\n    align-items: center;\n    padding-left: 25px;\n    font-size: 1.1rem;\n    color: var(--accent-4);\n    font-family: 'Montserrat', sans-serif;\n    border-right: 6px solid transparent;\n    transition: .65s;\n  }\n\n  .navbar-btn:hover,\n  .navbar-btn-selected  {\n    transform: none;\n    color: var(--accent-4);\n    background-color: var(--accent-6);\n  }\n\n  .navbar-btn-selected {\n    border-right: 6px solid var(--accent-1);\n  }\n\n  .navbar-plus-btn {\n    width: 80px;\n    justify-content: center;\n    margin-top: auto;\n    padding-left: 0px;\n    font-size: 2.95rem;\n    color: var(--accent-1);\n    border: none;\n  }\n\n  .navbar-plus-btn:hover {\n    transform: scale(1.3);\n    color: var(--accent-1);\n    background-color: transparent;\n  }\n}\n\n\n\n","",{version:3,sources:["webpack://./src/components/navbar/navbar.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,0BAA0B;EAC1B,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;EACf,iCAAiC;EACjC,sCAAsC;AACxC;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;EACjB,YAAY;EACZ,eAAe;EACf,eAAe;AACjB;;AAEA;;EAEE,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA;EACE,qCAAqC;EACrC,kBAAkB;EAClB,kBAAkB;EAClB;AACF;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE;IACE,YAAY;IACZ,wBAAwB;IACxB,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;IACnB,iCAAiC;IACjC,2CAA2C;EAC7C;;EAEA;IACE,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;IACjB,sBAAsB;IACtB,qCAAqC;IACrC,mCAAmC;IACnC,gBAAgB;EAClB;;EAEA;;IAEE,eAAe;IACf,sBAAsB;IACtB,iCAAiC;EACnC;;EAEA;IACE,uCAAuC;EACzC;;EAEA;IACE,WAAW;IACX,uBAAuB;IACvB,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,sBAAsB;IACtB,YAAY;EACd;;EAEA;IACE,qBAAqB;IACrB,sBAAsB;IACtB,6BAA6B;EAC/B;AACF",sourcesContent:[".navbar-container {\n  width: 100%;\n  height: 65px;\n  grid-area: 3 / 1 / -1 / -1;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 15px;\n  background-color: var(--accent-4);\n  font-family: 'Press Start 2P', cursive;\n}\n\n.navbar-btn {\n  height: 40px;\n  width: 40px;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n  color: white;\n  transition: .4s;\n  cursor: pointer;\n}\n\n.navbar-btn:hover,\n.navbar-btn-selected {\n  transform: scale(1.2);\n  color: var(--accent-3);\n}\n\n.navbar-plus-btn {\n  font-family: 'Montserrat', sans-serif;\n  font-size: 2.55rem;\n  margin-bottom: 4px;\n  color: var(--accent-1)\n}\n\n.navbar-plus-btn:hover {\n  color: var(--accent-1);\n}\n\n@media (min-width: 400px) {\n  .navbar-container {\n    padding: 0 30px;\n  }\n}\n\n@media (min-width: 500px) {\n  .navbar-container {\n    padding: 0 60px;\n  }\n}\n\n@media (min-width: 600px) {\n  .navbar-container {\n    padding: 0 80px;\n  }\n}\n\n@media (min-width: 650px) {\n  .navbar-container {\n    height: 100%;\n    grid-area: 2 / 1 / 3 / 2;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 0 20px 0;\n    background-color: var(--accent-5);\n    box-shadow: 1px 0 4px 0 rgba(0, 0, 0, 0.25);\n  }\n\n  .navbar-btn {\n    width: 100%;\n    height: 60px;\n    justify-content: start;\n    align-items: center;\n    padding-left: 25px;\n    font-size: 1.1rem;\n    color: var(--accent-4);\n    font-family: 'Montserrat', sans-serif;\n    border-right: 6px solid transparent;\n    transition: .65s;\n  }\n\n  .navbar-btn:hover,\n  .navbar-btn-selected  {\n    transform: none;\n    color: var(--accent-4);\n    background-color: var(--accent-6);\n  }\n\n  .navbar-btn-selected {\n    border-right: 6px solid var(--accent-1);\n  }\n\n  .navbar-plus-btn {\n    width: 80px;\n    justify-content: center;\n    margin-top: auto;\n    padding-left: 0px;\n    font-size: 2.95rem;\n    color: var(--accent-1);\n    border: none;\n  }\n\n  .navbar-plus-btn:hover {\n    transform: scale(1.3);\n    color: var(--accent-1);\n    background-color: transparent;\n  }\n}\n\n\n\n"],sourceRoot:""}]);const s=i},735:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".project-container {\n  width: 100%;\n  gap: 13px;\n  background-color: var(--accent-2);\n  padding: 12px 10px;\n  margin-bottom: 7px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n}\n\n.project-container:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateX(2px);\n}\n\n.project-container:last-child {\n  margin-bottom: 0;\n}\n\n.project-title {\n  width: 175px;\n  margin-right: auto;\n  font-size: 1rem;\n  overflow-wrap: anywhere;\n}\n\n.project-add-icon {\n  margin-left: 2px;\n}\n\n.project-add-icon,\n.project-edit-icon,\n.project-trash-icon {\n  width: var(--icon-width-1);\n  height: var(--icon-height-1);\n}\n\n.project-add-icon:hover,\n.project-edit-icon:hover,\n.project-trash-icon:hover {\n  transform: translateY(-3px);\n}\n\n.project-container,\n.project-add-icon,\n.project-edit-icon,\n.project-trash-icon {\n  cursor: pointer;\n}\n\n@media (min-width: 400px) {\n  .project-title {\n    width: 215px;\n  }\n}\n\n@media (min-width: 500px) {\n  .project-title {\n    width: 265px;\n  }\n}\n\n@media (min-width: 750px) {\n  .project-title {\n    width: 325px;\n  }\n}\n\n@media (min-width: 850px) {\n  .project-title {\n    width: 370px;\n  }\n}\n\n","",{version:3,sources:["webpack://./src/components/project/project.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,SAAS;EACT,iCAAiC;EACjC,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,+BAA+B;AACjC;;AAEA;EACE,6CAA6C;EAC7C,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;;EAGE,0BAA0B;EAC1B,4BAA4B;AAC9B;;AAEA;;;EAGE,2BAA2B;AAC7B;;AAEA;;;;EAIE,eAAe;AACjB;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF",sourcesContent:[".project-container {\n  width: 100%;\n  gap: 13px;\n  background-color: var(--accent-2);\n  padding: 12px 10px;\n  margin-bottom: 7px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n}\n\n.project-container:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateX(2px);\n}\n\n.project-container:last-child {\n  margin-bottom: 0;\n}\n\n.project-title {\n  width: 175px;\n  margin-right: auto;\n  font-size: 1rem;\n  overflow-wrap: anywhere;\n}\n\n.project-add-icon {\n  margin-left: 2px;\n}\n\n.project-add-icon,\n.project-edit-icon,\n.project-trash-icon {\n  width: var(--icon-width-1);\n  height: var(--icon-height-1);\n}\n\n.project-add-icon:hover,\n.project-edit-icon:hover,\n.project-trash-icon:hover {\n  transform: translateY(-3px);\n}\n\n.project-container,\n.project-add-icon,\n.project-edit-icon,\n.project-trash-icon {\n  cursor: pointer;\n}\n\n@media (min-width: 400px) {\n  .project-title {\n    width: 215px;\n  }\n}\n\n@media (min-width: 500px) {\n  .project-title {\n    width: 265px;\n  }\n}\n\n@media (min-width: 750px) {\n  .project-title {\n    width: 325px;\n  }\n}\n\n@media (min-width: 850px) {\n  .project-title {\n    width: 370px;\n  }\n}\n\n"],sourceRoot:""}]);const s=i},117:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".project-selector-container {\n  height: 425px;\n  width: 325px;\n  display: grid;\n  grid-template-rows: 65px 1fr 95px;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n}\n\n.project-selector-title {\n  background-color: var(--accent-3);\n  border-radius: 8px 8px 0 0;\n  color: white;\n  font-size: 1.2rem;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.project-selector-projects-box {\n  width: 100%;\n  align-items: center;\n  padding: 15px 10px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */\n  scrollbar-width: none;  /* Hide scrollbar for Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.project-selector-projects-box::-webkit-scrollbar {\n  display: none;\n}\n\n.project-selector-btns-container {\n  gap: 15px;\n  margin: 35px 0 25px 0;\n}\n\n.project-selector-cancel-btn, \n.project-selector-ok-btn {\n  width: 105px;\n  padding: 10px 20px;\n  margin-bottom: 10px; /* Specific */\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.project-selector-cancel-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.project-selector-ok-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.project-selector-cancel-btn:hover, \n.project-selector-ok-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.project-selector-cancel-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.project-selector-ok-btn:hover {\n  background-color: var(--accent-1);\n}\n\n.project-option {\n  width: 100%;\n  height: 45px;\n  background-color: var(--accent-2);\n  padding: 12px 10px;\n  margin-bottom: 7px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n  position: relative;\n  cursor: pointer;\n}\n\n.project-option:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateX(2px);\n}\n\n.project-option:last-child {\n  margin-bottom: 0;\n}\n\n.selected.project-option::before {\n  height: 100%;\n  width: 45px;\n  position: absolute;\n  right: 0;\n  content: \"✓\";\n  color: white;\n  background-color: var(--accent-1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.55rem;\n}\n\n.project-option-title {\n  margin-right: auto;\n}\n\n","",{version:3,sources:["webpack://./src/components/projectSelector/projectSelector.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,iCAAiC;EACjC,eAAe;EACf,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,uBAAuB;EACvB,+BAA+B;EAC/B,kBAAkB;EAClB,6CAA6C;AAC/C;;AAEA;EACE,iCAAiC;EACjC,0BAA0B;EAC1B,YAAY;EACZ,iBAAiB;EACjB,qCAAqC;AACvC;;AAEA;EACE,WAAW;EACX,mBAAmB;EACnB,kBAAkB;EAClB,gBAAgB;EAChB,wBAAwB,GAAG,mCAAmC;EAC9D,qBAAqB,GAAG,+BAA+B;AACzD;;AAEA,gDAAgD;AAChD;EACE,aAAa;AACf;;AAEA;EACE,SAAS;EACT,qBAAqB;AACvB;;AAEA;;EAEE,YAAY;EACZ,kBAAkB;EAClB,mBAAmB,EAAE,aAAa;EAClC,kBAAkB;EAClB,mBAAmB;EACnB,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,eAAe;EACf,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;EACZ,2BAA2B;EAC3B,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iCAAiC;EACjC,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,+BAA+B;EAC/B,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,6CAA6C;EAC7C,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,YAAY;EACZ,YAAY;EACZ,iCAAiC;EACjC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:[".project-selector-container {\n  height: 425px;\n  width: 325px;\n  display: grid;\n  grid-template-rows: 65px 1fr 95px;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n}\n\n.project-selector-title {\n  background-color: var(--accent-3);\n  border-radius: 8px 8px 0 0;\n  color: white;\n  font-size: 1.2rem;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.project-selector-projects-box {\n  width: 100%;\n  align-items: center;\n  padding: 15px 10px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */\n  scrollbar-width: none;  /* Hide scrollbar for Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.project-selector-projects-box::-webkit-scrollbar {\n  display: none;\n}\n\n.project-selector-btns-container {\n  gap: 15px;\n  margin: 35px 0 25px 0;\n}\n\n.project-selector-cancel-btn, \n.project-selector-ok-btn {\n  width: 105px;\n  padding: 10px 20px;\n  margin-bottom: 10px; /* Specific */\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.project-selector-cancel-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.project-selector-ok-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.project-selector-cancel-btn:hover, \n.project-selector-ok-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.project-selector-cancel-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.project-selector-ok-btn:hover {\n  background-color: var(--accent-1);\n}\n\n.project-option {\n  width: 100%;\n  height: 45px;\n  background-color: var(--accent-2);\n  padding: 12px 10px;\n  margin-bottom: 7px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n  position: relative;\n  cursor: pointer;\n}\n\n.project-option:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateX(2px);\n}\n\n.project-option:last-child {\n  margin-bottom: 0;\n}\n\n.selected.project-option::before {\n  height: 100%;\n  width: 45px;\n  position: absolute;\n  right: 0;\n  content: \"✓\";\n  color: white;\n  background-color: var(--accent-1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.55rem;\n}\n\n.project-option-title {\n  margin-right: auto;\n}\n\n"],sourceRoot:""}]);const s=i},497:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".details-container {\n  width: 295px;\n  height: 500px;\n  display: grid;\n  grid-template-rows: 40px 1fr;\n  gap: 15px;\n  padding: 10px 15px;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  background-color: var(--accent-2);\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.details-top-container {\n  justify-content: space-between;\n  align-items: center;\n}\n\n.details-bottom-container {\n  display: grid;\n  grid-template-rows: 100px 215px 85px;\n  gap: 15px;\n  justify-items: center;\n  align-items: center;\n}\n\n.details-priority {\n  border-radius: 4px;\n  border: 1px solid var(--low-prio);\n  background-color: var(--low-prio);\n  padding: 1px 10px 3px 10px;\n}\n\n/* .details-due-date {\n\n} */\n\n.details-title {\n  text-align: center;\n  overflow-wrap: anywhere;\n  font-size: 1.1rem;\n}\n\n.details-notes {\n  text-align: left;\n  overflow-wrap: anywhere;\n}\n\n.details-close-btn {\n  padding: 10px 20px;\n  border: 1px solid var(--accent-1);\n  border-radius: 5px;\n  color: var(--accent-1);\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n}\n\n.details-close-btn:hover {\n  color: white;\n  background-color: var(--accent-1);\n  transform: translateY(-5px);\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./src/components/todoDetails/todoDetails.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;EACb,4BAA4B;EAC5B,SAAS;EACT,kBAAkB;EAClB,+BAA+B;EAC/B,kBAAkB;EAClB,iCAAiC;EACjC,6CAA6C;EAC7C,eAAe;EACf,QAAQ;EACR,SAAS;EACT,gCAAgC;AAClC;;AAEA;EACE,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,oCAAoC;EACpC,SAAS;EACT,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,iCAAiC;EACjC,iCAAiC;EACjC,0BAA0B;AAC5B;;AAEA;;GAEG;;AAEH;EACE,kBAAkB;EAClB,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,iCAAiC;EACjC,kBAAkB;EAClB,sBAAsB;EACtB,mBAAmB;EACnB,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,iCAAiC;EACjC,2BAA2B;EAC3B,iBAAiB;AACnB",sourcesContent:[".details-container {\n  width: 295px;\n  height: 500px;\n  display: grid;\n  grid-template-rows: 40px 1fr;\n  gap: 15px;\n  padding: 10px 15px;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  background-color: var(--accent-2);\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.details-top-container {\n  justify-content: space-between;\n  align-items: center;\n}\n\n.details-bottom-container {\n  display: grid;\n  grid-template-rows: 100px 215px 85px;\n  gap: 15px;\n  justify-items: center;\n  align-items: center;\n}\n\n.details-priority {\n  border-radius: 4px;\n  border: 1px solid var(--low-prio);\n  background-color: var(--low-prio);\n  padding: 1px 10px 3px 10px;\n}\n\n/* .details-due-date {\n\n} */\n\n.details-title {\n  text-align: center;\n  overflow-wrap: anywhere;\n  font-size: 1.1rem;\n}\n\n.details-notes {\n  text-align: left;\n  overflow-wrap: anywhere;\n}\n\n.details-close-btn {\n  padding: 10px 20px;\n  border: 1px solid var(--accent-1);\n  border-radius: 5px;\n  color: var(--accent-1);\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n}\n\n.details-close-btn:hover {\n  color: white;\n  background-color: var(--accent-1);\n  transform: translateY(-5px);\n  font-weight: bold;\n}"],sourceRoot:""}]);const s=i},304:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".box {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.form-container {\n  width: 325px;\n  height: min(570px, 80%);\n  display: grid;\n  grid-template-rows: 65px 1fr;\n  gap: 5px;\n  background-color: white;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.form-container::-webkit-scrollbar {\n  display: none;\n}\n\n.project-fields-height {\n  height: min(245px, 80%);\n}\n\n.form-top-container {\n  grid-row: 1 / 2;\n  background-color: var(--accent-3);\n  border-radius: 8px 8px 0 0;\n}\n\n.form-todo-btn,\n.form-project-btn {\n  width: clamp(50%, 100%, 100%);\n  height: 100%;\n  color: white;\n  background-color: transparent;\n  border: none;\n  border-bottom: 4px solid white;\n  outline: none;\n  font-size: 1.2rem;\n  transition: .5s;\n  cursor: pointer;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.form-fields-container {\n  grid-row: 2 / 3;\n}\n\n.form-middle-container {\n  align-items: center;\n  justify-content: start;\n  padding: 0px 15px;\n}\n\n.form-title-input,\n.form-notes-input {\n  width: 100%;\n  border: none;\n  border-bottom: 4px solid rgba(0, 0, 0, 0.05);\n  outline: none;\n  resize: none;\n  padding: 15px 10px 10px;\n}\n\n.form-title-input {\n  height: 75px;\n}\n\n.form-notes-input {\n  height: 165px;\n}\n\n.form-due-date-container {\n  gap: 12px;\n  margin-top: 22px;\n}\n\n.form-due-date-label {\n  font-size: 1.05rem;\n}\n\n.form-due-date-input {\n  border-radius: 3px;\n  border: 1px solid rgba(0, 0, 0, .4);\n  outline: none;\n  padding: 4px 8px;\n  cursor: pointer;\n}\n\n.form-priority-container {\n  gap: 12px;\n  margin-top: 22px;\n}\n\n.form-priority-title {\n  font-size: 1.15rem;\n}\n\n.form-priority-options-container {\n  gap: 5px;\n}\n\n.form-priority-label {\n  border-radius: 3px;\n  padding: 1px 5px 2px 5px;\n  text-align: center;\n  transition: .25s;\n  box-shadow: 1px 1px 2px 0 rgba(0, 0, 0, 0.15);\n  cursor: pointer;\n}\n\n.l-prio-label {\n  border: 1px solid var(--low-prio);\n  background-color: var(--low-prio);\n}\n\n.m-prio-label {\n  border: 1px solid var(--medium-prio);\n  background-color: var(--medium-prio);\n}\n\n.h-prio-label {\n  border: 1px solid var(--high-prio);\n  background-color: var(--high-prio);\n  margin-right: 18px;\n}\n\n.form-priority-radio:checked + .form-priority-label {\n  transform: scale(1.3);\n}\n\n.form-bottom-container {\n  gap: 15px;\n  margin: 35px 0 25px 0;\n}\n\n.form-ok-btn,\n.form-cancel-btn {\n  width: 105px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.form-ok-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.form-cancel-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.form-ok-btn:hover,\n.form-cancel-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.form-ok-btn:hover {\n  background-color: var(--accent-1);\n}\n\n.form-cancel-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.border-btm-b {\n  border-bottom: 4px solid black;\n}\n\n.border-btm-w {\n  border-bottom: 4px solid white;\n}\n\n.no-pointer-events {\n  pointer-events: none;\n}","",{version:3,sources:["webpack://./src/components/todoForm/todoForm.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,MAAM;EACN,SAAS;EACT,OAAO;EACP,QAAQ;AACV;;AAEA;EACE,YAAY;EACZ,uBAAuB;EACvB,aAAa;EACb,4BAA4B;EAC5B,QAAQ;EACR,uBAAuB;EACvB,6CAA6C;EAC7C,+BAA+B;EAC/B,kBAAkB;EAClB,gBAAgB;EAChB,wBAAwB,GAAG,gBAAgB;EAC3C,qBAAqB,GAAG,YAAY;AACtC;;AAEA,gDAAgD;AAChD;EACE,aAAa;AACf;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,iCAAiC;EACjC,0BAA0B;AAC5B;;AAEA;;EAEE,6BAA6B;EAC7B,YAAY;EACZ,YAAY;EACZ,6BAA6B;EAC7B,YAAY;EACZ,8BAA8B;EAC9B,aAAa;EACb,iBAAiB;EACjB,eAAe;EACf,eAAe;EACf,qCAAqC;AACvC;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,mBAAmB;EACnB,sBAAsB;EACtB,iBAAiB;AACnB;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,4CAA4C;EAC5C,aAAa;EACb,YAAY;EACZ,uBAAuB;AACzB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,mCAAmC;EACnC,aAAa;EACb,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,QAAQ;AACV;;AAEA;EACE,kBAAkB;EAClB,wBAAwB;EACxB,kBAAkB;EAClB,gBAAgB;EAChB,6CAA6C;EAC7C,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,iCAAiC;AACnC;;AAEA;EACE,oCAAoC;EACpC,oCAAoC;AACtC;;AAEA;EACE,kCAAkC;EAClC,kCAAkC;EAClC,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,SAAS;EACT,qBAAqB;AACvB;;AAEA;;EAEE,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,mBAAmB;EACnB,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,eAAe;EACf,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;EACZ,2BAA2B;EAC3B,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,oBAAoB;AACtB",sourcesContent:[".box {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.form-container {\n  width: 325px;\n  height: min(570px, 80%);\n  display: grid;\n  grid-template-rows: 65px 1fr;\n  gap: 5px;\n  background-color: white;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.form-container::-webkit-scrollbar {\n  display: none;\n}\n\n.project-fields-height {\n  height: min(245px, 80%);\n}\n\n.form-top-container {\n  grid-row: 1 / 2;\n  background-color: var(--accent-3);\n  border-radius: 8px 8px 0 0;\n}\n\n.form-todo-btn,\n.form-project-btn {\n  width: clamp(50%, 100%, 100%);\n  height: 100%;\n  color: white;\n  background-color: transparent;\n  border: none;\n  border-bottom: 4px solid white;\n  outline: none;\n  font-size: 1.2rem;\n  transition: .5s;\n  cursor: pointer;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.form-fields-container {\n  grid-row: 2 / 3;\n}\n\n.form-middle-container {\n  align-items: center;\n  justify-content: start;\n  padding: 0px 15px;\n}\n\n.form-title-input,\n.form-notes-input {\n  width: 100%;\n  border: none;\n  border-bottom: 4px solid rgba(0, 0, 0, 0.05);\n  outline: none;\n  resize: none;\n  padding: 15px 10px 10px;\n}\n\n.form-title-input {\n  height: 75px;\n}\n\n.form-notes-input {\n  height: 165px;\n}\n\n.form-due-date-container {\n  gap: 12px;\n  margin-top: 22px;\n}\n\n.form-due-date-label {\n  font-size: 1.05rem;\n}\n\n.form-due-date-input {\n  border-radius: 3px;\n  border: 1px solid rgba(0, 0, 0, .4);\n  outline: none;\n  padding: 4px 8px;\n  cursor: pointer;\n}\n\n.form-priority-container {\n  gap: 12px;\n  margin-top: 22px;\n}\n\n.form-priority-title {\n  font-size: 1.15rem;\n}\n\n.form-priority-options-container {\n  gap: 5px;\n}\n\n.form-priority-label {\n  border-radius: 3px;\n  padding: 1px 5px 2px 5px;\n  text-align: center;\n  transition: .25s;\n  box-shadow: 1px 1px 2px 0 rgba(0, 0, 0, 0.15);\n  cursor: pointer;\n}\n\n.l-prio-label {\n  border: 1px solid var(--low-prio);\n  background-color: var(--low-prio);\n}\n\n.m-prio-label {\n  border: 1px solid var(--medium-prio);\n  background-color: var(--medium-prio);\n}\n\n.h-prio-label {\n  border: 1px solid var(--high-prio);\n  background-color: var(--high-prio);\n  margin-right: 18px;\n}\n\n.form-priority-radio:checked + .form-priority-label {\n  transform: scale(1.3);\n}\n\n.form-bottom-container {\n  gap: 15px;\n  margin: 35px 0 25px 0;\n}\n\n.form-ok-btn,\n.form-cancel-btn {\n  width: 105px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.form-ok-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.form-cancel-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.form-ok-btn:hover,\n.form-cancel-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.form-ok-btn:hover {\n  background-color: var(--accent-1);\n}\n\n.form-cancel-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.border-btm-b {\n  border-bottom: 4px solid black;\n}\n\n.border-btm-w {\n  border-bottom: 4px solid white;\n}\n\n.no-pointer-events {\n  pointer-events: none;\n}"],sourceRoot:""}]);const s=i},272:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".item-container {\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n  background-color: var(--accent-2);\n  padding: 14px 10px;\n  margin-bottom: 7px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n  border-left: 4px solid var(--low-prio);\n  position: relative;\n}\n\n.item-container:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateX(2px);\n}\n\n.item-container:last-child {\n  margin-bottom: 0;\n}\n\n.item-container:has(.item-checkbox.checked)::before {\n  width: calc(100% - 34px);\n  height: 100%;\n  content: \"\";\n  position: absolute;\n  left: 34px;\n  background-color: rgba(240, 240, 240, 0.8);\n  filter: blur(1px);\n}\n\n.item-left-container {\n  gap: 8px;\n}\n\n.item-right-container {\n  gap: 14px;\n}\n\n.item-checkbox {\n  width: 18px;\n  height: 18px;\n  border: 2px solid var(--accent-1);\n  border-radius: 5px;\n  background-color: white;\n  font-size: 1.2rem;\n  padding-left: 1px;\n}\n\n.checked {\n  background-color: var(--accent-1);\n  color: white;\n}\n\n.no-pointer-events {\n  pointer-events: none;\n  cursor: auto;\n}\n\n.item-container.no-pointer-events .item-checkbox {\n  pointer-events: all;\n  cursor: pointer;\n}\n\n.item-title {\n  width: 110px;\n  font-size: 1rem;\n  overflow-wrap: anywhere;\n}\n\n.item-due-date {\n  font-size: .9rem;\n}\n\n.item-edit-icon {\n  margin-left: 2px;\n}\n\n.item-edit-icon,\n.item-move-icon,\n.item-trash-icon  {\n  width: var(--icon-width-1);\n  height: var(--icon-height-1);\n  transition: .35s;\n}\n\n.item-edit-icon:hover,\n.item-move-icon:hover,\n.item-trash-icon:hover {\n  transform: translateY(-3px);\n}\n\n.item-container,\n.item-checkbox,\n.item-edit-icon,\n.item-move-icon,\n.item-trash-icon {\n  cursor: pointer;\n}\n\n@media (min-width: 400px) {\n  .item-title {\n    width: 155px;\n  }\n}\n\n@media (min-width: 500px) {\n  .item-title {\n    width: 230px;\n  }\n}\n\n@media (min-width: 750px) {\n  .item-title {\n    width: 270px;\n  }\n}\n\n@media (min-width: 850px) {\n  .item-title {\n    width: 335px;\n  }\n}\n\n","",{version:3,sources:["webpack://./src/components/todoItem/todoItem.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,8BAA8B;EAC9B,mBAAmB;EACnB,SAAS;EACT,iCAAiC;EACjC,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,+BAA+B;EAC/B,sCAAsC;EACtC,kBAAkB;AACpB;;AAEA;EACE,6CAA6C;EAC7C,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,wBAAwB;EACxB,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,UAAU;EACV,0CAA0C;EAC1C,iBAAiB;AACnB;;AAEA;EACE,QAAQ;AACV;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iCAAiC;EACjC,kBAAkB;EAClB,uBAAuB;EACvB,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;EACjC,YAAY;AACd;;AAEA;EACE,oBAAoB;EACpB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;;EAGE,0BAA0B;EAC1B,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;;;EAGE,2BAA2B;AAC7B;;AAEA;;;;;EAKE,eAAe;AACjB;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF",sourcesContent:[".item-container {\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n  background-color: var(--accent-2);\n  padding: 14px 10px;\n  margin-bottom: 7px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n  border-left: 4px solid var(--low-prio);\n  position: relative;\n}\n\n.item-container:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateX(2px);\n}\n\n.item-container:last-child {\n  margin-bottom: 0;\n}\n\n.item-container:has(.item-checkbox.checked)::before {\n  width: calc(100% - 34px);\n  height: 100%;\n  content: \"\";\n  position: absolute;\n  left: 34px;\n  background-color: rgba(240, 240, 240, 0.8);\n  filter: blur(1px);\n}\n\n.item-left-container {\n  gap: 8px;\n}\n\n.item-right-container {\n  gap: 14px;\n}\n\n.item-checkbox {\n  width: 18px;\n  height: 18px;\n  border: 2px solid var(--accent-1);\n  border-radius: 5px;\n  background-color: white;\n  font-size: 1.2rem;\n  padding-left: 1px;\n}\n\n.checked {\n  background-color: var(--accent-1);\n  color: white;\n}\n\n.no-pointer-events {\n  pointer-events: none;\n  cursor: auto;\n}\n\n.item-container.no-pointer-events .item-checkbox {\n  pointer-events: all;\n  cursor: pointer;\n}\n\n.item-title {\n  width: 110px;\n  font-size: 1rem;\n  overflow-wrap: anywhere;\n}\n\n.item-due-date {\n  font-size: .9rem;\n}\n\n.item-edit-icon {\n  margin-left: 2px;\n}\n\n.item-edit-icon,\n.item-move-icon,\n.item-trash-icon  {\n  width: var(--icon-width-1);\n  height: var(--icon-height-1);\n  transition: .35s;\n}\n\n.item-edit-icon:hover,\n.item-move-icon:hover,\n.item-trash-icon:hover {\n  transform: translateY(-3px);\n}\n\n.item-container,\n.item-checkbox,\n.item-edit-icon,\n.item-move-icon,\n.item-trash-icon {\n  cursor: pointer;\n}\n\n@media (min-width: 400px) {\n  .item-title {\n    width: 155px;\n  }\n}\n\n@media (min-width: 500px) {\n  .item-title {\n    width: 230px;\n  }\n}\n\n@media (min-width: 750px) {\n  .item-title {\n    width: 270px;\n  }\n}\n\n@media (min-width: 850px) {\n  .item-title {\n    width: 335px;\n  }\n}\n\n"],sourceRoot:""}]);const s=i},618:(n,e,t)=>{t.d(e,{Z:()=>p});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),s=t(667),c=t.n(s),A=new URL(t(891),t.b),d=i()(o());d.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Alatsi&family=JetBrains+Mono:wght@200&family=Lato:wght@100;300&family=Lobster&family=Montserrat+Alternates:wght@300;400&family=Montserrat:wght@200;300;400&family=PT+Mono&family=Press+Start+2P&display=swap);"]);var l=c()(A);d.push([n.id,":root {\n  --accent-1: rgb(26, 167, 125);\n  --accent-2: rgb(240, 240, 240);\n  --accent-3: rgb(255, 62, 101);\n  --accent-4: rgb(45, 45, 45);\n  --accent-5: rgba(220, 220, 220, 0.5);\n  --accent-6: rgba(205, 205, 205, 0.65);\n  --low-prio: rgb(0, 211, 0);\n  --medium-prio: rgb(235, 235, 13);\n  --high-prio: rgb(255, 0, 0);\n  --icon-width-1: 20px;\n  --icon-height-1: 20px;\n}\n\n.app-container {\n  height: 100vh;\n  background-image: url("+l+");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n\n","",{version:3,sources:["webpack://./src/container/app.css"],names:[],mappings:"AAEA;EACE,6BAA6B;EAC7B,8BAA8B;EAC9B,6BAA6B;EAC7B,2BAA2B;EAC3B,oCAAoC;EACpC,qCAAqC;EACrC,0BAA0B;EAC1B,gCAAgC;EAChC,2BAA2B;EAC3B,oBAAoB;EACpB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,yDAA2C;EAC3C,sBAAsB;EACtB,4BAA4B;EAC5B,2BAA2B;AAC7B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Alatsi&family=JetBrains+Mono:wght@200&family=Lato:wght@100;300&family=Lobster&family=Montserrat+Alternates:wght@300;400&family=Montserrat:wght@200;300;400&family=PT+Mono&family=Press+Start+2P&display=swap');\n\n:root {\n  --accent-1: rgb(26, 167, 125);\n  --accent-2: rgb(240, 240, 240);\n  --accent-3: rgb(255, 62, 101);\n  --accent-4: rgb(45, 45, 45);\n  --accent-5: rgba(220, 220, 220, 0.5);\n  --accent-6: rgba(205, 205, 205, 0.65);\n  --low-prio: rgb(0, 211, 0);\n  --medium-prio: rgb(235, 235, 13);\n  --high-prio: rgb(255, 0, 0);\n  --icon-width-1: 20px;\n  --icon-height-1: 20px;\n}\n\n.app-container {\n  height: 100vh;\n  background-image: url(\"./bg-wallpaper.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n\n"],sourceRoot:""}]);const p=d},424:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Utilities */\n.flex {\n  display: flex;\n}\n\n.flex-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.center {\n  justify-content: center;\n  align-items: center;\n}\n\n.hidden {\n  opacity: 0;\n}\n\n.disabled {\n  filter: blur(1px) grayscale(50%) brightness(50%);\n  pointer-events: none;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;EAGE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA,cAAc;AACd;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,gDAAgD;EAChD,oBAAoB;AACtB",sourcesContent:["*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Utilities */\n.flex {\n  display: flex;\n}\n\n.flex-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.center {\n  justify-content: center;\n  align-items: center;\n}\n\n.hidden {\n  opacity: 0;\n}\n\n.disabled {\n  filter: blur(1px) grayscale(50%) brightness(50%);\n  pointer-events: none;\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],d=a[A]||0,l="".concat(A," ").concat(d);a[A]=d+1;var p=t(l),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var d=t(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},891:(n,e,t)=>{n.exports=t.p+"cbb11493c646967b47db.jpg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),c=t.n(s),A=t(216),d=t.n(A),l=t(589),p=t.n(l),u=t(618),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;var f=t(402),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),e()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;var h=t(851),C={};C.styleTagTransform=p(),C.setAttributes=c(),C.insert=i().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=d(),e()(h.Z,C),h.Z&&h.Z.locals&&h.Z.locals;var E=t(304),b={};b.styleTagTransform=p(),b.setAttributes=c(),b.insert=i().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=d(),e()(E.Z,b),E.Z&&E.Z.locals&&E.Z.locals;const v=(n,e)=>{for(let t in e)n[t]=e[t]},x=n=>{return`${n}-${e=1,t=1e6,e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1)+e)}`;var e,t},B=()=>{const n=new Date,e=String(n.getFullYear()),t=String(n.getMonth()+1),r=String(n.getDate());return`${e}-${t.padStart(2,"0")}-${r.padStart(2,"0")}`},w=n=>n.map((n=>({id:n.getId(),checked:n.getChecked(),title:n.getTitle(),notes:n.getNotes(),dueDate:n.getDueDate(),priority:n.getPriority()}))),y=n=>{localStorage.todosData=JSON.stringify(w(n.getTodosArr())),localStorage.projectsData=JSON.stringify((n=>{let e=n.map((n=>({id:n.getId(),todosData:w(n.getTodosArr()),title:n.getTitle()})));return e})(n.getProjectsArr()))},k=()=>document.querySelector(".app-container"),j=()=>document.querySelector(".content-box-container"),T=n=>{document.querySelector("#root").append(n)};var L=t(272),S={};S.styleTagTransform=p(),S.setAttributes=c(),S.insert=i().bind(null,"head"),S.domAPI=o(),S.insertStyleElement=d(),e()(L.Z,S),L.Z&&L.Z.locals&&L.Z.locals;const D=t.p+"78d50430b1270188f9e6.svg",Y=t.p+"f27db87eba7588f28088.svg",P=t.p+"f42fcd5778896408e091.svg";var M=t(497),I={};I.styleTagTransform=p(),I.setAttributes=c(),I.insert=i().bind(null,"head"),I.domAPI=o(),I.insertStyleElement=d(),e()(M.Z,I),M.Z&&M.Z.locals&&M.Z.locals;var z=t(52),Z={};Z.styleTagTransform=p(),Z.setAttributes=c(),Z.insert=i().bind(null,"head"),Z.domAPI=o(),Z.insertStyleElement=d(),e()(z.Z,Z),z.Z&&z.Z.locals&&z.Z.locals;const q=(n,e,t,r)=>{const o=document.createElement("div"),a=document.createElement("p"),i=document.createElement("div"),s=document.createElement("button"),c=document.createElement("button");function A(){o.remove(),k().classList.remove("disabled")}return o.classList.add("del-confirmation-container","flex-column","center"),a.classList.add("del-confirmation-msg"),a.innerText="Confirm Delete?",i.classList.add("del-confirmation-btns-container","flex","center"),s.classList.add("del-confirmation-no-btn"),s.innerText="NO",s.addEventListener("pointerup",(()=>{A()})),c.classList.add("del-confirmation-yes-btn"),c.innerText="YES",c.addEventListener("pointerup",(()=>{"todo"===e?(n.removeFromTodosArr(t.getId()),console.log(n.getTodosArr()),n.getProjectsArr().forEach((n=>{n.removeFromTodosArr(t.getId())}))):"project"===e&&(n.removeFromProjectsArr(t.getId()),console.log(n.getProjectsArr())),y(n),r.remove(),A()})),i.append(s,c),o.append(a,i),o};var W=t(117),U={};U.styleTagTransform=p(),U.setAttributes=c(),U.insert=i().bind(null,"head"),U.domAPI=o(),U.insertStyleElement=d(),e()(W.Z,U),W.Z&&W.Z.locals&&W.Z.locals;function N(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function O(n){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},O(n)}function F(n){return N(1,arguments),n instanceof Date||"object"===O(n)&&"[object Date]"===Object.prototype.toString.call(n)}function R(n){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},R(n)}function H(n){N(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===R(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function G(n){if(N(1,arguments),!F(n)&&"number"!=typeof n)return!1;var e=H(n);return!isNaN(Number(e))}function X(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function Q(n,e){N(2,arguments);var t=H(n).getTime(),r=X(e);return new Date(t+r)}function V(n,e){N(2,arguments);var t=X(e);return Q(n,-t)}var J=864e5;function $(n){N(1,arguments);var e=1,t=H(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function _(n){N(1,arguments);var e=H(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=$(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=$(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function K(n){N(1,arguments);var e=_(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=$(t);return r}var nn=6048e5,en={};function tn(){return en}function rn(n,e){var t,r,o,a,i,s,c,A;N(1,arguments);var d=tn(),l=X(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==t?t:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=H(n),u=p.getUTCDay(),m=(u<l?7:0)+u-l;return p.setUTCDate(p.getUTCDate()-m),p.setUTCHours(0,0,0,0),p}function on(n,e){var t,r,o,a,i,s,c,A;N(1,arguments);var d=H(n),l=d.getUTCFullYear(),p=tn(),u=X(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:p.firstWeekContainsDate)&&void 0!==r?r:null===(c=p.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==t?t:1);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(l+1,0,u),m.setUTCHours(0,0,0,0);var f=rn(m,e),g=new Date(0);g.setUTCFullYear(l,0,u),g.setUTCHours(0,0,0,0);var h=rn(g,e);return d.getTime()>=f.getTime()?l+1:d.getTime()>=h.getTime()?l:l-1}function an(n,e){var t,r,o,a,i,s,c,A;N(1,arguments);var d=tn(),l=X(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==t?t:1),p=on(n,e),u=new Date(0);u.setUTCFullYear(p,0,l),u.setUTCHours(0,0,0,0);var m=rn(u,e);return m}var sn=6048e5;function cn(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const An=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return cn("yy"===e?r%100:r,e.length)},dn=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):cn(t+1,2)},ln=function(n,e){return cn(n.getUTCDate(),e.length)},pn=function(n,e){return cn(n.getUTCHours()%12||12,e.length)},un=function(n,e){return cn(n.getUTCHours(),e.length)},mn=function(n,e){return cn(n.getUTCMinutes(),e.length)},fn=function(n,e){return cn(n.getUTCSeconds(),e.length)},gn=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return cn(Math.floor(r*Math.pow(10,t-3)),e.length)};var hn={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return An(n,e)},Y:function(n,e,t,r){var o=on(n,r),a=o>0?o:1-o;return"YY"===e?cn(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):cn(a,e.length)},R:function(n,e){return cn(_(n),e.length)},u:function(n,e){return cn(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return cn(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return cn(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return dn(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return cn(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){N(1,arguments);var t=H(n),r=rn(t,e).getTime()-an(t,e).getTime();return Math.round(r/sn)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):cn(o,e.length)},I:function(n,e,t){var r=function(n){N(1,arguments);var e=H(n),t=$(e).getTime()-K(e).getTime();return Math.round(t/nn)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):cn(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):ln(n,e)},D:function(n,e,t){var r=function(n){N(1,arguments);var e=H(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/J)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):cn(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return cn(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return cn(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return cn(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return pn(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):un(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):cn(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):cn(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):mn(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):fn(n,e)},S:function(n,e){return gn(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return En(o);case"XXXX":case"XX":return bn(o);default:return bn(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return En(o);case"xxxx":case"xx":return bn(o);default:return bn(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Cn(o,":");default:return"GMT"+bn(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Cn(o,":");default:return"GMT"+bn(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return cn(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return cn((r._originalDate||n).getTime(),e.length)}};function Cn(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=e||"";return t+String(o)+i+cn(a,2)}function En(n,e){return n%60==0?(n>0?"-":"+")+cn(Math.abs(n)/60,2):bn(n,e)}function bn(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+cn(Math.floor(o/60),2)+t+cn(o%60,2)}const vn=hn;var xn=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Bn=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const wn={p:Bn,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return xn(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",xn(o,e)).replace("{{time}}",Bn(a,e))}};function yn(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var kn=["D","DD"],jn=["YY","YYYY"];function Tn(n){return-1!==kn.indexOf(n)}function Ln(n){return-1!==jn.indexOf(n)}function Sn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Dn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Yn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const Pn={date:Yn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Yn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Yn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Mn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function In(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[s]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const zn={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:In({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:In({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:In({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:In({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:In({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Zn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,s=a[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],A=Array.isArray(c)?Wn(c,(function(n){return n.test(s)})):qn(c,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(A):A,i=t.valueCallback?t.valueCallback(i):i;var d=e.slice(s.length);return{value:i,rest:d}}}function qn(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function Wn(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var Un,Nn={ordinalNumber:(Un={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(Un.matchPattern);if(!t)return null;var r=t[0],o=n.match(Un.parsePattern);if(!o)return null;var a=Un.valueCallback?Un.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=n.slice(r.length);return{value:a,rest:i}}),era:Zn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Zn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Zn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Zn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Zn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const On={code:"en-US",formatDistance:function(n,e,t){var r,o=Dn[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:Pn,formatRelative:function(n,e,t,r){return Mn[n]},localize:zn,match:Nn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Fn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Rn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Hn=/^'([^]*?)'?$/,Gn=/''/g,Xn=/[a-zA-Z]/;function Qn(n){var e=n.match(Hn);return e?e[1].replace(Gn,"'"):n}const Vn=(n,e,t,r,o,a)=>{const i=a||x(e);return{id:i,getChecked:()=>n,getTitle:()=>e,getNotes:()=>t,getDueDate:()=>r,getPriority:()=>o,getId:()=>i,editChecked:()=>{n=!n},editTitle:n=>{e=n},editNotes:n=>{t=n},editDueDate:n=>{r=n},editPriority:n=>{o=n}}},Jn=(n,e,t)=>{const r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),s=document.createElement("p"),c=document.createElement("sup"),A=document.createElement("p"),d=document.createElement("img"),l=document.createElement("img"),p=document.createElement("img"),u=$n(n.getDueDate());return r.classList.add("item-container","flex"),r.dataset.id=n.getId(),r.dataset.projectId=t,r.style.borderLeft=`4px solid var(--${n.getPriority()}-prio)`,r.addEventListener("pointerup",(e=>{e.stopPropagation(),T((({getPriority:n,getDueDate:e,getTitle:t,getNotes:r})=>{const o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),s=document.createElement("div"),c=document.createElement("p"),A=document.createElement("p"),d=document.createElement("p"),l=document.createElement("button");return o.classList.add("details-container"),a.classList.add("details-top-container","flex"),i.classList.add("details-bottom-container"),s.classList.add("details-priority","flex","center"),s.innerText=n()[0].toUpperCase()+n().slice(1),c.classList.add("details-due-date","flex","center"),c.innerText=`Due: ${e()}`,A.classList.add("details-title"),A.innerText=t(),d.classList.add("details-notes"),d.innerText=r()||"No Notes",l.classList.add("details-close-btn"),l.innerText="CLOSE",l.addEventListener("pointerup",(()=>{o.remove(),k().classList.remove("disabled")})),a.append(s,c),i.append(A,d,l),o.append(a,i),o})(n)),k().classList.add("disabled")})),o.classList.add("item-left-container","flex","center"),a.classList.add("item-right-container","flex","center"),i.classList.add("item-checkbox","flex","center"),i.addEventListener("pointerup",(e=>{e.stopPropagation(),i.classList.toggle("checked"),r.classList.toggle("no-pointer-events"),n.editChecked(),i.innerText=n.getChecked()?"✓":""})),s.classList.add("item-title"),s.innerText=n.getTitle(),c.innerText=u.slice(-6,-4),A.classList.add("item-due-date"),A.append(u.slice(0,-6),c,u.slice(-4)),d.classList.add("item-edit-icon"),d.title="Edit Todo",d.src=D,d.addEventListener("pointerup",(t=>{t.stopPropagation();const o=document.querySelector(".navbar-container[data-mode]").dataset.mode,a="null"===r.dataset.projectId?null:r.dataset.projectId;T(me(e,o,"edit-todo",n,null,a)),k().classList.add("disabled")})),l.classList.add("item-move-icon"),l.title="Move to Project",l.src=Y,l.addEventListener("pointerup",(t=>{t.stopPropagation(),T(((n,e)=>{const t=document.createElement("div"),r=document.createElement("p"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("button"),s=document.createElement("button");t.classList.add("project-selector-container"),r.classList.add("project-selector-title","flex","center"),r.innerText="Add To Project",o.classList.add("project-selector-projects-box","flex-column"),a.classList.add("project-selector-btns-container","flex","center"),i.classList.add("project-selector-cancel-btn"),i.innerText="CANCEL",i.addEventListener("pointerup",(()=>{t.remove(),k().classList.remove("disabled")})),s.classList.add("project-selector-ok-btn"),s.innerText="OK",s.addEventListener("pointerup",(()=>{const r=Array.from(document.querySelectorAll(".project-option.selected"));if(!r.length)return k().classList.remove("disabled"),void t.remove();const o=r.map((n=>n.dataset.id));console.log("ids:",o),o.forEach((t=>{n.getProjectsArr().forEach((n=>{t===n.getId()&&n.pushToTodosArr(e)}))})),k().classList.remove("disabled"),t.remove()}));const c=n.getProjectsArr().filter((n=>n.getTodosArr().every((n=>n.getId()!==e.getId())))),A=c.map((n=>(n=>{const e=document.createElement("div"),t=document.createElement("p");return e.classList.add("project-option","flex","center"),e.dataset.id=n.getId(),e.addEventListener("pointerup",(()=>{e.classList.toggle("selected")})),t.classList.add("project-option-title"),t.innerText=n.getTitle(),e.append(t),e})(n)));return A.length?o.append(...A):o.append("No Projects"),a.append(i,s),t.append(r,o,a),t})(e,n)),k().classList.add("disabled")})),p.classList.add("item-trash-icon"),p.title="Delete Todo",p.src=P,p.addEventListener("pointerup",(t=>{t.stopPropagation(),T(q(e,"todo",n,r)),k().classList.add("disabled")})),o.append(i,s),a.append(A,d,l,p),r.append(o,a),r},$n=n=>{const[e,t,r]=n.split("-"),o=Number(t)-1;return function(n,e,t){var r,o,a,i,s,c,A,d,l,p,u,m,f,g,h,C,E,b;N(2,arguments);var v=String(e),x=tn(),B=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:x.locale)&&void 0!==r?r:On,w=X(null!==(a=null!==(i=null!==(s=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(A=t.locale)||void 0===A||null===(d=A.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:x.firstWeekContainsDate)&&void 0!==i?i:null===(l=x.locale)||void 0===l||null===(p=l.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==a?a:1);if(!(w>=1&&w<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=X(null!==(u=null!==(m=null!==(f=null!==(g=null==t?void 0:t.weekStartsOn)&&void 0!==g?g:null==t||null===(h=t.locale)||void 0===h||null===(C=h.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==f?f:x.weekStartsOn)&&void 0!==m?m:null===(E=x.locale)||void 0===E||null===(b=E.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==u?u:0);if(!(y>=0&&y<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!B.localize)throw new RangeError("locale must contain localize property");if(!B.formatLong)throw new RangeError("locale must contain formatLong property");var k=H(n);if(!G(k))throw new RangeError("Invalid time value");var j=yn(k),T=V(k,j),L={firstWeekContainsDate:w,weekStartsOn:y,locale:B,_originalDate:k};return v.match(Rn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,wn[e])(n,B.formatLong):n})).join("").match(Fn).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Qn(r);var a=vn[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!Ln(r)||Sn(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!Tn(r)||Sn(r,e,String(n)),a(T,r,B.localize,L);if(o.match(Xn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}(new Date(e,o,r),"do MMM")};var _n=t(735),Kn={};Kn.styleTagTransform=p(),Kn.setAttributes=c(),Kn.insert=i().bind(null,"head"),Kn.domAPI=o(),Kn.insertStyleElement=d(),e()(_n.Z,Kn),_n.Z&&_n.Z.locals&&_n.Z.locals;const ne=t.p+"3cffe9a515498593b872.svg",ee=t.p+"78d50430b1270188f9e6.svg",te=t.p+"f42fcd5778896408e091.svg";var re=t(417),oe={};function ae(n,e){var t,r,o,a,i,s,c,A;N(1,arguments);var d=tn(),l=X(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==t?t:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=H(n),u=p.getDay(),m=(u<l?7:0)+u-l;return p.setDate(p.getDate()-m),p.setHours(0,0,0,0),p}function ie(n,e,t){N(2,arguments);var r=ae(n,t),o=ae(e,t);return r.getTime()===o.getTime()}function se(n,e){return N(1,arguments),ie(n,Date.now(),e)}oe.styleTagTransform=p(),oe.setAttributes=c(),oe.insert=i().bind(null,"head"),oe.domAPI=o(),oe.insertStyleElement=d(),e()(re.Z,oe),re.Z&&re.Z.locals&&re.Z.locals;const ce=(n,e,t,r)=>{const o=document.createElement("div");if(o.classList.add("holder-box-container","flex-column"),j()&&j().lastElementChild.remove(),!t.length&&"projects"===e)return o.append("No Projects"),o;if(!t.length)return o.append("No Todos"),o;if("todos"===e){const e=Ae(t);o.append(...e.map((e=>Jn(e,n,r))))}else if("projects"===e)o.append(...t.map((e=>ue(e,n))));else if("day"===e){const e=de(t);o.append(...e.map((e=>Jn(e,n,r))))}else if("week"===e){const e=le(t),a=Ae(e);o.append(...a.map((e=>Jn(e,n,r))))}return o},Ae=n=>n.sort(((n,e)=>function(n,e){N(2,arguments);var t=H(n),r=H(e),o=t.getTime()-r.getTime();return o<0?-1:o>0?1:o}(new Date(n.getDueDate()),new Date(e.getDueDate())))),de=n=>{const e=B();return n.filter((n=>n.getDueDate()===e))},le=n=>n.filter((n=>{const e=`${n.getDueDate()}T00:00:00`;return se(new Date(e),{weekStartsOn:1})})),pe=(n,e,t)=>{const r=e||x(n);let o=t||[];return{id:r,getTitle:()=>n,getTodosArr:()=>o,getId:()=>r,editTitle:e=>{n=e},pushToTodosArr:n=>{o.push(n)},removeFromTodosArr:n=>{o=o.filter((e=>e.id!==n))}}},ue=(n,e)=>{const t=document.createElement("div"),r=document.createElement("p"),o=document.createElement("img"),a=document.createElement("img"),i=document.createElement("img");return t.classList.add("project-container","flex","center"),t.dataset.id=n.getId(),t.addEventListener("pointerup",(r=>{r.stopPropagation();const o=n.getTodosArr(),a=t.dataset.id;console.log("todosArr:",o),j().append(ce(e,"todos",o,a))})),r.classList.add("project-title"),r.innerText=n.getTitle(),o.classList.add("project-add-icon"),o.src=ne,o.addEventListener("pointerup",(t=>{t.stopPropagation(),T(me(e,null,"add-to-project",null,n)),k().classList.add("disabled")})),a.classList.add("project-edit-icon"),a.src=ee,a.addEventListener("pointerup",(t=>{t.stopPropagation();const r=document.querySelector(".navbar-container[data-mode]").dataset.mode;T(me(e,r,"edit-project",null,n)),k().classList.add("disabled")})),i.classList.add("project-trash-icon"),i.src=te,i.addEventListener("pointerup",(r=>{r.stopPropagation(),T(q(e,"project",n,t)),k().classList.add("disabled")})),t.append(r,o,a,i),t},me=(n,e,t,r,o,a)=>{const i=document.createElement("div"),s=document.createElement("div"),c=document.createElement("div"),A=document.createElement("button"),d=document.createElement("button");return i.classList.add("box","flex","center"),s.classList.add("form-container"),c.classList.add("form-top-container","flex","center"),A.classList.add("form-todo-btn"),A.innerText="edit-todo"===t?"Edit Todo":"New Todo",d.classList.add("form-project-btn"),d.innerText="edit-project"===t?"Edit Project":"New Project","edit-todo"===t?(A.classList.add("border-btm-w","no-pointer-events"),c.append(A),s.append(c,fe(n,e,t,i,r,null,a)),i.append(s)):"edit-project"===t?(s.classList.add("project-fields-height"),d.classList.add("border-btm-w","no-pointer-events"),c.append(d),s.append(c,ge(n,e,t,i,o)),i.append(s)):"add-to-project"===t?(A.classList.add("border-btm-w","no-pointer-events"),c.append(A),s.append(c,fe(n,e,t,i,null,o,null)),i.append(s)):(A.classList.add("border-btm-b"),c.append(A,d),s.append(c,fe(n,e,t,i,null,null,null)),i.append(s),A.addEventListener("pointerup",(()=>{s.classList.remove("project-fields-height"),A.classList.add("border-btm-b"),d.classList.remove("border-btm-b"),s.lastElementChild.remove(),s.append(fe(n,e,t,i,null,null,null)),i.append(s)})),d.addEventListener("pointerup",(()=>{s.classList.add("project-fields-height"),A.classList.remove("border-btm-b"),d.classList.add("border-btm-b"),s.lastElementChild.remove(),s.append(ge(n,e,t,i,null)),i.append(s)}))),i},fe=(n,e,t,r,o,a,i)=>{const s=document.createElement("div"),c=document.createElement("form"),A=document.createElement("textarea"),d=document.createElement("textarea"),l=document.createElement("div"),p=document.createElement("label"),u=document.createElement("input"),m=document.createElement("div"),f=document.createElement("p"),g=document.createElement("div"),h=document.createElement("input"),C=document.createElement("label"),E=document.createElement("input"),b=document.createElement("label"),x=document.createElement("input"),B=document.createElement("label");return s.classList.add("form-fields-container","flex-column"),c.classList.add("form-middle-container","flex-column"),c.id="form",c.addEventListener("submit",(s=>{s.preventDefault(),"add"===t?Ee(n,e):"edit-todo"===t?be(n,e,o,i):"add-to-project"===t&&ke(n,a),k().classList.remove("disabled"),r.remove()})),A.classList.add("form-title-input"),A.placeholder="Enter Title",A.innerText=o?o.getTitle():"",A.setAttribute("maxlength","50"),A.required=!0,d.classList.add("form-notes-input"),d.placeholder="Enter Notes",d.innerText=o?o.getNotes():"",d.setAttribute("maxlength","300"),l.classList.add("form-due-date-container","flex-column","center"),p.classList.add("form-due-date-label"),p.innerText="Due Date",u.classList.add("form-due-date-input"),u.type="date",u.value=o?o.getDueDate():"22-11-11",u.required=!0,m.classList.add("form-priority-container","flex-column","center"),f.classList.add("form-priority-title"),f.innerText="Priority",g.classList.add("form-priority-options-container","flex"),v(h,{type:"radio",id:"l-prio",value:"low",name:"priority",required:!0,checked:!(!o||"low"!==o.getPriority())}),h.classList.add("form-priority-radio","hidden"),C.setAttribute("for","l-prio"),C.innerText="Low",C.classList.add("form-priority-label","l-prio-label"),v(E,{type:"radio",id:"m-prio",value:"medium",name:"priority",required:!0,checked:!(!o||"medium"!==o.getPriority())}),E.classList.add("form-priority-radio","hidden"),b.setAttribute("for","m-prio"),b.innerText="Medium",b.classList.add("form-priority-label","m-prio-label"),v(x,{type:"radio",id:"h-prio",value:"high",name:"priority",required:!0,checked:!(!o||"high"!==o.getPriority())}),x.classList.add("form-priority-radio","hidden"),B.setAttribute("for","h-prio"),B.innerText="High",B.classList.add("form-priority-label","h-prio-label"),s.append(c,he(r)),c.append(A,d,l,m),l.append(p,u),m.append(f,g),g.append(h,C,E,b,x,B),s},ge=(n,e,t,r,o)=>{const a=document.createElement("div"),i=document.createElement("form"),s=document.createElement("textarea");return a.classList.add("form-fields-container","flex-column"),i.classList.add("form-middle-container","flex-column"),i.id="form",i.addEventListener("submit",(a=>{a.preventDefault(),"add"===t?ve(n,e):"edit-project"===t&&xe(n,e,o),k().classList.remove("disabled"),r.remove()})),s.classList.add("form-title-input"),s.placeholder="Enter Title",s.innerText=o?o.getTitle():"",s.setAttribute("maxlength","50"),s.required=!0,a.append(i,he(r)),i.append(s),a},he=n=>{const e=document.createElement("div"),t=document.createElement("button"),r=document.createElement("button");return e.classList.add("form-bottom-container","flex","center"),t.classList.add("form-cancel-btn"),t.innerText="CANCEL",t.addEventListener("pointerup",(()=>{n.remove(),k().classList.remove("disabled")})),r.classList.add("form-ok-btn"),r.innerText="OK",r.setAttribute("form","form"),e.append(t,r),e},Ce=()=>{const n=document.querySelector(".form-title-input"),e=document.querySelector(".form-notes-input"),t=document.querySelector(".form-due-date-input"),r=document.querySelector("input[name='priority']:checked");return console.log({titleVal:n.value,notesVal:e?e.value:null,dueDateVal:t?t.value:null,priorityVal:r?r.value:null}),{titleVal:n.value,notesVal:e?e.value:null,dueDateVal:t?t.value:null,priorityVal:r?r.value:null}},Ee=(n,e)=>{const t=je(),{isDueToday:r,isDueThisWeek:o}=Be(t);n.pushToTodosArr(t),y(n);const a=n.getTodosArr();we(n,e,a,r,o,null)},be=(n,e,t,r)=>{const{titleVal:o,notesVal:a,dueDateVal:i,priorityVal:s}=Ce();t.editTitle(o),t.editNotes(a),t.editDueDate(i),t.editPriority(s),n.updateTodosArr(t),y(n);const{isDueToday:c,isDueThisWeek:A}=Be(t);if(r){const t=n.getProjectsArr().filter((n=>n.getId()===r))[0].getTodosArr();we(n,e,t,null,null,r)}else{const t=n.getTodosArr();we(n,e,t,c,A,null)}},ve=(n,e)=>{const{titleVal:t}=Ce(),r=pe(t,null,null);n.pushToProjectsArr(r),y(n);const o=n.getProjectsArr();ye(n,e,o)},xe=(n,e,t)=>{const{titleVal:r}=Ce();t.editTitle(r),n.updateProjectsArr(t),y(n);const o=n.getProjectsArr();ye(n,e,o)},Be=n=>{const e=B(),t=`${n.getDueDate()}T00:00:00`;return{isDueToday:n.getDueDate()===e,isDueThisWeek:se(new Date(t),{weekStartsOn:1})}},we=(n,e,t,r,o,a)=>{"todos"===e?j().append(ce(n,"todos",t,a)):"day"===e&&r?j().append(ce(n,"day",t,a)):"week"===e&&o?j().append(ce(n,"week",t,a)):"projects"===e&&j().append(ce(n,"todos",t,a))},ye=(n,e,t)=>{"projects"===e&&j().append(ce(n,"projects",t))},ke=(n,e)=>{const t=je();e.pushToTodosArr(t),n.pushToTodosArr(t),n.updateProjectsArr(e),y(n)},je=()=>{const{titleVal:n,notesVal:e,dueDateVal:t,priorityVal:r}=Ce();return Vn(!1,n,e,t,r,null)},Te=n=>n.map((n=>{const{checked:e,title:t,notes:r,dueDate:o,priority:a,id:i}=n;return Vn(e,t,r,o,a,i)}));var Le=t(424),Se={};Se.styleTagTransform=p(),Se.setAttributes=c(),Se.insert=i().bind(null,"head"),Se.domAPI=o(),Se.insertStyleElement=d(),e()(Le.Z,Se),Le.Z&&Le.Z.locals&&Le.Z.locals,document.querySelector("#root").append((()=>{const n=document.createElement("div"),e=(()=>{let n=[],e=[];return{getTodosArr:()=>n,getProjectsArr:()=>e,initializeTodosArr:e=>{n=e},initializeProjectsArr:n=>{e=n},pushToTodosArr:e=>{n.push(e)},removeFromTodosArr:e=>{n=n.filter((n=>n.id!==e))},updateTodosArr:e=>{n=n.map((n=>n.getId()===e.getId()?e:n))},pushToProjectsArr:n=>{e.push(n)},removeFromProjectsArr:n=>{e=e.filter((e=>e.id!==n))},updateProjectsArr:n=>{e=e.map((e=>e.getId()===n.getId()?n:e))}}})();return(n=>{localStorage.todosData?n.initializeTodosArr(Te(JSON.parse(localStorage.todosData))):n.initializeTodosArr([]),localStorage.projectsData?n.initializeProjectsArr(JSON.parse(localStorage.projectsData).map((n=>{const{title:e,id:t,todosData:r}=n,o=Te(r);return pe(e,t,o)}))):n.initializeProjectsArr([])})(e),onbeforeunload=y(e),n.classList.add("app-container","flex-column","center"),n.append((n=>{const e=document.createElement("div"),t=document.createElement("span"),r=document.createElement("h1");return e.classList.add("content-box-container"),t.classList.add("material-symbols-outlined"),t.append("checklist"),r.classList.add("content-box-title","flex"),r.append(t,"To-Do"),e.append(r,(n=>{let e="todos";const t=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),s=document.createElement("div");function c(n){e=n,t.dataset.mode=e}function A(n){document.querySelectorAll(".navbar-btn-grp-1").forEach((n=>{n.classList.remove("navbar-btn-selected")})),n.target.classList.add("navbar-btn-selected")}function d(){window.innerWidth<650?(r.innerText="T",o.innerText="P",a.innerText="D",i.innerText="W"):(r.innerText="Todos",o.innerText="Projects",a.innerText="Day",i.innerText="Week")}return t.classList.add("navbar-container","flex"),t.dataset.mode=e,r.classList.add("navbar-btn","navbar-btn-grp-1","navbar-todos-btn","flex","navbar-btn-selected"),r.addEventListener("pointerup",(e=>{A(e),c("todos");const t=n.getTodosArr();console.log("todosArr:",t),j().append(ce(n,"todos",t,null))})),o.classList.add("navbar-btn","navbar-btn-grp-1","navbar-projects-btn","flex"),o.addEventListener("pointerup",(e=>{A(e),c("projects");const t=n.getProjectsArr();console.log("projectsArr:",t),j().append(ce(n,"projects",t))})),a.classList.add("navbar-btn","navbar-btn-grp-1","navbar-day-btn","flex"),a.addEventListener("pointerup",(t=>{A(t),c("day");const r=n.getTodosArr();console.log("todosArr:",r),j().append(ce(n,e,r,null))})),i.classList.add("navbar-btn","navbar-btn-grp-1","navbar-week-btn","flex"),i.addEventListener("pointerup",(t=>{A(t),c("week");const r=n.getTodosArr();console.log("todosArr:",r),j().append(ce(n,e,r,null))})),s.classList.add("navbar-btn","navbar-btn-grp-2","navbar-plus-btn","flex"),s.title="Add New",s.innerText="+",s.addEventListener("pointerup",(()=>{T(me(n,e,"add",null,null,null)),k().classList.add("disabled")})),d(),window.onresize=d,t.append(r,o,a,i,s),t})(n),ce(n,"todos",n.getTodosArr(),null)),e})(e)),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,