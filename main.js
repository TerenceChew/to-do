(()=>{"use strict";var n={402:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".content-box-container {\n  width: 100%;\n  height: 100vh;\n  display: grid;\n  grid-template: 65px 1fr 100px / 1fr;\n  background-color: white;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.content-box-container::-webkit-scrollbar {\n  display: none;\n}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 200,\n  'opsz' 48;\n  font-size: 1.85rem;\n}\n\n.content-box-title {\n  justify-content: center;\n  align-items: center;\n  gap: 11px;\n  grid-area: 1 / 1 / 2 / -1;\n  color: white;\n  background-color: var(--accent-3);\n  font-size: 2rem;\n  font-family: 'PT Mono', monospace;\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.25);\n}\n\n@media (min-width: 650px) {\n  .content-box-container {\n    max-width: 950px;\n    max-height: 550px;\n    grid-template: 65px 1fr / 190px 1fr;\n    box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  }\n\n  .content-box-title {\n    justify-content: start;\n    padding-left: 25px;\n    padding-top: 4px;\n  }\n}\n\n@media (min-width: 850px) {\n  .content-box-container {\n    grid-template: 65px 1fr / 225px 1fr;\n  }\n\n  .material-symbols-outlined {\n    font-size: 2.2rem;\n  }\n\n  .content-box-title {\n    font-size: 2.3rem;\n  }\n}\n\n@media (min-width: 1600px) {\n  .content-box-container {\n    max-width: 1150px;\n    max-height: 600px;\n    grid-template: 65px 1fr / 250px 1fr;\n  }\n\n  .material-symbols-outlined {\n    font-size: 2.3rem;\n  }\n\n  .content-box-title {\n    font-size: 2.4rem;\n  }\n}\n","",{version:3,sources:["webpack://./src/components/contentBox/contentBox.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,aAAa;EACb,aAAa;EACb,mCAAmC;EACnC,uBAAuB;EACvB,gBAAgB;EAChB,wBAAwB,GAAG,gBAAgB;EAC3C,qBAAqB,GAAG,YAAY;AACtC;;AAEA,gDAAgD;AAChD;EACE,aAAa;AACf;;AAEA;EACE;;;;WAIS;EACT,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,yBAAyB;EACzB,YAAY;EACZ,iCAAiC;EACjC,eAAe;EACf,iCAAiC;EACjC,2CAA2C;AAC7C;;AAEA;EACE;IACE,gBAAgB;IAChB,iBAAiB;IACjB,mCAAmC;IACnC,6CAA6C;EAC/C;;EAEA;IACE,sBAAsB;IACtB,kBAAkB;IAClB,gBAAgB;EAClB;AACF;;AAEA;EACE;IACE,mCAAmC;EACrC;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;AACF;;AAEA;EACE;IACE,iBAAiB;IACjB,iBAAiB;IACjB,mCAAmC;EACrC;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;AACF",sourcesContent:[".content-box-container {\n  width: 100%;\n  height: 100vh;\n  display: grid;\n  grid-template: 65px 1fr 100px / 1fr;\n  background-color: white;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.content-box-container::-webkit-scrollbar {\n  display: none;\n}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 200,\n  'opsz' 48;\n  font-size: 1.85rem;\n}\n\n.content-box-title {\n  justify-content: center;\n  align-items: center;\n  gap: 11px;\n  grid-area: 1 / 1 / 2 / -1;\n  color: white;\n  background-color: var(--accent-3);\n  font-size: 2rem;\n  font-family: 'PT Mono', monospace;\n  box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.25);\n}\n\n@media (min-width: 650px) {\n  .content-box-container {\n    max-width: 950px;\n    max-height: 550px;\n    grid-template: 65px 1fr / 190px 1fr;\n    box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  }\n\n  .content-box-title {\n    justify-content: start;\n    padding-left: 25px;\n    padding-top: 4px;\n  }\n}\n\n@media (min-width: 850px) {\n  .content-box-container {\n    grid-template: 65px 1fr / 225px 1fr;\n  }\n\n  .material-symbols-outlined {\n    font-size: 2.2rem;\n  }\n\n  .content-box-title {\n    font-size: 2.3rem;\n  }\n}\n\n@media (min-width: 1600px) {\n  .content-box-container {\n    max-width: 1150px;\n    max-height: 600px;\n    grid-template: 65px 1fr / 250px 1fr;\n  }\n\n  .material-symbols-outlined {\n    font-size: 2.3rem;\n  }\n\n  .content-box-title {\n    font-size: 2.4rem;\n  }\n}\n"],sourceRoot:""}]);const A=i},52:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".del-confirmation-container {\n  width: 255px;\n  height: 140px;\n  gap: 35px;\n  background-color: white;\n  padding: 10px 15px;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 100;\n}\n\n.del-confirmation-msg {\n  font-size: 1.25rem;\n}\n\n.del-confirmation-btns-container {\n  gap: 15px;\n}\n\n.del-confirmation-no-btn,\n.del-confirmation-yes-btn {\n  width: 100px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.del-confirmation-no-btn:hover,\n.del-confirmation-yes-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.del-confirmation-no-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.del-confirmation-yes-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.del-confirmation-no-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.del-confirmation-yes-btn:hover {\n  background-color: var(--accent-1);\n}\n\n\n\n","",{version:3,sources:["webpack://./src/components/delConfirmation/delConfirmation.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,SAAS;EACT,uBAAuB;EACvB,kBAAkB;EAClB,+BAA+B;EAC/B,kBAAkB;EAClB,6CAA6C;EAC7C,eAAe;EACf,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,SAAS;AACX;;AAEA;;EAEE,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,mBAAmB;EACnB,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,eAAe;EACf,uBAAuB;EACvB,eAAe;AACjB;;AAEA;;EAEE,YAAY;EACZ,2BAA2B;EAC3B,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;AACnC",sourcesContent:[".del-confirmation-container {\n  width: 255px;\n  height: 140px;\n  gap: 35px;\n  background-color: white;\n  padding: 10px 15px;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 100;\n}\n\n.del-confirmation-msg {\n  font-size: 1.25rem;\n}\n\n.del-confirmation-btns-container {\n  gap: 15px;\n}\n\n.del-confirmation-no-btn,\n.del-confirmation-yes-btn {\n  width: 100px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.del-confirmation-no-btn:hover,\n.del-confirmation-yes-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.del-confirmation-no-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.del-confirmation-yes-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.del-confirmation-no-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.del-confirmation-yes-btn:hover {\n  background-color: var(--accent-1);\n}\n\n\n\n"],sourceRoot:""}]);const A=i},417:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".holder-box-container {\n  grid-area: 2 / 1 / 3 / -1;\n  justify-content: start;\n  align-items: center;\n  padding: 15px 10px;\n  font-family: 'Lato', sans-serif;\n  font-size: 1.15rem;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.holder-box-container::-webkit-scrollbar {\n  display: none;\n}\n\n@media (min-width: 650px) {\n  .holder-box-container {\n    grid-area: 2 / 2 / -1 / -1;\n    padding: 15px;\n  }\n}","",{version:3,sources:["webpack://./src/components/holderBox/holderBox.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,sBAAsB;EACtB,mBAAmB;EACnB,kBAAkB;EAClB,+BAA+B;EAC/B,kBAAkB;EAClB,gBAAgB;EAChB,wBAAwB,GAAG,gBAAgB;EAC3C,qBAAqB,GAAG,YAAY;AACtC;;AAEA,gDAAgD;AAChD;EACE,aAAa;AACf;;AAEA;EACE;IACE,0BAA0B;IAC1B,aAAa;EACf;AACF",sourcesContent:[".holder-box-container {\n  grid-area: 2 / 1 / 3 / -1;\n  justify-content: start;\n  align-items: center;\n  padding: 15px 10px;\n  font-family: 'Lato', sans-serif;\n  font-size: 1.15rem;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.holder-box-container::-webkit-scrollbar {\n  display: none;\n}\n\n@media (min-width: 650px) {\n  .holder-box-container {\n    grid-area: 2 / 2 / -1 / -1;\n    padding: 15px;\n  }\n}"],sourceRoot:""}]);const A=i},851:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".navbar-container {\n  width: min(430px, 90%);\n  height: 70px;\n  place-self: center;\n  grid-area: 3 / 1 / -1 / -1;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 15px;\n  background-color: var(--accent-4);\n  border-radius: 14px;\n}\n\n.navbar-btn {\n  height: 47px;\n  width: 47px;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n  border-radius: 15px;\n  transition: .4s;\n  cursor: pointer;\n}\n\n.navbar-btn:hover {\n  transform: translateY(-4px);\n}\n\n.navbar-btn-icon {\n  width: 27px;\n  height: 27px;\n}\n\n.navbar-btn-selected {\n  pointer-events: none;\n  background-color: var(--accent-1);\n}\n\n.navbar-plus-btn {\n  margin-bottom: 4px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 2.8rem;\n  color: var(--accent-1);\n}\n\n.navbar-plus-btn:hover {\n  color: var(--accent-1);\n}\n\n@media (min-width: 650px) {\n  .navbar-container {\n    width: 100%;\n    height: 100%;\n    place-self: auto;\n    grid-area: 2 / 1 / 3 / 2;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 0 20px 0;\n    background-color: var(--accent-5);\n    box-shadow: 1px 0 4px 0 rgba(0, 0, 0, 0.25);\n    border-radius: 0;\n  }\n\n  .navbar-btn {\n    width: 100%;\n    height: 65px;\n    justify-content: start;\n    align-items: center;\n    padding-left: 15px;\n    font-size: 1.1rem;\n    color: var(--accent-4);\n    font-family: 'Montserrat', sans-serif;\n    border-radius: 0;\n    border-right: 6px solid transparent;\n    transition: .65s;\n    position: relative;\n  }\n\n  .navbar-btn-grp-1::before {\n    width: 25px;\n    height: 25px;\n    content: attr(data-count);\n    position: absolute;\n    right: 20px;\n    top: 50%;\n    transform: translateY(-50%);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: 1px;\n    border-radius: 50%;\n    font-size: .85rem;\n    font-weight: bold;\n    color: var(--accent-3);\n    background-color: white;\n  }\n\n  .navbar-btn:hover,\n  .navbar-btn-selected  {\n    transform: none;\n    color: var(--accent-4);\n    background-color: var(--accent-6);\n  }\n\n  .navbar-btn-selected {\n    border-right: 6px solid var(--accent-1);\n  }\n\n  .navbar-plus-btn {\n    width: 80px;\n    justify-content: center;\n    margin-top: auto;\n    padding-left: 0px;\n    font-size: 2.95rem;\n    color: var(--accent-1);\n    border: none;\n  }\n\n  .navbar-plus-btn:hover {\n    transform: scale(1.3);\n    color: var(--accent-1);\n    background-color: transparent;\n  }\n}\n\n@media (min-width: 850px) {\n  .navbar-btn {\n    padding-left: 20px;\n    font-size: 1.15rem;\n  }\n\n  .navbar-btn-grp-1::before {\n    right: 24px;\n  }\n\n  .navbar-plus-btn {\n    font-size: 2.95rem;\n  }\n}\n\n\n","",{version:3,sources:["webpack://./src/components/navbar/navbar.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,YAAY;EACZ,kBAAkB;EAClB,0BAA0B;EAC1B,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;EACf,iCAAiC;EACjC,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;EACjB,mBAAmB;EACnB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,oBAAoB;EACpB,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;EAClB,qCAAqC;EACrC,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE;IACE,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,wBAAwB;IACxB,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;IACnB,iCAAiC;IACjC,2CAA2C;IAC3C,gBAAgB;EAClB;;EAEA;IACE,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;IACjB,sBAAsB;IACtB,qCAAqC;IACrC,gBAAgB;IAChB,mCAAmC;IACnC,gBAAgB;IAChB,kBAAkB;EACpB;;EAEA;IACE,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;IAClB,WAAW;IACX,QAAQ;IACR,2BAA2B;IAC3B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,sBAAsB;IACtB,uBAAuB;EACzB;;EAEA;;IAEE,eAAe;IACf,sBAAsB;IACtB,iCAAiC;EACnC;;EAEA;IACE,uCAAuC;EACzC;;EAEA;IACE,WAAW;IACX,uBAAuB;IACvB,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,sBAAsB;IACtB,YAAY;EACd;;EAEA;IACE,qBAAqB;IACrB,sBAAsB;IACtB,6BAA6B;EAC/B;AACF;;AAEA;EACE;IACE,kBAAkB;IAClB,kBAAkB;EACpB;;EAEA;IACE,WAAW;EACb;;EAEA;IACE,kBAAkB;EACpB;AACF",sourcesContent:[".navbar-container {\n  width: min(430px, 90%);\n  height: 70px;\n  place-self: center;\n  grid-area: 3 / 1 / -1 / -1;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 15px;\n  background-color: var(--accent-4);\n  border-radius: 14px;\n}\n\n.navbar-btn {\n  height: 47px;\n  width: 47px;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n  border-radius: 15px;\n  transition: .4s;\n  cursor: pointer;\n}\n\n.navbar-btn:hover {\n  transform: translateY(-4px);\n}\n\n.navbar-btn-icon {\n  width: 27px;\n  height: 27px;\n}\n\n.navbar-btn-selected {\n  pointer-events: none;\n  background-color: var(--accent-1);\n}\n\n.navbar-plus-btn {\n  margin-bottom: 4px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 2.8rem;\n  color: var(--accent-1);\n}\n\n.navbar-plus-btn:hover {\n  color: var(--accent-1);\n}\n\n@media (min-width: 650px) {\n  .navbar-container {\n    width: 100%;\n    height: 100%;\n    place-self: auto;\n    grid-area: 2 / 1 / 3 / 2;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 0 20px 0;\n    background-color: var(--accent-5);\n    box-shadow: 1px 0 4px 0 rgba(0, 0, 0, 0.25);\n    border-radius: 0;\n  }\n\n  .navbar-btn {\n    width: 100%;\n    height: 65px;\n    justify-content: start;\n    align-items: center;\n    padding-left: 15px;\n    font-size: 1.1rem;\n    color: var(--accent-4);\n    font-family: 'Montserrat', sans-serif;\n    border-radius: 0;\n    border-right: 6px solid transparent;\n    transition: .65s;\n    position: relative;\n  }\n\n  .navbar-btn-grp-1::before {\n    width: 25px;\n    height: 25px;\n    content: attr(data-count);\n    position: absolute;\n    right: 20px;\n    top: 50%;\n    transform: translateY(-50%);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: 1px;\n    border-radius: 50%;\n    font-size: .85rem;\n    font-weight: bold;\n    color: var(--accent-3);\n    background-color: white;\n  }\n\n  .navbar-btn:hover,\n  .navbar-btn-selected  {\n    transform: none;\n    color: var(--accent-4);\n    background-color: var(--accent-6);\n  }\n\n  .navbar-btn-selected {\n    border-right: 6px solid var(--accent-1);\n  }\n\n  .navbar-plus-btn {\n    width: 80px;\n    justify-content: center;\n    margin-top: auto;\n    padding-left: 0px;\n    font-size: 2.95rem;\n    color: var(--accent-1);\n    border: none;\n  }\n\n  .navbar-plus-btn:hover {\n    transform: scale(1.3);\n    color: var(--accent-1);\n    background-color: transparent;\n  }\n}\n\n@media (min-width: 850px) {\n  .navbar-btn {\n    padding-left: 20px;\n    font-size: 1.15rem;\n  }\n\n  .navbar-btn-grp-1::before {\n    right: 24px;\n  }\n\n  .navbar-plus-btn {\n    font-size: 2.95rem;\n  }\n}\n\n\n"],sourceRoot:""}]);const A=i},735:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".project-container {\n  width: 100%;\n  gap: 18px;\n  background-color: var(--accent-2);\n  padding: 12px 10px;\n  margin-bottom: 7px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n}\n\n.project-container:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateY(-1px);\n}\n\n.project-container:last-child {\n  margin-bottom: 0;\n}\n\n.project-title {\n  width: 185px;\n  margin-right: auto;\n  font-size: 1rem;\n  overflow-wrap: anywhere;\n}\n\n.project-add-icon {\n  margin-left: 2px;\n}\n\n.project-add-icon,\n.project-edit-icon,\n.project-trash-icon {\n  width: var(--icon-width-1);\n  height: var(--icon-height-1);\n}\n\n.project-add-icon:hover,\n.project-edit-icon:hover,\n.project-trash-icon:hover {\n  transform: scale(1.1);\n}\n\n.project-container,\n.project-add-icon,\n.project-edit-icon,\n.project-trash-icon {\n  cursor: pointer;\n}\n\n@media (min-width: 380px) {\n  .project-title {\n    width: 215px;\n  }\n}\n\n@media (min-width: 450px) {\n  .project-title {\n    width: 250px;\n  }\n}\n\n@media (min-width: 500px) {\n  .project-title {\n    width: 285px;\n  }\n}\n\n@media (min-width: 650px) {\n  .project-title {\n    width: 275px;\n  }\n}\n\n@media (min-width: 750px) {\n  .project-title {\n    width: 325px;\n  }\n}\n\n@media (min-width: 850px) {\n  .project-title {\n    width: 370px;\n  }\n}\n\n","",{version:3,sources:["webpack://./src/components/project/project.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,SAAS;EACT,iCAAiC;EACjC,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,+BAA+B;AACjC;;AAEA;EACE,6CAA6C;EAC7C,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;;EAGE,0BAA0B;EAC1B,4BAA4B;AAC9B;;AAEA;;;EAGE,qBAAqB;AACvB;;AAEA;;;;EAIE,eAAe;AACjB;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF",sourcesContent:[".project-container {\n  width: 100%;\n  gap: 18px;\n  background-color: var(--accent-2);\n  padding: 12px 10px;\n  margin-bottom: 7px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n}\n\n.project-container:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateY(-1px);\n}\n\n.project-container:last-child {\n  margin-bottom: 0;\n}\n\n.project-title {\n  width: 185px;\n  margin-right: auto;\n  font-size: 1rem;\n  overflow-wrap: anywhere;\n}\n\n.project-add-icon {\n  margin-left: 2px;\n}\n\n.project-add-icon,\n.project-edit-icon,\n.project-trash-icon {\n  width: var(--icon-width-1);\n  height: var(--icon-height-1);\n}\n\n.project-add-icon:hover,\n.project-edit-icon:hover,\n.project-trash-icon:hover {\n  transform: scale(1.1);\n}\n\n.project-container,\n.project-add-icon,\n.project-edit-icon,\n.project-trash-icon {\n  cursor: pointer;\n}\n\n@media (min-width: 380px) {\n  .project-title {\n    width: 215px;\n  }\n}\n\n@media (min-width: 450px) {\n  .project-title {\n    width: 250px;\n  }\n}\n\n@media (min-width: 500px) {\n  .project-title {\n    width: 285px;\n  }\n}\n\n@media (min-width: 650px) {\n  .project-title {\n    width: 275px;\n  }\n}\n\n@media (min-width: 750px) {\n  .project-title {\n    width: 325px;\n  }\n}\n\n@media (min-width: 850px) {\n  .project-title {\n    width: 370px;\n  }\n}\n\n"],sourceRoot:""}]);const A=i},117:(n,e,t)=>{t.d(e,{Z:()=>p});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),A=t(667),s=t.n(A),c=new URL(t(530),t.b),d=i()(o()),l=s()(c);d.push([n.id,".project-selector-container {\n  height: min(425px, 95%);\n  width: 335px;\n  display: grid;\n  grid-template-rows: 65px 1fr 95px;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  overflow: scroll;\n  -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */\n  scrollbar-width: none;  /* Hide scrollbar for Firefox */\n}\n\n.project-selector-container::-webkit-scrollbar {\n  display: none;\n}\n\n.project-selector-title {\n  background-color: var(--accent-3);\n  border-radius: 8px 8px 0 0;\n  color: white;\n  font-size: 1.2rem;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.project-selector-projects-box {\n  width: 100%;\n  align-items: center;\n  padding: 15px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */\n  scrollbar-width: none;  /* Hide scrollbar for Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.project-selector-projects-box::-webkit-scrollbar {\n  display: none;\n}\n\n.project-selector-btns-container {\n  gap: 15px;\n  margin: 35px 0 25px 0;\n}\n\n.project-selector-cancel-btn, \n.project-selector-ok-btn {\n  width: 105px;\n  padding: 10px 20px;\n  margin-bottom: 10px; /* Specific */\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.project-selector-cancel-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.project-selector-ok-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.project-selector-cancel-btn:hover, \n.project-selector-ok-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.project-selector-cancel-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.project-selector-ok-btn:hover {\n  background-color: var(--accent-1);\n}\n\n.project-option {\n  width: 100%;\n  height: auto;\n  background-color: var(--accent-2);\n  padding: 13px 10px;\n  margin-bottom: 8px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n  position: relative;\n  cursor: pointer;\n}\n\n.project-option:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateY(-1px);\n}\n\n.project-option:last-child {\n  margin-bottom: 0;\n}\n\n.project-option-title {\n  width: 205px; \n  margin-right: auto;\n  overflow-wrap: anywhere;\n}\n\n.project-option-checkbox {\n  height: 20px;\n  width: 20px;\n  position: absolute;\n  top: 50%;\n  right: 15px;\n  transform: translateY(-50%);\n  background-color: white;\n  border: 2px solid var(--accent-1);\n  border-radius: 5px;\n}\n\n.selected .project-option-checkbox {\n  background-color: var(--accent-1);\n}\n\n.selected .project-option-checkbox::before {\n  height: 12px;\n  width: 12px;\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-image: url("+l+");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n@media (min-width: 950px) {\n  .project-selector-container {\n    height: min(500px, 95%);\n    width: 380px;\n  }\n\n  .project-selector-title {\n    font-size: 1.25rem;\n  }\n\n  .project-option-title {\n    width: 265px; \n  }\n}","",{version:3,sources:["webpack://./src/components/projectSelector/projectSelector.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,YAAY;EACZ,aAAa;EACb,iCAAiC;EACjC,eAAe;EACf,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,uBAAuB;EACvB,+BAA+B;EAC/B,kBAAkB;EAClB,6CAA6C;EAC7C,gBAAgB;EAChB,wBAAwB,GAAG,mCAAmC;EAC9D,qBAAqB,GAAG,+BAA+B;AACzD;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iCAAiC;EACjC,0BAA0B;EAC1B,YAAY;EACZ,iBAAiB;EACjB,qCAAqC;AACvC;;AAEA;EACE,WAAW;EACX,mBAAmB;EACnB,aAAa;EACb,gBAAgB;EAChB,wBAAwB,GAAG,mCAAmC;EAC9D,qBAAqB,GAAG,+BAA+B;AACzD;;AAEA,gDAAgD;AAChD;EACE,aAAa;AACf;;AAEA;EACE,SAAS;EACT,qBAAqB;AACvB;;AAEA;;EAEE,YAAY;EACZ,kBAAkB;EAClB,mBAAmB,EAAE,aAAa;EAClC,kBAAkB;EAClB,mBAAmB;EACnB,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,eAAe;EACf,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;EACZ,2BAA2B;EAC3B,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iCAAiC;EACjC,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,+BAA+B;EAC/B,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,6CAA6C;EAC7C,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,uBAAuB;AACzB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,WAAW;EACX,2BAA2B;EAC3B,uBAAuB;EACvB,iCAAiC;EACjC,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,yDAAoC;EACpC,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE;IACE,uBAAuB;IACvB,YAAY;EACd;;EAEA;IACE,kBAAkB;EACpB;;EAEA;IACE,YAAY;EACd;AACF",sourcesContent:[".project-selector-container {\n  height: min(425px, 95%);\n  width: 335px;\n  display: grid;\n  grid-template-rows: 65px 1fr 95px;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  overflow: scroll;\n  -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */\n  scrollbar-width: none;  /* Hide scrollbar for Firefox */\n}\n\n.project-selector-container::-webkit-scrollbar {\n  display: none;\n}\n\n.project-selector-title {\n  background-color: var(--accent-3);\n  border-radius: 8px 8px 0 0;\n  color: white;\n  font-size: 1.2rem;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.project-selector-projects-box {\n  width: 100%;\n  align-items: center;\n  padding: 15px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */\n  scrollbar-width: none;  /* Hide scrollbar for Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.project-selector-projects-box::-webkit-scrollbar {\n  display: none;\n}\n\n.project-selector-btns-container {\n  gap: 15px;\n  margin: 35px 0 25px 0;\n}\n\n.project-selector-cancel-btn, \n.project-selector-ok-btn {\n  width: 105px;\n  padding: 10px 20px;\n  margin-bottom: 10px; /* Specific */\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.project-selector-cancel-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.project-selector-ok-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.project-selector-cancel-btn:hover, \n.project-selector-ok-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.project-selector-cancel-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.project-selector-ok-btn:hover {\n  background-color: var(--accent-1);\n}\n\n.project-option {\n  width: 100%;\n  height: auto;\n  background-color: var(--accent-2);\n  padding: 13px 10px;\n  margin-bottom: 8px;\n  transition: .25s;\n  font-family: 'Lato', sans-serif;\n  position: relative;\n  cursor: pointer;\n}\n\n.project-option:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateY(-1px);\n}\n\n.project-option:last-child {\n  margin-bottom: 0;\n}\n\n.project-option-title {\n  width: 205px; \n  margin-right: auto;\n  overflow-wrap: anywhere;\n}\n\n.project-option-checkbox {\n  height: 20px;\n  width: 20px;\n  position: absolute;\n  top: 50%;\n  right: 15px;\n  transform: translateY(-50%);\n  background-color: white;\n  border: 2px solid var(--accent-1);\n  border-radius: 5px;\n}\n\n.selected .project-option-checkbox {\n  background-color: var(--accent-1);\n}\n\n.selected .project-option-checkbox::before {\n  height: 12px;\n  width: 12px;\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-image: url(\"./check.png\");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n@media (min-width: 950px) {\n  .project-selector-container {\n    height: min(500px, 95%);\n    width: 380px;\n  }\n\n  .project-selector-title {\n    font-size: 1.25rem;\n  }\n\n  .project-option-title {\n    width: 265px; \n  }\n}"],sourceRoot:""}]);const p=d},497:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".details-container {\n  width: 315px;\n  height: min(505px, 95%);\n  display: grid;\n  grid-template-rows: 40px 1fr;\n  gap: 20px;\n  padding: 10px 15px;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  background-color: white;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  overflow: scroll;\n  -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */\n  scrollbar-width: none;  /* Hide scrollbar for Firefox */\n}\n\n.details-container::-webkit-scrollbar {\n  display: none;\n}\n\n.details-top-container {\n  justify-content: space-between;\n  align-items: center;\n}\n\n.details-bottom-container {\n  display: grid;\n  gap: 20px;\n  grid-template-rows: 90px 230px 60px;\n  justify-items: center;\n  align-items: center;\n  padding: 0 10px;\n}\n\n.details-priority {\n  border-radius: 4px;\n  padding: 1px 10px 3px 10px;\n  color: white;\n  font-weight: bold;\n}\n\n.details-priority-l {\n  border: 1px solid var(--low-prio);\n  background-color: var(--low-prio);\n}\n\n.details-priority-m {\n  border: 1px solid var(--medium-prio);\n  background-color: var(--medium-prio);\n}\n\n.details-priority-h {\n  border: 1px solid var(--high-prio);\n  background-color: var(--high-prio);\n}\n\n.details-title,\n.details-notes {\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  overflow-wrap: anywhere;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.details-title::-webkit-scrollbar,\n.details-notes::-webkit-scrollbar {\n  display: none;\n}\n\n.details-title {\n  text-align: center;\n  font-size: 1.1rem;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.details-notes {\n  text-align: left;\n}\n\n.details-close-btn {\n  padding: 10px 20px;\n  border: 1px solid var(--accent-1);\n  border-radius: 5px;\n  color: var(--accent-1);\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n}\n\n.details-close-btn:hover {\n  color: white;\n  background-color: var(--accent-1);\n  transform: translateY(-5px);\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./src/components/todoDetails/todoDetails.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,uBAAuB;EACvB,aAAa;EACb,4BAA4B;EAC5B,SAAS;EACT,kBAAkB;EAClB,+BAA+B;EAC/B,kBAAkB;EAClB,uBAAuB;EACvB,6CAA6C;EAC7C,eAAe;EACf,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,gBAAgB;EAChB,wBAAwB,GAAG,mCAAmC;EAC9D,qBAAqB,GAAG,+BAA+B;AACzD;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,mCAAmC;EACnC,qBAAqB;EACrB,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,0BAA0B;EAC1B,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;EACjC,iCAAiC;AACnC;;AAEA;EACE,oCAAoC;EACpC,oCAAoC;AACtC;;AAEA;EACE,kCAAkC;EAClC,kCAAkC;AACpC;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,uBAAuB;EACvB,gBAAgB;EAChB,wBAAwB,GAAG,gBAAgB;EAC3C,qBAAqB,GAAG,YAAY;AACtC;;AAEA,gDAAgD;AAChD;;EAEE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,qCAAqC;AACvC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,iCAAiC;EACjC,kBAAkB;EAClB,sBAAsB;EACtB,mBAAmB;EACnB,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,iCAAiC;EACjC,2BAA2B;EAC3B,iBAAiB;AACnB",sourcesContent:[".details-container {\n  width: 315px;\n  height: min(505px, 95%);\n  display: grid;\n  grid-template-rows: 40px 1fr;\n  gap: 20px;\n  padding: 10px 15px;\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  background-color: white;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  overflow: scroll;\n  -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */\n  scrollbar-width: none;  /* Hide scrollbar for Firefox */\n}\n\n.details-container::-webkit-scrollbar {\n  display: none;\n}\n\n.details-top-container {\n  justify-content: space-between;\n  align-items: center;\n}\n\n.details-bottom-container {\n  display: grid;\n  gap: 20px;\n  grid-template-rows: 90px 230px 60px;\n  justify-items: center;\n  align-items: center;\n  padding: 0 10px;\n}\n\n.details-priority {\n  border-radius: 4px;\n  padding: 1px 10px 3px 10px;\n  color: white;\n  font-weight: bold;\n}\n\n.details-priority-l {\n  border: 1px solid var(--low-prio);\n  background-color: var(--low-prio);\n}\n\n.details-priority-m {\n  border: 1px solid var(--medium-prio);\n  background-color: var(--medium-prio);\n}\n\n.details-priority-h {\n  border: 1px solid var(--high-prio);\n  background-color: var(--high-prio);\n}\n\n.details-title,\n.details-notes {\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  overflow-wrap: anywhere;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.details-title::-webkit-scrollbar,\n.details-notes::-webkit-scrollbar {\n  display: none;\n}\n\n.details-title {\n  text-align: center;\n  font-size: 1.1rem;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.details-notes {\n  text-align: left;\n}\n\n.details-close-btn {\n  padding: 10px 20px;\n  border: 1px solid var(--accent-1);\n  border-radius: 5px;\n  color: var(--accent-1);\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n}\n\n.details-close-btn:hover {\n  color: white;\n  background-color: var(--accent-1);\n  transform: translateY(-5px);\n  font-weight: bold;\n}"],sourceRoot:""}]);const A=i},304:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".box {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.form-container {\n  width: 325px;\n  height: min(585px, 95%);\n  display: grid;\n  grid-template-rows: 65px 1fr;\n  gap: 5px;\n  background-color: white;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.form-container::-webkit-scrollbar {\n  display: none;\n}\n\n.project-fields-height {\n  height: min(245px, 95%);\n}\n\n.form-top-container {\n  grid-row: 1 / 2;\n  background-color: var(--accent-3);\n  border-radius: 8px 8px 0 0;\n}\n\n.form-todo-btn,\n.form-project-btn {\n  width: clamp(50%, 100%, 100%);\n  height: 100%;\n  color: white;\n  background-color: transparent;\n  border: none;\n  border-bottom: 4px solid white;\n  outline: none;\n  font-size: 1.2rem;\n  transition: .5s;\n  cursor: pointer;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.form-fields-container {\n  grid-row: 2 / 3;\n}\n\n.form-middle-container {\n  align-items: center;\n  justify-content: start;\n  padding: 0px 15px;\n}\n\n.form-title-input,\n.form-notes-input {\n  width: 100%;\n  border: none;\n  border-bottom: 4px solid rgba(0, 0, 0, 0.05);\n  outline: none;\n  resize: none;\n  padding: 15px 10px 10px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.form-title-input::-webkit-scrollbar,\n.form-notes-input::-webkit-scrollbar {\n  display: none;\n}\n\n.form-title-input {\n  height: 75px;\n}\n\n.form-notes-input {\n  height: 165px;\n}\n\n.form-due-date-container,\n.form-priority-container {\n  gap: 13px;\n  margin-top: 24px;\n}\n\n.form-due-date-label {\n  font-size: 1.05rem;\n}\n\n.form-due-date-input {\n  border-radius: 5px;\n  border: 2px solid rgba(26, 167, 125, 0.5);\n  outline: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  color: black;\n}\n\n.form-priority-title {\n  font-size: 1.15rem;\n}\n\n.form-priority-options-container {\n  gap: 4px;\n}\n\n.form-priority-label {\n  border-radius: 4px;\n  padding: 1px 7px 3px 7px;\n  text-align: center;\n  transition: .25s;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.l-prio-label {\n  border: 1px solid var(--low-prio);\n  color: var(--low-prio);\n}\n\n.m-prio-label {\n  border: 1px solid var(--medium-prio);\n  color: var(--medium-prio);\n}\n\n.h-prio-label {\n  border: 1px solid var(--high-prio);\n  color: var(--high-prio);\n  margin-right: 18px;\n}\n\n.form-priority-radio:checked + .l-prio-label {\n  border: 1px solid var(--low-prio);\n  background-color: var(--low-prio);\n}\n\n.form-priority-radio:checked + .m-prio-label {\n  border: 1px solid var(--medium-prio);\n  background-color: var(--medium-prio);\n}\n\n.form-priority-radio:checked + .h-prio-label {\n  border: 1px solid var(--high-prio);\n  background-color: var(--high-prio);\n}\n\n.form-priority-radio:checked + .form-priority-label {\n  transform: scale(1.1);\n  color: white;\n}\n\n.form-bottom-container {\n  gap: 15px;\n  margin: 35px 0 25px 0;\n}\n\n.form-ok-btn,\n.form-cancel-btn {\n  width: 105px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.form-ok-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.form-cancel-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.form-ok-btn:hover,\n.form-cancel-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.form-ok-btn:hover {\n  background-color: var(--accent-1);\n}\n\n.form-cancel-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.border-btm-b {\n  border-bottom: 4px solid rgba(0, 0, 0, 0.75);\n}\n\n.border-btm-w {\n  border-bottom: 4px solid white;\n}\n\n.no-pointer-events {\n  pointer-events: none;\n}","",{version:3,sources:["webpack://./src/components/todoForm/todoForm.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,MAAM;EACN,SAAS;EACT,OAAO;EACP,QAAQ;AACV;;AAEA;EACE,YAAY;EACZ,uBAAuB;EACvB,aAAa;EACb,4BAA4B;EAC5B,QAAQ;EACR,uBAAuB;EACvB,6CAA6C;EAC7C,+BAA+B;EAC/B,kBAAkB;EAClB,gBAAgB;EAChB,wBAAwB,GAAG,gBAAgB;EAC3C,qBAAqB,GAAG,YAAY;AACtC;;AAEA,gDAAgD;AAChD;EACE,aAAa;AACf;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,iCAAiC;EACjC,0BAA0B;AAC5B;;AAEA;;EAEE,6BAA6B;EAC7B,YAAY;EACZ,YAAY;EACZ,6BAA6B;EAC7B,YAAY;EACZ,8BAA8B;EAC9B,aAAa;EACb,iBAAiB;EACjB,eAAe;EACf,eAAe;EACf,qCAAqC;AACvC;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,mBAAmB;EACnB,sBAAsB;EACtB,iBAAiB;AACnB;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,4CAA4C;EAC5C,aAAa;EACb,YAAY;EACZ,uBAAuB;EACvB,gBAAgB;EAChB,wBAAwB,GAAG,gBAAgB;EAC3C,qBAAqB,GAAG,YAAY;AACtC;;AAEA,gDAAgD;AAChD;;EAEE,aAAa;AACf;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;;EAEE,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,yCAAyC;EACzC,aAAa;EACb,iBAAiB;EACjB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,QAAQ;AACV;;AAEA;EACE,kBAAkB;EAClB,wBAAwB;EACxB,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,oCAAoC;EACpC,yBAAyB;AAC3B;;AAEA;EACE,kCAAkC;EAClC,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;EACjC,iCAAiC;AACnC;;AAEA;EACE,oCAAoC;EACpC,oCAAoC;AACtC;;AAEA;EACE,kCAAkC;EAClC,kCAAkC;AACpC;;AAEA;EACE,qBAAqB;EACrB,YAAY;AACd;;AAEA;EACE,SAAS;EACT,qBAAqB;AACvB;;AAEA;;EAEE,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,mBAAmB;EACnB,qCAAqC;EACrC,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,eAAe;EACf,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;EACjC,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;EACZ,2BAA2B;EAC3B,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,4CAA4C;AAC9C;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,oBAAoB;AACtB",sourcesContent:[".box {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.form-container {\n  width: 325px;\n  height: min(585px, 95%);\n  display: grid;\n  grid-template-rows: 65px 1fr;\n  gap: 5px;\n  background-color: white;\n  box-shadow: 3px 3px 4px 0 rgba(0, 0, 0, 0.25);\n  font-family: 'Lato', sans-serif;\n  border-radius: 8px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.form-container::-webkit-scrollbar {\n  display: none;\n}\n\n.project-fields-height {\n  height: min(245px, 95%);\n}\n\n.form-top-container {\n  grid-row: 1 / 2;\n  background-color: var(--accent-3);\n  border-radius: 8px 8px 0 0;\n}\n\n.form-todo-btn,\n.form-project-btn {\n  width: clamp(50%, 100%, 100%);\n  height: 100%;\n  color: white;\n  background-color: transparent;\n  border: none;\n  border-bottom: 4px solid white;\n  outline: none;\n  font-size: 1.2rem;\n  transition: .5s;\n  cursor: pointer;\n  font-family: 'Montserrat', sans-serif;\n}\n\n.form-fields-container {\n  grid-row: 2 / 3;\n}\n\n.form-middle-container {\n  align-items: center;\n  justify-content: start;\n  padding: 0px 15px;\n}\n\n.form-title-input,\n.form-notes-input {\n  width: 100%;\n  border: none;\n  border-bottom: 4px solid rgba(0, 0, 0, 0.05);\n  outline: none;\n  resize: none;\n  padding: 15px 10px 10px;\n  overflow: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.form-title-input::-webkit-scrollbar,\n.form-notes-input::-webkit-scrollbar {\n  display: none;\n}\n\n.form-title-input {\n  height: 75px;\n}\n\n.form-notes-input {\n  height: 165px;\n}\n\n.form-due-date-container,\n.form-priority-container {\n  gap: 13px;\n  margin-top: 24px;\n}\n\n.form-due-date-label {\n  font-size: 1.05rem;\n}\n\n.form-due-date-input {\n  border-radius: 5px;\n  border: 2px solid rgba(26, 167, 125, 0.5);\n  outline: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  color: black;\n}\n\n.form-priority-title {\n  font-size: 1.15rem;\n}\n\n.form-priority-options-container {\n  gap: 4px;\n}\n\n.form-priority-label {\n  border-radius: 4px;\n  padding: 1px 7px 3px 7px;\n  text-align: center;\n  transition: .25s;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.l-prio-label {\n  border: 1px solid var(--low-prio);\n  color: var(--low-prio);\n}\n\n.m-prio-label {\n  border: 1px solid var(--medium-prio);\n  color: var(--medium-prio);\n}\n\n.h-prio-label {\n  border: 1px solid var(--high-prio);\n  color: var(--high-prio);\n  margin-right: 18px;\n}\n\n.form-priority-radio:checked + .l-prio-label {\n  border: 1px solid var(--low-prio);\n  background-color: var(--low-prio);\n}\n\n.form-priority-radio:checked + .m-prio-label {\n  border: 1px solid var(--medium-prio);\n  background-color: var(--medium-prio);\n}\n\n.form-priority-radio:checked + .h-prio-label {\n  border: 1px solid var(--high-prio);\n  background-color: var(--high-prio);\n}\n\n.form-priority-radio:checked + .form-priority-label {\n  transform: scale(1.1);\n  color: white;\n}\n\n.form-bottom-container {\n  gap: 15px;\n  margin: 35px 0 25px 0;\n}\n\n.form-ok-btn,\n.form-cancel-btn {\n  width: 105px;\n  padding: 10px 20px;\n  border-radius: 5px;\n  letter-spacing: 1px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: .85rem;\n  font-weight: 400;\n  cursor: pointer;\n  transition: .5s;\n  background-color: white;\n  cursor: pointer;\n}\n\n.form-ok-btn {\n  border: 1px solid var(--accent-1);\n  color: var(--accent-1);\n}\n\n.form-cancel-btn {\n  border: 1px solid var(--accent-3);\n  color: var(--accent-3);\n}\n\n.form-ok-btn:hover,\n.form-cancel-btn:hover {\n  color: white;\n  transform: translateY(-5px);\n  font-weight: bold;\n}\n\n.form-ok-btn:hover {\n  background-color: var(--accent-1);\n}\n\n.form-cancel-btn:hover {\n  background-color: var(--accent-3);\n}\n\n.border-btm-b {\n  border-bottom: 4px solid rgba(0, 0, 0, 0.75);\n}\n\n.border-btm-w {\n  border-bottom: 4px solid white;\n}\n\n.no-pointer-events {\n  pointer-events: none;\n}"],sourceRoot:""}]);const A=i},272:(n,e,t)=>{t.d(e,{Z:()=>p});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),A=t(667),s=t.n(A),c=new URL(t(241),t.b),d=i()(o()),l=s()(c);d.push([n.id,'.item-container {\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n  background-color: var(--accent-2);\n  padding: 14px 10px;\n  margin-bottom: 8px;\n  transition: .25s;\n  font-family: \'Lato\', sans-serif;\n  position: relative;\n}\n\n.item-container:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateY(-1px);\n}\n\n.item-container:last-child {\n  margin-bottom: 0;\n}\n\n.item-container:has(.item-checkbox.checked)::before {\n  width: calc(100% - 34px - 34px);\n  height: 100%;\n  content: "";\n  position: absolute;\n  left: 34px;\n  right: 34px;\n  background-color: rgba(240, 240, 240, 0.8);\n  filter: blur(1px);\n}\n\n.item-left-container {\n  gap: 12px;\n}\n\n.item-right-container {\n  gap: 14px;\n}\n\n.item-checkbox {\n  width: 19px;\n  height: 19px;\n  position:relative;\n  border: 2px solid var(--accent-1);\n  border-radius: 5px;\n  background-color: white;\n  font-size: 1.2rem;\n}\n\n.checked {\n  background-color: var(--accent-1);\n}\n\n.checked.item-checkbox::before {\n  width: 11px;\n  height: 11px;\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-image: url('+l+");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n.no-pointer-events {\n  pointer-events: none;\n  cursor: auto;\n}\n\n.item-container.no-pointer-events .item-checkbox,\n.item-container.no-pointer-events .item-trash-icon {\n  pointer-events: all;\n  cursor: pointer;\n}\n\n.item-title {\n  width: 100px;\n  font-size: 1rem;\n  overflow-wrap: anywhere;\n}\n\n.item-due-date {\n  font-size: .9rem;\n}\n\n.item-edit-icon {\n  margin-left: 2px;\n}\n\n.item-edit-icon,\n.item-move-icon,\n.item-trash-icon  {\n  width: var(--icon-width-1);\n  height: var(--icon-height-1);\n  transition: .35s;\n}\n\n.item-edit-icon:hover,\n.item-move-icon:hover,\n.item-trash-icon:hover {\n  transform: scale(1.1);\n}\n\n.item-container,\n.item-checkbox,\n.item-edit-icon,\n.item-move-icon,\n.item-trash-icon {\n  cursor: pointer;\n}\n\n@media (min-width: 380px) {\n  .item-title {\n    width: 125px;\n  }\n}\n\n@media (min-width: 400px) {\n  .item-title {\n    width: 145px;\n  }\n}\n\n@media (min-width: 450px) {\n  .item-title {\n    width: 185px;\n  }\n}\n\n@media (min-width: 500px) {\n  .item-title {\n    width: 240px;\n  }\n}\n\n@media (min-width: 650px) {\n  .item-title {\n    width: 175px;\n  }\n  \n  .item-right-container {\n    gap: 18px;\n  }\n}\n\n@media (min-width: 750px) {\n  .item-title {\n    width: 270px;\n  }\n}\n\n@media (min-width: 850px) {\n  .item-title {\n    width: 330px;\n  }\n}\n\n","",{version:3,sources:["webpack://./src/components/todoItem/todoItem.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,8BAA8B;EAC9B,mBAAmB;EACnB,SAAS;EACT,iCAAiC;EACjC,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,+BAA+B;EAC/B,kBAAkB;AACpB;;AAEA;EACE,6CAA6C;EAC7C,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,+BAA+B;EAC/B,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,0CAA0C;EAC1C,iBAAiB;AACnB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,iCAAiC;EACjC,kBAAkB;EAClB,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,yDAAoC;EACpC,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,oBAAoB;EACpB,YAAY;AACd;;AAEA;;EAEE,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;;EAGE,0BAA0B;EAC1B,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;;;EAGE,qBAAqB;AACvB;;AAEA;;;;;EAKE,eAAe;AACjB;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;;EAEA;IACE,SAAS;EACX;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,YAAY;EACd;AACF",sourcesContent:['.item-container {\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n  background-color: var(--accent-2);\n  padding: 14px 10px;\n  margin-bottom: 8px;\n  transition: .25s;\n  font-family: \'Lato\', sans-serif;\n  position: relative;\n}\n\n.item-container:hover {\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25);\n  transform: translateY(-1px);\n}\n\n.item-container:last-child {\n  margin-bottom: 0;\n}\n\n.item-container:has(.item-checkbox.checked)::before {\n  width: calc(100% - 34px - 34px);\n  height: 100%;\n  content: "";\n  position: absolute;\n  left: 34px;\n  right: 34px;\n  background-color: rgba(240, 240, 240, 0.8);\n  filter: blur(1px);\n}\n\n.item-left-container {\n  gap: 12px;\n}\n\n.item-right-container {\n  gap: 14px;\n}\n\n.item-checkbox {\n  width: 19px;\n  height: 19px;\n  position:relative;\n  border: 2px solid var(--accent-1);\n  border-radius: 5px;\n  background-color: white;\n  font-size: 1.2rem;\n}\n\n.checked {\n  background-color: var(--accent-1);\n}\n\n.checked.item-checkbox::before {\n  width: 11px;\n  height: 11px;\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-image: url("./check.png");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n.no-pointer-events {\n  pointer-events: none;\n  cursor: auto;\n}\n\n.item-container.no-pointer-events .item-checkbox,\n.item-container.no-pointer-events .item-trash-icon {\n  pointer-events: all;\n  cursor: pointer;\n}\n\n.item-title {\n  width: 100px;\n  font-size: 1rem;\n  overflow-wrap: anywhere;\n}\n\n.item-due-date {\n  font-size: .9rem;\n}\n\n.item-edit-icon {\n  margin-left: 2px;\n}\n\n.item-edit-icon,\n.item-move-icon,\n.item-trash-icon  {\n  width: var(--icon-width-1);\n  height: var(--icon-height-1);\n  transition: .35s;\n}\n\n.item-edit-icon:hover,\n.item-move-icon:hover,\n.item-trash-icon:hover {\n  transform: scale(1.1);\n}\n\n.item-container,\n.item-checkbox,\n.item-edit-icon,\n.item-move-icon,\n.item-trash-icon {\n  cursor: pointer;\n}\n\n@media (min-width: 380px) {\n  .item-title {\n    width: 125px;\n  }\n}\n\n@media (min-width: 400px) {\n  .item-title {\n    width: 145px;\n  }\n}\n\n@media (min-width: 450px) {\n  .item-title {\n    width: 185px;\n  }\n}\n\n@media (min-width: 500px) {\n  .item-title {\n    width: 240px;\n  }\n}\n\n@media (min-width: 650px) {\n  .item-title {\n    width: 175px;\n  }\n  \n  .item-right-container {\n    gap: 18px;\n  }\n}\n\n@media (min-width: 750px) {\n  .item-title {\n    width: 270px;\n  }\n}\n\n@media (min-width: 850px) {\n  .item-title {\n    width: 330px;\n  }\n}\n\n'],sourceRoot:""}]);const p=d},618:(n,e,t)=>{t.d(e,{Z:()=>p});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),A=t(667),s=t.n(A),c=new URL(t(891),t.b),d=i()(o());d.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Alatsi&family=JetBrains+Mono:wght@200&family=Lato:wght@100;300&family=Lobster&family=Montserrat+Alternates:wght@300;400&family=Montserrat:wght@200;300;400&family=PT+Mono&family=Press+Start+2P&display=swap);"]);var l=s()(c);d.push([n.id,":root {\n  --accent-1: rgb(26, 167, 125);\n  --accent-2: rgb(240, 240, 240);\n  --accent-3: #cc7e97;\n  --accent-4: rgb(35, 35, 35);\n  --accent-5: rgba(220, 220, 220, 0.5);\n  --accent-6: rgba(205, 205, 205, 0.65);\n  --accent-7: rgb(255, 62, 101);\n  --low-prio: rgb(40, 207, 40);\n  --medium-prio: rgb(255, 187, 60);\n  --high-prio: rgb(255, 70, 70);\n  --icon-width-1: 20px;\n  --icon-height-1: 20px;\n}\n\n.app-container {\n  height: 100vh;\n  background-image: url("+l+");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n","",{version:3,sources:["webpack://./src/container/app.css"],names:[],mappings:"AAEA;EACE,6BAA6B;EAC7B,8BAA8B;EAC9B,mBAAmB;EACnB,2BAA2B;EAC3B,oCAAoC;EACpC,qCAAqC;EACrC,6BAA6B;EAC7B,4BAA4B;EAC5B,gCAAgC;EAChC,6BAA6B;EAC7B,oBAAoB;EACpB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,yDAA2C;EAC3C,sBAAsB;EACtB,4BAA4B;EAC5B,2BAA2B;AAC7B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Alatsi&family=JetBrains+Mono:wght@200&family=Lato:wght@100;300&family=Lobster&family=Montserrat+Alternates:wght@300;400&family=Montserrat:wght@200;300;400&family=PT+Mono&family=Press+Start+2P&display=swap');\n\n:root {\n  --accent-1: rgb(26, 167, 125);\n  --accent-2: rgb(240, 240, 240);\n  --accent-3: #cc7e97;\n  --accent-4: rgb(35, 35, 35);\n  --accent-5: rgba(220, 220, 220, 0.5);\n  --accent-6: rgba(205, 205, 205, 0.65);\n  --accent-7: rgb(255, 62, 101);\n  --low-prio: rgb(40, 207, 40);\n  --medium-prio: rgb(255, 187, 60);\n  --high-prio: rgb(255, 70, 70);\n  --icon-width-1: 20px;\n  --icon-height-1: 20px;\n}\n\n.app-container {\n  height: 100vh;\n  background-image: url(\"./bg-wallpaper.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n"],sourceRoot:""}]);const p=d},424:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Utilities */\n.flex {\n  display: flex;\n}\n\n.flex-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.center {\n  justify-content: center;\n  align-items: center;\n}\n\n.hidden {\n  opacity: 0;\n}\n\n.disabled {\n  filter: blur(1px) grayscale(50%) brightness(50%);\n  pointer-events: none;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;EAGE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA,cAAc;AACd;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,gDAAgD;EAChD,oBAAoB;AACtB",sourcesContent:["*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Utilities */\n.flex {\n  display: flex;\n}\n\n.flex-column {\n  display: flex;\n  flex-direction: column;\n}\n\n.center {\n  justify-content: center;\n  align-items: center;\n}\n\n.hidden {\n  opacity: 0;\n}\n\n.disabled {\n  filter: blur(1px) grayscale(50%) brightness(50%);\n  pointer-events: none;\n}\n"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],A=0;A<n.length;A++){var s=n[A],c=r.base?s[0]+r.base:s[0],d=a[c]||0,l="".concat(c," ").concat(d);a[c]=d+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=o(u,r);r.byIndex=A,e.splice(A,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=t(a[i]);e[A].references--}for(var s=r(n,o),c=0;c<a.length;c++){var d=t(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},530:(n,e,t)=>{n.exports=t.p+"a568f6f1b577d3fd06b6.png"},241:(n,e,t)=>{n.exports=t.p+"a568f6f1b577d3fd06b6.png"},891:(n,e,t)=>{n.exports=t.p+"cbb11493c646967b47db.jpg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),A=t(565),s=t.n(A),c=t(216),d=t.n(c),l=t(589),p=t.n(l),u=t(618),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;var f=t(402),C={};C.styleTagTransform=p(),C.setAttributes=s(),C.insert=i().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=d(),e()(f.Z,C),f.Z&&f.Z.locals&&f.Z.locals;var g=t(851),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),e()(g.Z,h),g.Z&&g.Z.locals&&g.Z.locals;var E=t(304),b={};function B(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function v(n){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},v(n)}function x(n){B(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===v(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}b.styleTagTransform=p(),b.setAttributes=s(),b.insert=i().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=d(),e()(E.Z,b),E.Z&&E.Z.locals&&E.Z.locals;var y={};function k(){return y}function j(n,e){var t,r,o,a,i,A,s,c;B(1,arguments);var d=k(),l=w(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(A=i.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=x(n),u=p.getDay(),m=(u<l?7:0)+u-l;return p.setDate(p.getDate()-m),p.setHours(0,0,0,0),p}function T(n,e,t){B(2,arguments);var r=j(n,t),o=j(e,t);return r.getTime()===o.getTime()}function L(n,e){return B(1,arguments),T(n,Date.now(),e)}const S=(n,e)=>{for(const t in e)n[t]=e[t]},Y=n=>{return`${n}-${e=1,t=1e6,e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1)+e)}`;var e,t},D=()=>{const n=new Date,e=String(n.getFullYear()),t=String(n.getMonth()+1),r=String(n.getDate());return`${e}-${t.padStart(2,"0")}-${r.padStart(2,"0")}`},I=n=>n.map((n=>({id:n.getId(),checked:n.getChecked(),title:n.getTitle(),notes:n.getNotes(),dueDate:n.getDueDate(),priority:n.getPriority()}))),M=n=>{localStorage.todosData=JSON.stringify(I(n.getTodosArr())),localStorage.projectsData=JSON.stringify((n=>{const e=n.map((n=>({id:n.getId(),todosData:I(n.getTodosArr()),title:n.getTitle()})));return e})(n.getProjectsArr()))},P=n=>{const e=D();return n.filter((n=>n.getDueDate()===e))},z=n=>n.filter((n=>{const e=`${n.getDueDate()}T00:00:00`;return L(new Date(e),{weekStartsOn:1})})),q=()=>document.querySelector(".app-container"),W=()=>document.querySelector(".content-box-container"),Z=n=>{document.querySelector("#root").append(n)};var U=t(272),F={};function O(n){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},O(n)}function N(n){return B(1,arguments),n instanceof Date||"object"===O(n)&&"[object Date]"===Object.prototype.toString.call(n)}function G(n){if(B(1,arguments),!N(n)&&"number"!=typeof n)return!1;var e=x(n);return!isNaN(Number(e))}function H(n,e){B(2,arguments);var t=x(n).getTime(),r=w(e);return new Date(t+r)}function R(n,e){B(2,arguments);var t=w(e);return H(n,-t)}F.styleTagTransform=p(),F.setAttributes=s(),F.insert=i().bind(null,"head"),F.domAPI=o(),F.insertStyleElement=d(),e()(U.Z,F),U.Z&&U.Z.locals&&U.Z.locals;var X=864e5;function Q(n){B(1,arguments);var e=1,t=x(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function V(n){B(1,arguments);var e=x(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=Q(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=Q(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function J(n){B(1,arguments);var e=V(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=Q(t);return r}var $=6048e5;function _(n,e){var t,r,o,a,i,A,s,c;B(1,arguments);var d=k(),l=w(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(A=i.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=x(n),u=p.getUTCDay(),m=(u<l?7:0)+u-l;return p.setUTCDate(p.getUTCDate()-m),p.setUTCHours(0,0,0,0),p}function K(n,e){var t,r,o,a,i,A,s,c;B(1,arguments);var d=x(n),l=d.getUTCFullYear(),p=k(),u=w(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(A=i.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==o?o:p.firstWeekContainsDate)&&void 0!==r?r:null===(s=p.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(l+1,0,u),m.setUTCHours(0,0,0,0);var f=_(m,e),C=new Date(0);C.setUTCFullYear(l,0,u),C.setUTCHours(0,0,0,0);var g=_(C,e);return d.getTime()>=f.getTime()?l+1:d.getTime()>=g.getTime()?l:l-1}function nn(n,e){var t,r,o,a,i,A,s,c;B(1,arguments);var d=k(),l=w(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(A=i.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),p=K(n,e),u=new Date(0);u.setUTCFullYear(p,0,l),u.setUTCHours(0,0,0,0);var m=_(u,e);return m}var en=6048e5;function tn(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const rn=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return tn("yy"===e?r%100:r,e.length)},on=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):tn(t+1,2)},an=function(n,e){return tn(n.getUTCDate(),e.length)},An=function(n,e){return tn(n.getUTCHours()%12||12,e.length)},sn=function(n,e){return tn(n.getUTCHours(),e.length)},cn=function(n,e){return tn(n.getUTCMinutes(),e.length)},dn=function(n,e){return tn(n.getUTCSeconds(),e.length)},ln=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return tn(Math.floor(r*Math.pow(10,t-3)),e.length)};var pn={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return rn(n,e)},Y:function(n,e,t,r){var o=K(n,r),a=o>0?o:1-o;return"YY"===e?tn(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):tn(a,e.length)},R:function(n,e){return tn(V(n),e.length)},u:function(n,e){return tn(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return tn(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return tn(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return on(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return tn(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){B(1,arguments);var t=x(n),r=_(t,e).getTime()-nn(t,e).getTime();return Math.round(r/en)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):tn(o,e.length)},I:function(n,e,t){var r=function(n){B(1,arguments);var e=x(n),t=Q(e).getTime()-J(e).getTime();return Math.round(t/$)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):tn(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):an(n,e)},D:function(n,e,t){var r=function(n){B(1,arguments);var e=x(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/X)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):tn(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return tn(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return tn(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return tn(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return An(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):sn(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):tn(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):tn(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):cn(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):dn(n,e)},S:function(n,e){return ln(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return mn(o);case"XXXX":case"XX":return fn(o);default:return fn(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return mn(o);case"xxxx":case"xx":return fn(o);default:return fn(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+un(o,":");default:return"GMT"+fn(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+un(o,":");default:return"GMT"+fn(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return tn(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return tn((r._originalDate||n).getTime(),e.length)}};function un(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=e||"";return t+String(o)+i+tn(a,2)}function mn(n,e){return n%60==0?(n>0?"-":"+")+tn(Math.abs(n)/60,2):fn(n,e)}function fn(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+tn(Math.floor(o/60),2)+t+tn(o%60,2)}const Cn=pn;var gn=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},hn=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const En={p:hn,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return gn(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",gn(o,e)).replace("{{time}}",hn(a,e))}};function bn(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var Bn=["D","DD"],vn=["YY","YYYY"];function xn(n){return-1!==Bn.indexOf(n)}function wn(n){return-1!==vn.indexOf(n)}function yn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var kn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function jn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const Tn={date:jn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:jn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:jn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Ln={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Sn(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,A=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[A]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const Yn={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Sn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Sn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:Sn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Sn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Sn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Dn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,A=a[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?Mn(s,(function(n){return n.test(A)})):In(s,(function(n){return n.test(A)}));i=n.valueCallback?n.valueCallback(c):c,i=t.valueCallback?t.valueCallback(i):i;var d=e.slice(A.length);return{value:i,rest:d}}}function In(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function Mn(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var Pn,zn={ordinalNumber:(Pn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(Pn.matchPattern);if(!t)return null;var r=t[0],o=n.match(Pn.parsePattern);if(!o)return null;var a=Pn.valueCallback?Pn.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=n.slice(r.length);return{value:a,rest:i}}),era:Dn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Dn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Dn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Dn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Dn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const qn={code:"en-US",formatDistance:function(n,e,t){var r,o=kn[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:Tn,formatRelative:function(n,e,t,r){return Ln[n]},localize:Yn,match:zn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Wn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Zn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Un=/^'([^]*?)'?$/,Fn=/''/g,On=/[a-zA-Z]/;function Nn(n){var e=n.match(Un);return e?e[1].replace(Fn,"'"):n}var Gn=t(497),Hn={};Hn.styleTagTransform=p(),Hn.setAttributes=s(),Hn.insert=i().bind(null,"head"),Hn.domAPI=o(),Hn.insertStyleElement=d(),e()(Gn.Z,Hn),Gn.Z&&Gn.Z.locals&&Gn.Z.locals;var Rn=t(52),Xn={};Xn.styleTagTransform=p(),Xn.setAttributes=s(),Xn.insert=i().bind(null,"head"),Xn.domAPI=o(),Xn.insertStyleElement=d(),e()(Rn.Z,Xn),Rn.Z&&Rn.Z.locals&&Rn.Z.locals;const Qn=n=>{n.remove(),q().classList.remove("disabled")},Vn=(n,e,t,r)=>{const o=document.createElement("div"),a=document.createElement("p"),i=document.createElement("div"),A=document.createElement("button"),s=document.createElement("button");return o.classList.add("del-confirmation-container","flex-column","center"),a.classList.add("del-confirmation-msg"),a.innerText="Confirm Delete?",i.classList.add("del-confirmation-btns-container","flex","center"),A.classList.add("del-confirmation-no-btn"),A.innerText="NO",A.addEventListener("pointerup",(()=>{Qn(o)})),s.classList.add("del-confirmation-yes-btn"),s.innerText="YES",s.addEventListener("pointerup",(()=>{"todo"===e?(n.removeFromTodosArr(t.getId()),n.getProjectsArr().forEach((n=>{n.removeFromTodosArr(t.getId())}))):"project"===e&&(t.getTodosArr().forEach((e=>{n.removeFromTodosArr(e.getId())})),n.removeFromProjectsArr(t.getId())),M(n),(n=>{Me(n),Pe(n),ze(n),qe(n)})(n),r.remove(),Qn(o)})),i.append(A,s),o.append(a,i),o};var Jn=t(117),$n={};$n.styleTagTransform=p(),$n.setAttributes=s(),$n.insert=i().bind(null,"head"),$n.domAPI=o(),$n.insertStyleElement=d(),e()(Jn.Z,$n),Jn.Z&&Jn.Z.locals&&Jn.Z.locals;const _n=(n,e)=>{const t=document.createElement("div"),r=document.createElement("p"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("button"),A=document.createElement("button");t.classList.add("project-selector-container"),r.classList.add("project-selector-title","flex","center"),r.innerText="Add To Project",o.classList.add("project-selector-projects-box","flex-column"),a.classList.add("project-selector-btns-container","flex","center"),i.classList.add("project-selector-cancel-btn"),i.innerText="CANCEL",i.addEventListener("pointerup",(()=>{t.remove(),q().classList.remove("disabled")})),A.classList.add("project-selector-ok-btn"),A.innerText="OK",A.addEventListener("pointerup",(()=>{const r=Array.from(document.querySelectorAll(".project-option.selected"));if(!r.length)return q().classList.remove("disabled"),void t.remove();const o=r.map((n=>n.dataset.id));console.log("ids:",o),o.forEach((t=>{n.getProjectsArr().forEach((n=>{t===n.getId()&&n.pushToTodosArr(e)}))})),M(n),q().classList.remove("disabled"),t.remove()}));const s=n.getProjectsArr().filter((n=>n.getTodosArr().every((n=>n.getId()!==e.getId())))),c=s.map((n=>(n=>{const e=document.createElement("div"),t=document.createElement("p"),r=document.createElement("div");return e.classList.add("project-option","flex","center"),e.dataset.id=n.getId(),e.addEventListener("pointerup",(()=>{e.classList.toggle("selected")})),t.classList.add("project-option-title"),t.innerText=n.getTitle(),r.classList.add("project-option-checkbox"),e.append(t,r),e})(n)));return c.length?o.append(...c):o.append("No Projects"),a.append(i,A),t.append(r,o,a),t},Kn=t.p+"1f907a58b0cc1eaf0caf.svg",ne=t.p+"a220482e9ba79a8aa587.svg",ee=t.p+"ba8ee4721ed25900c034.svg",te=(n,e,t,r,o,a)=>{const i=a||Y(e);return{id:i,getChecked:()=>n,getTitle:()=>e,getNotes:()=>t,getDueDate:()=>r,getPriority:()=>o,getId:()=>i,editChecked:()=>{n=!n},editTitle:n=>{e=n},editNotes:n=>{t=n},editDueDate:n=>{r=n},editPriority:n=>{o=n}}},re=(n,e,t)=>{const r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),A=document.createElement("p"),s=document.createElement("sup"),c=document.createElement("p"),d=document.createElement("img"),l=document.createElement("img"),p=document.createElement("img"),u=oe(n.getDueDate());return r.classList.add("item-container","flex"),r.dataset.id=n.getId(),r.dataset.projectId=t,r.style.borderLeft=`5px solid var(--${n.getPriority()}-prio)`,r.addEventListener("pointerup",(e=>{e.stopPropagation(),Z((({getPriority:n,getDueDate:e,getTitle:t,getNotes:r})=>{const o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),A=document.createElement("div"),s=document.createElement("p"),c=document.createElement("p"),d=document.createElement("p"),l=document.createElement("button");return o.classList.add("details-container"),a.classList.add("details-top-container","flex"),i.classList.add("details-bottom-container"),A.classList.add("details-priority","flex","center"),"low"===n()?A.classList.add("details-priority-l"):"medium"===n()?A.classList.add("details-priority-m"):A.classList.add("details-priority-h"),A.innerText=n()[0].toUpperCase()+n().slice(1),s.classList.add("details-due-date","flex","center"),s.innerText=`Due: ${e()}`,c.classList.add("details-title","flex"),c.innerText=t(),d.classList.add("details-notes","flex"),d.innerText=r()||"No Notes",l.classList.add("details-close-btn"),l.innerText="CLOSE",l.addEventListener("pointerup",(()=>{o.remove(),q().classList.remove("disabled")})),a.append(A,s),i.append(c,d,l),o.append(a,i),o})(n)),q().classList.add("disabled")})),o.classList.add("item-left-container","flex","center"),a.classList.add("item-right-container","flex","center"),i.classList.add("item-checkbox","flex","center"),n.getChecked()&&(i.classList.add("checked"),r.classList.add("no-pointer-events")),i.addEventListener("pointerup",(t=>{t.stopPropagation(),i.classList.toggle("checked"),r.classList.toggle("no-pointer-events"),n.editChecked(),M(e)})),A.classList.add("item-title"),A.innerText=n.getTitle(),s.innerText=u.slice(-6,-4),c.classList.add("item-due-date"),c.append(u.slice(0,-6),s,u.slice(-4)),d.classList.add("item-edit-icon"),d.title="Edit Todo",d.src=Kn,d.addEventListener("pointerup",(t=>{t.stopPropagation();const o=document.querySelector(".navbar-container[data-mode]").dataset.mode,a="null"===r.dataset.projectId?null:r.dataset.projectId;Z(Ce(e,o,"edit-todo",n,null,a)),q().classList.add("disabled")})),l.classList.add("item-move-icon"),l.title="Move to Project",l.src=ne,l.addEventListener("pointerup",(t=>{t.stopPropagation(),Z(_n(e,n)),q().classList.add("disabled")})),p.classList.add("item-trash-icon"),p.title="Delete Todo",p.src=ee,p.addEventListener("pointerup",(t=>{t.stopPropagation(),Z(Vn(e,"todo",n,r)),q().classList.add("disabled")})),o.append(i,A),a.append(c,d,l,p),r.append(o,a),r},oe=n=>{const[e,t,r]=n.split("-"),o=Number(t)-1;return function(n,e,t){var r,o,a,i,A,s,c,d,l,p,u,m,f,C,g,h,E,b;B(2,arguments);var v=String(e),y=k(),j=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:y.locale)&&void 0!==r?r:qn,T=w(null!==(a=null!==(i=null!==(A=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==A?A:y.firstWeekContainsDate)&&void 0!==i?i:null===(l=y.locale)||void 0===l||null===(p=l.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==a?a:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var L=w(null!==(u=null!==(m=null!==(f=null!==(C=null==t?void 0:t.weekStartsOn)&&void 0!==C?C:null==t||null===(g=t.locale)||void 0===g||null===(h=g.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==f?f:y.weekStartsOn)&&void 0!==m?m:null===(E=y.locale)||void 0===E||null===(b=E.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==u?u:0);if(!(L>=0&&L<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var S=x(n);if(!G(S))throw new RangeError("Invalid time value");var Y=bn(S),D=R(S,Y),I={firstWeekContainsDate:T,weekStartsOn:L,locale:j,_originalDate:S};return v.match(Zn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,En[e])(n,j.formatLong):n})).join("").match(Wn).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Nn(r);var a=Cn[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!wn(r)||yn(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!xn(r)||yn(r,e,String(n)),a(D,r,j.localize,I);if(o.match(On))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}(new Date(e,o,r),"do MMM")};var ae=t(735),ie={};ie.styleTagTransform=p(),ie.setAttributes=s(),ie.insert=i().bind(null,"head"),ie.domAPI=o(),ie.insertStyleElement=d(),e()(ae.Z,ie),ae.Z&&ae.Z.locals&&ae.Z.locals;const Ae=t.p+"5c04c572798e520c3444.svg",se=t.p+"1f907a58b0cc1eaf0caf.svg",ce=t.p+"ba8ee4721ed25900c034.svg";var de=t(417),le={};le.styleTagTransform=p(),le.setAttributes=s(),le.insert=i().bind(null,"head"),le.domAPI=o(),le.insertStyleElement=d(),e()(de.Z,le),de.Z&&de.Z.locals&&de.Z.locals;const pe=n=>n.sort(((n,e)=>function(n,e){B(2,arguments);var t=x(n),r=x(e),o=t.getTime()-r.getTime();return o<0?-1:o>0?1:o}(new Date(n.getDueDate()),new Date(e.getDueDate())))),ue=(n,e,t,r)=>{const o=document.createElement("div");if(o.classList.add("holder-box-container","flex-column"),W()&&W().lastElementChild.remove(),!t.length&&"projects"===e)return o.append("No Projects"),o;if(!t.length)return o.append("No Todos"),o;if("todos"===e){const e=pe(t);o.append(...e.map((e=>re(e,n,r))))}else if("projects"===e)o.append(...t.map((e=>fe(e,n))));else if("day"===e){const e=P(t);o.append(...e.map((e=>re(e,n,r))))}else if("week"===e){const e=z(t),a=pe(e);o.append(...a.map((e=>re(e,n,r))))}return o},me=(n,e,t)=>{const r=e||Y(n);let o=t||[];return{id:r,getTitle:()=>n,getTodosArr:()=>o,getId:()=>r,editTitle:e=>{n=e},pushToTodosArr:n=>{o.push(n)},removeFromTodosArr:n=>{o=o.filter((e=>e.id!==n))}}},fe=(n,e)=>{const t=document.createElement("div"),r=document.createElement("p"),o=document.createElement("img"),a=document.createElement("img"),i=document.createElement("img");return t.classList.add("project-container","flex","center"),t.dataset.id=n.getId(),t.addEventListener("pointerup",(r=>{r.stopPropagation();const o=n.getTodosArr(),a=t.dataset.id;W().append(ue(e,"todos",o,a))})),r.classList.add("project-title"),r.innerText=n.getTitle(),o.classList.add("project-add-icon"),o.src=Ae,o.addEventListener("pointerup",(t=>{t.stopPropagation(),Z(Ce(e,null,"add-to-project",null,n)),q().classList.add("disabled")})),a.classList.add("project-edit-icon"),a.src=se,a.addEventListener("pointerup",(t=>{t.stopPropagation();const r=document.querySelector(".navbar-container[data-mode]").dataset.mode;Z(Ce(e,r,"edit-project",null,n)),q().classList.add("disabled")})),i.classList.add("project-trash-icon"),i.src=ce,i.addEventListener("pointerup",(r=>{r.stopPropagation(),Z(Vn(e,"project",n,t)),q().classList.add("disabled")})),t.append(r,o,a,i),t},Ce=(n,e,t,r,o,a)=>{const i=document.createElement("div"),A=document.createElement("div"),s=document.createElement("div"),c=document.createElement("button"),d=document.createElement("button");return i.classList.add("box","flex","center"),A.classList.add("form-container"),s.classList.add("form-top-container","flex","center"),c.classList.add("form-todo-btn"),c.innerText="edit-todo"===t?"Edit Todo":"New Todo",d.classList.add("form-project-btn"),d.innerText="edit-project"===t?"Edit Project":"New Project","edit-todo"===t?(c.classList.add("border-btm-w","no-pointer-events"),s.append(c),A.append(s,ge(n,e,t,i,r,null,a)),i.append(A)):"edit-project"===t?(A.classList.add("project-fields-height"),d.classList.add("border-btm-w","no-pointer-events"),s.append(d),A.append(s,he(n,e,t,i,o)),i.append(A)):"add-to-project"===t?(c.classList.add("border-btm-w","no-pointer-events"),s.append(c),A.append(s,ge(n,e,t,i,null,o,null)),i.append(A)):(c.classList.add("border-btm-b"),s.append(c,d),A.append(s,ge(n,e,t,i,null,null,null)),i.append(A),c.addEventListener("pointerup",(()=>{A.classList.remove("project-fields-height"),c.classList.add("border-btm-b"),d.classList.remove("border-btm-b"),A.lastElementChild.remove(),A.append(ge(n,e,t,i,null,null,null)),i.append(A)})),d.addEventListener("pointerup",(()=>{A.classList.add("project-fields-height"),c.classList.remove("border-btm-b"),d.classList.add("border-btm-b"),A.lastElementChild.remove(),A.append(he(n,e,t,i,null)),i.append(A)}))),i},ge=(n,e,t,r,o,a,i)=>{const A=document.createElement("div"),s=document.createElement("form"),c=document.createElement("textarea"),d=document.createElement("textarea"),l=document.createElement("div"),p=document.createElement("label"),u=document.createElement("input"),m=document.createElement("div"),f=document.createElement("p"),C=document.createElement("div"),g=document.createElement("input"),h=document.createElement("label"),E=document.createElement("input"),b=document.createElement("label"),B=document.createElement("input"),v=document.createElement("label");return A.classList.add("form-fields-container","flex-column"),s.classList.add("form-middle-container","flex-column"),s.id="form",s.addEventListener("submit",(A=>{A.preventDefault(),"add"===t?Be(n,e):"edit-todo"===t?ve(n,e,o,i):"add-to-project"===t&&Te(n,a),q().classList.remove("disabled"),r.remove()})),c.classList.add("form-title-input"),c.placeholder="Enter Title",c.value=o?o.getTitle():"",c.setAttribute("maxlength","50"),c.required=!0,d.classList.add("form-notes-input"),d.placeholder="Enter Notes",d.value=o?o.getNotes():"",d.setAttribute("maxlength","300"),l.classList.add("form-due-date-container","flex-column","center"),p.classList.add("form-due-date-label"),p.innerText="Due Date",u.classList.add("form-due-date-input"),u.type="date",u.value=o?o.getDueDate():"22-11-11",u.required=!0,m.classList.add("form-priority-container","flex-column","center"),f.classList.add("form-priority-title"),f.innerText="Priority",C.classList.add("form-priority-options-container","flex"),S(g,{type:"radio",id:"l-prio",value:"low",name:"priority",required:!0,checked:!(!o||"low"!==o.getPriority())}),g.classList.add("form-priority-radio","hidden"),h.setAttribute("for","l-prio"),h.innerText="Low",h.classList.add("form-priority-label","l-prio-label"),S(E,{type:"radio",id:"m-prio",value:"medium",name:"priority",required:!0,checked:!(!o||"medium"!==o.getPriority())}),E.classList.add("form-priority-radio","hidden"),b.setAttribute("for","m-prio"),b.innerText="Medium",b.classList.add("form-priority-label","m-prio-label"),S(B,{type:"radio",id:"h-prio",value:"high",name:"priority",required:!0,checked:!(!o||"high"!==o.getPriority())}),B.classList.add("form-priority-radio","hidden"),v.setAttribute("for","h-prio"),v.innerText="High",v.classList.add("form-priority-label","h-prio-label"),A.append(s,Ee(r)),s.append(c,d,l,m),l.append(p,u),m.append(f,C),C.append(g,h,E,b,B,v),A},he=(n,e,t,r,o)=>{const a=document.createElement("div"),i=document.createElement("form"),A=document.createElement("textarea");return a.classList.add("form-fields-container","flex-column"),i.classList.add("form-middle-container","flex-column"),i.id="form",i.addEventListener("submit",(a=>{a.preventDefault(),"add"===t?xe(n,e):"edit-project"===t&&we(n,e,o),q().classList.remove("disabled"),r.remove()})),A.classList.add("form-title-input"),A.placeholder="Enter Title",A.innerText=o?o.getTitle():"",A.setAttribute("maxlength","50"),A.required=!0,a.append(i,Ee(r)),i.append(A),a},Ee=n=>{const e=document.createElement("div"),t=document.createElement("button"),r=document.createElement("button");return e.classList.add("form-bottom-container","flex","center"),t.classList.add("form-cancel-btn"),t.innerText="CANCEL",t.addEventListener("pointerup",(()=>{n.remove(),q().classList.remove("disabled")})),r.classList.add("form-ok-btn"),r.innerText="OK",r.setAttribute("form","form"),e.append(t,r),e},be=()=>{const n=document.querySelector(".form-title-input"),e=document.querySelector(".form-notes-input"),t=document.querySelector(".form-due-date-input"),r=document.querySelector("input[name='priority']:checked");return console.log({titleVal:n.value,notesVal:e?e.value:null,dueDateVal:t?t.value:null,priorityVal:r?r.value:null}),{titleVal:n.value,notesVal:e?e.value:null,dueDateVal:t?t.value:null,priorityVal:r?r.value:null}},Be=(n,e)=>{const t=Le(),{isDueToday:r,isDueThisWeek:o}=ye(t);n.pushToTodosArr(t),M(n),Me(n),ze(n),qe(n);const a=n.getTodosArr();ke(n,e,a,r,o,null)},ve=(n,e,t,r)=>{const{titleVal:o,notesVal:a,dueDateVal:i,priorityVal:A}=be();t.editTitle(o),t.editNotes(a),t.editDueDate(i),t.editPriority(A),n.updateTodosArr(t),M(n),ze(n),qe(n);const{isDueToday:s,isDueThisWeek:c}=ye(t);if(r){const t=n.getProjectsArr().filter((n=>n.getId()===r))[0].getTodosArr();ke(n,e,t,null,null,r)}else{const t=n.getTodosArr();ke(n,e,t,s,c,null)}},xe=(n,e)=>{const{titleVal:t}=be(),r=me(t,null,null);n.pushToProjectsArr(r),M(n),Pe(n);const o=n.getProjectsArr();je(n,e,o)},we=(n,e,t)=>{const{titleVal:r}=be();t.editTitle(r),n.updateProjectsArr(t),M(n);const o=n.getProjectsArr();je(n,e,o)},ye=n=>{const e=D(),t=`${n.getDueDate()}T00:00:00`;return{isDueToday:n.getDueDate()===e,isDueThisWeek:L(new Date(t),{weekStartsOn:1})}},ke=(n,e,t,r,o,a)=>{"todos"===e?W().append(ue(n,"todos",t,a)):"day"===e&&r?W().append(ue(n,"day",t,a)):"week"===e&&o?W().append(ue(n,"week",t,a)):"projects"===e&&W().append(ue(n,"todos",t,a))},je=(n,e,t)=>{"projects"===e&&W().append(ue(n,"projects",t))},Te=(n,e)=>{const t=Le();e.pushToTodosArr(t),n.pushToTodosArr(t),n.updateProjectsArr(e),M(n),Me(n),ze(n),qe(n)},Le=()=>{const{titleVal:n,notesVal:e,dueDateVal:t,priorityVal:r}=be();return te(!1,n,e,t,r,null)},Se=t.p+"fca7267107ab84a927a4.png",Ye=t.p+"e93f2a923fc7de099a60.png",De=t.p+"02b75d2441ca70aed6d3.png",Ie=t.p+"7511833571b88e0a38a2.png",Me=n=>{document.querySelector(".navbar-todos-btn").dataset.count=n.getTodosArr().length},Pe=n=>{document.querySelector(".navbar-projects-btn").dataset.count=n.getProjectsArr().length},ze=n=>{document.querySelector(".navbar-day-btn").dataset.count=P(n.getTodosArr()).length},qe=n=>{document.querySelector(".navbar-week-btn").dataset.count=z(n.getTodosArr()).length},We=(n,e,t,r)=>{window.innerWidth<650?((n,e,t,r)=>{n.innerText="",e.innerText="",t.innerText="",r.innerText="";const o=[Se,Ye,De,Ie];[n,e,t,r].forEach(((n,e)=>{const t=document.createElement("img");t.classList.add("navbar-btn-icon"),t.src=o[e],n.append(t)}))})(n,e,t,r):((n,e,t,r)=>{n.innerText="Todos",e.innerText="Projects",t.innerText="Day",r.innerText="Week"})(n,e,t,r)},Ze=n=>{document.querySelectorAll(".navbar-btn-grp-1").forEach((n=>{n.classList.remove("navbar-btn-selected")})),document.querySelectorAll(".navbar-btn-icon").forEach((n=>{n.classList.remove("navbar-btn-selected")})),n.target.classList.contains("navbar-btn-icon")&&n.target.parentElement.classList.add("navbar-btn-selected"),n.target.classList.add("navbar-btn-selected")},Ue=n=>n.map((n=>{const{checked:e,title:t,notes:r,dueDate:o,priority:a,id:i}=n;return te(e,t,r,o,a,i)}));var Fe=t(424),Oe={};Oe.styleTagTransform=p(),Oe.setAttributes=s(),Oe.insert=i().bind(null,"head"),Oe.domAPI=o(),Oe.insertStyleElement=d(),e()(Fe.Z,Oe),Fe.Z&&Fe.Z.locals&&Fe.Z.locals,document.querySelector("#root").append((()=>{const n=document.createElement("div"),e=(()=>{let n=[],e=[];return{getTodosArr:()=>n,getProjectsArr:()=>e,initializeTodosArr:e=>{n=e},initializeProjectsArr:n=>{e=n},pushToTodosArr:e=>{n.push(e)},removeFromTodosArr:e=>{n=n.filter((n=>n.id!==e))},updateTodosArr:e=>{n=n.map((n=>n.getId()===e.getId()?e:n))},pushToProjectsArr:n=>{e.push(n)},removeFromProjectsArr:n=>{e=e.filter((e=>e.id!==n))},updateProjectsArr:n=>{e=e.map((e=>e.getId()===n.getId()?n:e))}}})();return(n=>{const[e,t]=(()=>{const n=te(!0,"Leg day","Squats x 100","2022-11-25","low",null);return[[te(!1,"CS fundamentals","Finish lesson 28","2022-11-28","high",null),te(!1,"Codewars practice","Complete 10 challenges today","2022-11-28","medium",null),te(!1,"Project update","Update sign-in form features","2022-11-28","high",null),n],[me("Fitness",null,[n])]]})();localStorage.todosData?n.initializeTodosArr(Ue(JSON.parse(localStorage.todosData))):n.initializeTodosArr(e),localStorage.projectsData?n.initializeProjectsArr(JSON.parse(localStorage.projectsData).map((n=>{const{title:e,id:t,todosData:r}=n,o=Ue(r);return me(e,t,o)}))):n.initializeProjectsArr(t)})(e),onbeforeunload=M(e),n.classList.add("app-container","flex-column","center"),n.append((n=>{const e=document.createElement("div"),t=document.createElement("span"),r=document.createElement("h1");return e.classList.add("content-box-container"),t.classList.add("material-symbols-outlined"),t.append("checklist"),r.classList.add("content-box-title","flex"),r.append(t,"To-Do"),e.append(r,(n=>{let e="todos";const t=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),A=document.createElement("div");function s(n){e=n,t.dataset.mode=e}return t.classList.add("navbar-container","flex"),t.dataset.mode=e,r.classList.add("navbar-btn","navbar-btn-grp-1","navbar-todos-btn","flex","navbar-btn-selected"),r.dataset.count=n.getTodosArr().length,r.addEventListener("pointerup",(e=>{Ze(e),s("todos");const t=n.getTodosArr();console.log("todosArr:",t),W().append(ue(n,"todos",t,null))})),o.classList.add("navbar-btn","navbar-btn-grp-1","navbar-projects-btn","flex"),o.dataset.count=n.getProjectsArr().length,o.addEventListener("pointerup",(e=>{Ze(e),s("projects");const t=n.getProjectsArr();console.log("projectsArr:",t),W().append(ue(n,"projects",t))})),a.classList.add("navbar-btn","navbar-btn-grp-1","navbar-day-btn","flex"),a.dataset.count=P(n.getTodosArr()).length,a.addEventListener("pointerup",(t=>{Ze(t),s("day");const r=n.getTodosArr();console.log("todosArr:",r),W().append(ue(n,e,r,null))})),i.classList.add("navbar-btn","navbar-btn-grp-1","navbar-week-btn","flex"),i.dataset.count=z(n.getTodosArr()).length,i.addEventListener("pointerup",(t=>{Ze(t),s("week");const r=n.getTodosArr();console.log("todosArr:",r),W().append(ue(n,e,r,null))})),A.classList.add("navbar-btn","navbar-btn-grp-2","navbar-plus-btn","flex"),A.title="Add New",A.innerText="+",A.addEventListener("pointerup",(()=>{Z(Ce(n,e,"add",null,null,null)),q().classList.add("disabled")})),We(r,o,a,i),window.onresize=We(r,o,a,i),t.append(r,o,a,i,A),t})(n),ue(n,"todos",n.getTodosArr(),null)),e})(e)),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFlLE9BRzlDdVAsQ0FBUyxFSCtEQyxDQUFtQjFQLElBRTdCMFAsQ0FBUyxFRXBGTixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL2NvbnRlbnRCb3gvY29udGVudEJveC5jc3MiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL2RlbENvbmZpcm1hdGlvbi9kZWxDb25maXJtYXRpb24uY3NzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy9ob2xkZXJCb3gvaG9sZGVyQm94LmNzcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhci5jc3MiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL3Byb2plY3QvcHJvamVjdC5jc3MiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL3Byb2plY3RTZWxlY3Rvci9wcm9qZWN0U2VsZWN0b3IuY3NzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy90b2RvRGV0YWlscy90b2RvRGV0YWlscy5jc3MiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL3RvZG9Gb3JtL3RvZG9Gb3JtLmNzcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2NvbXBvbmVudHMvdG9kb0l0ZW0vdG9kb0l0ZW0uY3NzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29udGFpbmVyL2FwcC5jc3MiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29udGFpbmVyL2FwcC5jc3M/MDliMCIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2NvbXBvbmVudHMvY29udGVudEJveC9jb250ZW50Qm94LmNzcz9lMWU5Iiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy9uYXZiYXIvbmF2YmFyLmNzcz8xYTY4Iiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy90b2RvRm9ybS90b2RvRm9ybS5jc3M/YTFmYSIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1NhbWVXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVGhpc1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9tb2R1bGVzL3V0aWxpdHlGdW5jdGlvbnMvdXRpbGl0eUZ1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL21vZHVsZXMvZG9tQ29udHJvbGxlci9kb21Db250cm9sbGVyLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy90b2RvSXRlbS90b2RvSXRlbS5jc3M/Y2ZjYiIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL3RvZG9EZXRhaWxzL3RvZG9EZXRhaWxzLmNzcz83NDliIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy9kZWxDb25maXJtYXRpb24vZGVsQ29uZmlybWF0aW9uLmNzcz9lYTUwIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy9kZWxDb25maXJtYXRpb24vZGVsQ29uZmlybWF0aW9uLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0U2VsZWN0b3IvcHJvamVjdFNlbGVjdG9yLmNzcz85ZGJmIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0U2VsZWN0b3IvcHJvamVjdFNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy90b2RvSXRlbS90b2RvSXRlbS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2NvbXBvbmVudHMvdG9kb0RldGFpbHMvdG9kb0RldGFpbHMuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL3Byb2plY3QvcHJvamVjdC5jc3M/Nzc0ZCIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2NvbXBvbmVudHMvaG9sZGVyQm94L2hvbGRlckJveC5jc3M/YjYzMSIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2NvbXBvbmVudHMvaG9sZGVyQm94L2hvbGRlckJveC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb21wYXJlQXNjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0L3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL3RvZG9Gb3JtL3RvZG9Gb3JtLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29tcG9uZW50cy9uYXZiYXIvbmF2YmFyLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvY29udGFpbmVyL2FwcC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2luZGV4LmNzcz9jZmU0Iiwid2VicGFjazovL3RvZG8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jb21wb25lbnRzL2NvbnRlbnRCb3gvY29udGVudEJveC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5jb250ZW50LWJveC1jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGU6IDY1cHggMWZyIDEwMHB4IC8gMWZyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyAgLyogSUUgYW5kIEVkZ2UgKi9cXG4gIHNjcm9sbGJhci13aWR0aDogbm9uZTsgIC8qIEZpcmVmb3ggKi9cXG59XFxuXFxuLyogSGlkZSBzY3JvbGxiYXIgZm9yIENocm9tZSwgU2FmYXJpIGFuZCBPcGVyYSAqL1xcbi5jb250ZW50LWJveC1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5tYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIHtcXG4gIGZvbnQtdmFyaWF0aW9uLXNldHRpbmdzOlxcbiAgJ0ZJTEwnIDAsXFxuICAnd2dodCcgNDAwLFxcbiAgJ0dSQUQnIDIwMCxcXG4gICdvcHN6JyA0ODtcXG4gIGZvbnQtc2l6ZTogMS44NXJlbTtcXG59XFxuXFxuLmNvbnRlbnQtYm94LXRpdGxlIHtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMTFweDtcXG4gIGdyaWQtYXJlYTogMSAvIDEgLyAyIC8gLTE7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMyk7XFxuICBmb250LXNpemU6IDJyZW07XFxuICBmb250LWZhbWlseTogJ1BUIE1vbm8nLCBtb25vc3BhY2U7XFxuICBib3gtc2hhZG93OiAwIDFweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNjUwcHgpIHtcXG4gIC5jb250ZW50LWJveC1jb250YWluZXIge1xcbiAgICBtYXgtd2lkdGg6IDk1MHB4O1xcbiAgICBtYXgtaGVpZ2h0OiA1NTBweDtcXG4gICAgZ3JpZC10ZW1wbGF0ZTogNjVweCAxZnIgLyAxOTBweCAxZnI7XFxuICAgIGJveC1zaGFkb3c6IDNweCAzcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG4gIH1cXG5cXG4gIC5jb250ZW50LWJveC10aXRsZSB7XFxuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxuICAgIHBhZGRpbmctbGVmdDogMjVweDtcXG4gICAgcGFkZGluZy10b3A6IDRweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDg1MHB4KSB7XFxuICAuY29udGVudC1ib3gtY29udGFpbmVyIHtcXG4gICAgZ3JpZC10ZW1wbGF0ZTogNjVweCAxZnIgLyAyMjVweCAxZnI7XFxuICB9XFxuXFxuICAubWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCB7XFxuICAgIGZvbnQtc2l6ZTogMi4ycmVtO1xcbiAgfVxcblxcbiAgLmNvbnRlbnQtYm94LXRpdGxlIHtcXG4gICAgZm9udC1zaXplOiAyLjNyZW07XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiAxNjAwcHgpIHtcXG4gIC5jb250ZW50LWJveC1jb250YWluZXIge1xcbiAgICBtYXgtd2lkdGg6IDExNTBweDtcXG4gICAgbWF4LWhlaWdodDogNjAwcHg7XFxuICAgIGdyaWQtdGVtcGxhdGU6IDY1cHggMWZyIC8gMjUwcHggMWZyO1xcbiAgfVxcblxcbiAgLm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQge1xcbiAgICBmb250LXNpemU6IDIuM3JlbTtcXG4gIH1cXG5cXG4gIC5jb250ZW50LWJveC10aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogMi40cmVtO1xcbiAgfVxcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9jb250ZW50Qm94L2NvbnRlbnRCb3guY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsV0FBVztFQUNYLGFBQWE7RUFDYixhQUFhO0VBQ2IsbUNBQW1DO0VBQ25DLHVCQUF1QjtFQUN2QixnQkFBZ0I7RUFDaEIsd0JBQXdCLEdBQUcsZ0JBQWdCO0VBQzNDLHFCQUFxQixHQUFHLFlBQVk7QUFDdEM7O0FBRUEsZ0RBQWdEO0FBQ2hEO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0U7Ozs7V0FJUztFQUNULGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsU0FBUztFQUNULHlCQUF5QjtFQUN6QixZQUFZO0VBQ1osaUNBQWlDO0VBQ2pDLGVBQWU7RUFDZixpQ0FBaUM7RUFDakMsMkNBQTJDO0FBQzdDOztBQUVBO0VBQ0U7SUFDRSxnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLG1DQUFtQztJQUNuQyw2Q0FBNkM7RUFDL0M7O0VBRUE7SUFDRSxzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLGdCQUFnQjtFQUNsQjtBQUNGOztBQUVBO0VBQ0U7SUFDRSxtQ0FBbUM7RUFDckM7O0VBRUE7SUFDRSxpQkFBaUI7RUFDbkI7O0VBRUE7SUFDRSxpQkFBaUI7RUFDbkI7QUFDRjs7QUFFQTtFQUNFO0lBQ0UsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixtQ0FBbUM7RUFDckM7O0VBRUE7SUFDRSxpQkFBaUI7RUFDbkI7O0VBRUE7SUFDRSxpQkFBaUI7RUFDbkI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGVudC1ib3gtY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlOiA2NXB4IDFmciAxMDBweCAvIDFmcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsgIC8qIElFIGFuZCBFZGdlICovXFxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7ICAvKiBGaXJlZm94ICovXFxufVxcblxcbi8qIEhpZGUgc2Nyb2xsYmFyIGZvciBDaHJvbWUsIFNhZmFyaSBhbmQgT3BlcmEgKi9cXG4uY29udGVudC1ib3gtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCB7XFxuICBmb250LXZhcmlhdGlvbi1zZXR0aW5nczpcXG4gICdGSUxMJyAwLFxcbiAgJ3dnaHQnIDQwMCxcXG4gICdHUkFEJyAyMDAsXFxuICAnb3BzeicgNDg7XFxuICBmb250LXNpemU6IDEuODVyZW07XFxufVxcblxcbi5jb250ZW50LWJveC10aXRsZSB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDExcHg7XFxuICBncmlkLWFyZWE6IDEgLyAxIC8gMiAvIC0xO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTMpO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbiAgZm9udC1mYW1pbHk6ICdQVCBNb25vJywgbW9ub3NwYWNlO1xcbiAgYm94LXNoYWRvdzogMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDY1MHB4KSB7XFxuICAuY29udGVudC1ib3gtY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiA5NTBweDtcXG4gICAgbWF4LWhlaWdodDogNTUwcHg7XFxuICAgIGdyaWQtdGVtcGxhdGU6IDY1cHggMWZyIC8gMTkwcHggMWZyO1xcbiAgICBib3gtc2hhZG93OiAzcHggM3B4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICB9XFxuXFxuICAuY29udGVudC1ib3gtdGl0bGUge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDI1cHg7XFxuICAgIHBhZGRpbmctdG9wOiA0cHg7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA4NTBweCkge1xcbiAgLmNvbnRlbnQtYm94LWNvbnRhaW5lciB7XFxuICAgIGdyaWQtdGVtcGxhdGU6IDY1cHggMWZyIC8gMjI1cHggMWZyO1xcbiAgfVxcblxcbiAgLm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQge1xcbiAgICBmb250LXNpemU6IDIuMnJlbTtcXG4gIH1cXG5cXG4gIC5jb250ZW50LWJveC10aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogMi4zcmVtO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTYwMHB4KSB7XFxuICAuY29udGVudC1ib3gtY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiAxMTUwcHg7XFxuICAgIG1heC1oZWlnaHQ6IDYwMHB4O1xcbiAgICBncmlkLXRlbXBsYXRlOiA2NXB4IDFmciAvIDI1MHB4IDFmcjtcXG4gIH1cXG5cXG4gIC5tYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIHtcXG4gICAgZm9udC1zaXplOiAyLjNyZW07XFxuICB9XFxuXFxuICAuY29udGVudC1ib3gtdGl0bGUge1xcbiAgICBmb250LXNpemU6IDIuNHJlbTtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmRlbC1jb25maXJtYXRpb24tY29udGFpbmVyIHtcXG4gIHdpZHRoOiAyNTVweDtcXG4gIGhlaWdodDogMTQwcHg7XFxuICBnYXA6IDM1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIHBhZGRpbmc6IDEwcHggMTVweDtcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBib3gtc2hhZG93OiAzcHggM3B4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgei1pbmRleDogMTAwO1xcbn1cXG5cXG4uZGVsLWNvbmZpcm1hdGlvbi1tc2cge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG5cXG4uZGVsLWNvbmZpcm1hdGlvbi1idG5zLWNvbnRhaW5lciB7XFxuICBnYXA6IDE1cHg7XFxufVxcblxcbi5kZWwtY29uZmlybWF0aW9uLW5vLWJ0bixcXG4uZGVsLWNvbmZpcm1hdGlvbi15ZXMtYnRuIHtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIHBhZGRpbmc6IDEwcHggMjBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAuODVyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgdHJhbnNpdGlvbjogLjVzO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5kZWwtY29uZmlybWF0aW9uLW5vLWJ0bjpob3ZlcixcXG4uZGVsLWNvbmZpcm1hdGlvbi15ZXMtYnRuOmhvdmVyIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uZGVsLWNvbmZpcm1hdGlvbi1uby1idG4ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYWNjZW50LTMpO1xcbiAgY29sb3I6IHZhcigtLWFjY2VudC0zKTtcXG59XFxuXFxuLmRlbC1jb25maXJtYXRpb24teWVzLWJ0biB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1hY2NlbnQtMSk7XFxuICBjb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbn1cXG5cXG4uZGVsLWNvbmZpcm1hdGlvbi1uby1idG46aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTMpO1xcbn1cXG5cXG4uZGVsLWNvbmZpcm1hdGlvbi15ZXMtYnRuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFjY2VudC0xKTtcXG59XFxuXFxuXFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvZGVsQ29uZmlybWF0aW9uL2RlbENvbmZpcm1hdGlvbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxZQUFZO0VBQ1osYUFBYTtFQUNiLFNBQVM7RUFDVCx1QkFBdUI7RUFDdkIsa0JBQWtCO0VBQ2xCLCtCQUErQjtFQUMvQixrQkFBa0I7RUFDbEIsNkNBQTZDO0VBQzdDLGVBQWU7RUFDZixRQUFRO0VBQ1IsU0FBUztFQUNULGdDQUFnQztFQUNoQyxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7O0VBRUUsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsbUJBQW1CO0VBQ25CLHFDQUFxQztFQUNyQyxpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixlQUFlO0VBQ2YsdUJBQXVCO0VBQ3ZCLGVBQWU7QUFDakI7O0FBRUE7O0VBRUUsWUFBWTtFQUNaLDJCQUEyQjtFQUMzQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxpQ0FBaUM7RUFDakMsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsaUNBQWlDO0VBQ2pDLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGlDQUFpQztBQUNuQzs7QUFFQTtFQUNFLGlDQUFpQztBQUNuQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZGVsLWNvbmZpcm1hdGlvbi1jb250YWluZXIge1xcbiAgd2lkdGg6IDI1NXB4O1xcbiAgaGVpZ2h0OiAxNDBweDtcXG4gIGdhcDogMzVweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgcGFkZGluZzogMTBweCAxNXB4O1xcbiAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJveC1zaGFkb3c6IDNweCAzcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICB6LWluZGV4OiAxMDA7XFxufVxcblxcbi5kZWwtY29uZmlybWF0aW9uLW1zZyB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcblxcbi5kZWwtY29uZmlybWF0aW9uLWJ0bnMtY29udGFpbmVyIHtcXG4gIGdhcDogMTVweDtcXG59XFxuXFxuLmRlbC1jb25maXJtYXRpb24tbm8tYnRuLFxcbi5kZWwtY29uZmlybWF0aW9uLXllcy1idG4ge1xcbiAgd2lkdGg6IDEwMHB4O1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IC44NXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0cmFuc2l0aW9uOiAuNXM7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmRlbC1jb25maXJtYXRpb24tbm8tYnRuOmhvdmVyLFxcbi5kZWwtY29uZmlybWF0aW9uLXllcy1idG46aG92ZXIge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01cHgpO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5kZWwtY29uZmlybWF0aW9uLW5vLWJ0biB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1hY2NlbnQtMyk7XFxuICBjb2xvcjogdmFyKC0tYWNjZW50LTMpO1xcbn1cXG5cXG4uZGVsLWNvbmZpcm1hdGlvbi15ZXMtYnRuIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWFjY2VudC0xKTtcXG4gIGNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxufVxcblxcbi5kZWwtY29uZmlybWF0aW9uLW5vLWJ0bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMyk7XFxufVxcblxcbi5kZWwtY29uZmlybWF0aW9uLXllcy1idG46aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbn1cXG5cXG5cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuaG9sZGVyLWJveC1jb250YWluZXIge1xcbiAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAtMTtcXG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMTVweCAxMHB4O1xcbiAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMS4xNXJlbTtcXG4gIG92ZXJmbG93OiBzY3JvbGw7XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7ICAvKiBJRSBhbmQgRWRnZSAqL1xcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOyAgLyogRmlyZWZveCAqL1xcbn1cXG5cXG4vKiBIaWRlIHNjcm9sbGJhciBmb3IgQ2hyb21lLCBTYWZhcmkgYW5kIE9wZXJhICovXFxuLmhvbGRlci1ib3gtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNjUwcHgpIHtcXG4gIC5ob2xkZXItYm94LWNvbnRhaW5lciB7XFxuICAgIGdyaWQtYXJlYTogMiAvIDIgLyAtMSAvIC0xO1xcbiAgICBwYWRkaW5nOiAxNXB4O1xcbiAgfVxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9ob2xkZXJCb3gvaG9sZGVyQm94LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHlCQUF5QjtFQUN6QixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQiwrQkFBK0I7RUFDL0Isa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQix3QkFBd0IsR0FBRyxnQkFBZ0I7RUFDM0MscUJBQXFCLEdBQUcsWUFBWTtBQUN0Qzs7QUFFQSxnREFBZ0Q7QUFDaEQ7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRTtJQUNFLDBCQUEwQjtJQUMxQixhQUFhO0VBQ2Y7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaG9sZGVyLWJveC1jb250YWluZXIge1xcbiAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAtMTtcXG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMTVweCAxMHB4O1xcbiAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMS4xNXJlbTtcXG4gIG92ZXJmbG93OiBzY3JvbGw7XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7ICAvKiBJRSBhbmQgRWRnZSAqL1xcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOyAgLyogRmlyZWZveCAqL1xcbn1cXG5cXG4vKiBIaWRlIHNjcm9sbGJhciBmb3IgQ2hyb21lLCBTYWZhcmkgYW5kIE9wZXJhICovXFxuLmhvbGRlci1ib3gtY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNjUwcHgpIHtcXG4gIC5ob2xkZXItYm94LWNvbnRhaW5lciB7XFxuICAgIGdyaWQtYXJlYTogMiAvIDIgLyAtMSAvIC0xO1xcbiAgICBwYWRkaW5nOiAxNXB4O1xcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubmF2YmFyLWNvbnRhaW5lciB7XFxuICB3aWR0aDogbWluKDQzMHB4LCA5MCUpO1xcbiAgaGVpZ2h0OiA3MHB4O1xcbiAgcGxhY2Utc2VsZjogY2VudGVyO1xcbiAgZ3JpZC1hcmVhOiAzIC8gMSAvIC0xIC8gLTE7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMCAxNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTQpO1xcbiAgYm9yZGVyLXJhZGl1czogMTRweDtcXG59XFxuXFxuLm5hdmJhci1idG4ge1xcbiAgaGVpZ2h0OiA0N3B4O1xcbiAgd2lkdGg6IDQ3cHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDEuM3JlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICB0cmFuc2l0aW9uOiAuNHM7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5uYXZiYXItYnRuOmhvdmVyIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNHB4KTtcXG59XFxuXFxuLm5hdmJhci1idG4taWNvbiB7XFxuICB3aWR0aDogMjdweDtcXG4gIGhlaWdodDogMjdweDtcXG59XFxuXFxuLm5hdmJhci1idG4tc2VsZWN0ZWQge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxufVxcblxcbi5uYXZiYXItcGx1cy1idG4ge1xcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0Jywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMi44cmVtO1xcbiAgY29sb3I6IHZhcigtLWFjY2VudC0xKTtcXG59XFxuXFxuLm5hdmJhci1wbHVzLWJ0bjpob3ZlciB7XFxuICBjb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNjUwcHgpIHtcXG4gIC5uYXZiYXItY29udGFpbmVyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgcGxhY2Utc2VsZjogYXV0bztcXG4gICAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAyO1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMCAwIDIwcHggMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTUpO1xcbiAgICBib3gtc2hhZG93OiAxcHggMCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcbiAgfVxcblxcbiAgLm5hdmJhci1idG4ge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiA2NXB4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XFxuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xcbiAgICBjb2xvcjogdmFyKC0tYWNjZW50LTQpO1xcbiAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcbiAgICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgdHJhbnNpdGlvbjogLjY1cztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgfVxcblxcbiAgLm5hdmJhci1idG4tZ3JwLTE6OmJlZm9yZSB7XFxuICAgIHdpZHRoOiAyNXB4O1xcbiAgICBoZWlnaHQ6IDI1cHg7XFxuICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS1jb3VudCk7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6IDIwcHg7XFxuICAgIHRvcDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIGZvbnQtc2l6ZTogLjg1cmVtO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgY29sb3I6IHZhcigtLWFjY2VudC0zKTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICB9XFxuXFxuICAubmF2YmFyLWJ0bjpob3ZlcixcXG4gIC5uYXZiYXItYnRuLXNlbGVjdGVkICB7XFxuICAgIHRyYW5zZm9ybTogbm9uZTtcXG4gICAgY29sb3I6IHZhcigtLWFjY2VudC00KTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTYpO1xcbiAgfVxcblxcbiAgLm5hdmJhci1idG4tc2VsZWN0ZWQge1xcbiAgICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB2YXIoLS1hY2NlbnQtMSk7XFxuICB9XFxuXFxuICAubmF2YmFyLXBsdXMtYnRuIHtcXG4gICAgd2lkdGg6IDgwcHg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDBweDtcXG4gICAgZm9udC1zaXplOiAyLjk1cmVtO1xcbiAgICBjb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICB9XFxuXFxuICAubmF2YmFyLXBsdXMtYnRuOmhvdmVyIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpO1xcbiAgICBjb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDg1MHB4KSB7XFxuICAubmF2YmFyLWJ0biB7XFxuICAgIHBhZGRpbmctbGVmdDogMjBweDtcXG4gICAgZm9udC1zaXplOiAxLjE1cmVtO1xcbiAgfVxcblxcbiAgLm5hdmJhci1idG4tZ3JwLTE6OmJlZm9yZSB7XFxuICAgIHJpZ2h0OiAyNHB4O1xcbiAgfVxcblxcbiAgLm5hdmJhci1wbHVzLWJ0biB7XFxuICAgIGZvbnQtc2l6ZTogMi45NXJlbTtcXG4gIH1cXG59XFxuXFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxzQkFBc0I7RUFDdEIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQiwwQkFBMEI7RUFDMUIsOEJBQThCO0VBQzlCLG1CQUFtQjtFQUNuQixlQUFlO0VBQ2YsaUNBQWlDO0VBQ2pDLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixXQUFXO0VBQ1gsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7QUFDZDs7QUFFQTtFQUNFLG9CQUFvQjtFQUNwQixpQ0FBaUM7QUFDbkM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIscUNBQXFDO0VBQ3JDLGlCQUFpQjtFQUNqQixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRTtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLHdCQUF3QjtJQUN4QixzQkFBc0I7SUFDdEIsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsaUNBQWlDO0lBQ2pDLDJDQUEyQztJQUMzQyxnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSxXQUFXO0lBQ1gsWUFBWTtJQUNaLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIscUNBQXFDO0lBQ3JDLGdCQUFnQjtJQUNoQixtQ0FBbUM7SUFDbkMsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1oseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsUUFBUTtJQUNSLDJCQUEyQjtJQUMzQixhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsc0JBQXNCO0lBQ3RCLHVCQUF1QjtFQUN6Qjs7RUFFQTs7SUFFRSxlQUFlO0lBQ2Ysc0JBQXNCO0lBQ3RCLGlDQUFpQztFQUNuQzs7RUFFQTtJQUNFLHVDQUF1QztFQUN6Qzs7RUFFQTtJQUNFLFdBQVc7SUFDWCx1QkFBdUI7SUFDdkIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLFlBQVk7RUFDZDs7RUFFQTtJQUNFLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsNkJBQTZCO0VBQy9CO0FBQ0Y7O0FBRUE7RUFDRTtJQUNFLGtCQUFrQjtJQUNsQixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxXQUFXO0VBQ2I7O0VBRUE7SUFDRSxrQkFBa0I7RUFDcEI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubmF2YmFyLWNvbnRhaW5lciB7XFxuICB3aWR0aDogbWluKDQzMHB4LCA5MCUpO1xcbiAgaGVpZ2h0OiA3MHB4O1xcbiAgcGxhY2Utc2VsZjogY2VudGVyO1xcbiAgZ3JpZC1hcmVhOiAzIC8gMSAvIC0xIC8gLTE7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMCAxNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTQpO1xcbiAgYm9yZGVyLXJhZGl1czogMTRweDtcXG59XFxuXFxuLm5hdmJhci1idG4ge1xcbiAgaGVpZ2h0OiA0N3B4O1xcbiAgd2lkdGg6IDQ3cHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDEuM3JlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICB0cmFuc2l0aW9uOiAuNHM7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5uYXZiYXItYnRuOmhvdmVyIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNHB4KTtcXG59XFxuXFxuLm5hdmJhci1idG4taWNvbiB7XFxuICB3aWR0aDogMjdweDtcXG4gIGhlaWdodDogMjdweDtcXG59XFxuXFxuLm5hdmJhci1idG4tc2VsZWN0ZWQge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxufVxcblxcbi5uYXZiYXItcGx1cy1idG4ge1xcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0Jywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMi44cmVtO1xcbiAgY29sb3I6IHZhcigtLWFjY2VudC0xKTtcXG59XFxuXFxuLm5hdmJhci1wbHVzLWJ0bjpob3ZlciB7XFxuICBjb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNjUwcHgpIHtcXG4gIC5uYXZiYXItY29udGFpbmVyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgcGxhY2Utc2VsZjogYXV0bztcXG4gICAgZ3JpZC1hcmVhOiAyIC8gMSAvIDMgLyAyO1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMCAwIDIwcHggMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTUpO1xcbiAgICBib3gtc2hhZG93OiAxcHggMCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcbiAgfVxcblxcbiAgLm5hdmJhci1idG4ge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiA2NXB4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XFxuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xcbiAgICBjb2xvcjogdmFyKC0tYWNjZW50LTQpO1xcbiAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcbiAgICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgdHJhbnNpdGlvbjogLjY1cztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgfVxcblxcbiAgLm5hdmJhci1idG4tZ3JwLTE6OmJlZm9yZSB7XFxuICAgIHdpZHRoOiAyNXB4O1xcbiAgICBoZWlnaHQ6IDI1cHg7XFxuICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS1jb3VudCk7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6IDIwcHg7XFxuICAgIHRvcDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIGZvbnQtc2l6ZTogLjg1cmVtO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgY29sb3I6IHZhcigtLWFjY2VudC0zKTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICB9XFxuXFxuICAubmF2YmFyLWJ0bjpob3ZlcixcXG4gIC5uYXZiYXItYnRuLXNlbGVjdGVkICB7XFxuICAgIHRyYW5zZm9ybTogbm9uZTtcXG4gICAgY29sb3I6IHZhcigtLWFjY2VudC00KTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTYpO1xcbiAgfVxcblxcbiAgLm5hdmJhci1idG4tc2VsZWN0ZWQge1xcbiAgICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB2YXIoLS1hY2NlbnQtMSk7XFxuICB9XFxuXFxuICAubmF2YmFyLXBsdXMtYnRuIHtcXG4gICAgd2lkdGg6IDgwcHg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDBweDtcXG4gICAgZm9udC1zaXplOiAyLjk1cmVtO1xcbiAgICBjb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICB9XFxuXFxuICAubmF2YmFyLXBsdXMtYnRuOmhvdmVyIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpO1xcbiAgICBjb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDg1MHB4KSB7XFxuICAubmF2YmFyLWJ0biB7XFxuICAgIHBhZGRpbmctbGVmdDogMjBweDtcXG4gICAgZm9udC1zaXplOiAxLjE1cmVtO1xcbiAgfVxcblxcbiAgLm5hdmJhci1idG4tZ3JwLTE6OmJlZm9yZSB7XFxuICAgIHJpZ2h0OiAyNHB4O1xcbiAgfVxcblxcbiAgLm5hdmJhci1wbHVzLWJ0biB7XFxuICAgIGZvbnQtc2l6ZTogMi45NXJlbTtcXG4gIH1cXG59XFxuXFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnByb2plY3QtY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZ2FwOiAxOHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTIpO1xcbiAgcGFkZGluZzogMTJweCAxMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogN3B4O1xcbiAgdHJhbnNpdGlvbjogLjI1cztcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxufVxcblxcbi5wcm9qZWN0LWNvbnRhaW5lcjpob3ZlciB7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7XFxufVxcblxcbi5wcm9qZWN0LWNvbnRhaW5lcjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5wcm9qZWN0LXRpdGxlIHtcXG4gIHdpZHRoOiAxODVweDtcXG4gIG1hcmdpbi1yaWdodDogYXV0bztcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIG92ZXJmbG93LXdyYXA6IGFueXdoZXJlO1xcbn1cXG5cXG4ucHJvamVjdC1hZGQtaWNvbiB7XFxuICBtYXJnaW4tbGVmdDogMnB4O1xcbn1cXG5cXG4ucHJvamVjdC1hZGQtaWNvbixcXG4ucHJvamVjdC1lZGl0LWljb24sXFxuLnByb2plY3QtdHJhc2gtaWNvbiB7XFxuICB3aWR0aDogdmFyKC0taWNvbi13aWR0aC0xKTtcXG4gIGhlaWdodDogdmFyKC0taWNvbi1oZWlnaHQtMSk7XFxufVxcblxcbi5wcm9qZWN0LWFkZC1pY29uOmhvdmVyLFxcbi5wcm9qZWN0LWVkaXQtaWNvbjpob3ZlcixcXG4ucHJvamVjdC10cmFzaC1pY29uOmhvdmVyIHtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcXG59XFxuXFxuLnByb2plY3QtY29udGFpbmVyLFxcbi5wcm9qZWN0LWFkZC1pY29uLFxcbi5wcm9qZWN0LWVkaXQtaWNvbixcXG4ucHJvamVjdC10cmFzaC1pY29uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDM4MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAyMTVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDQ1MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAyNTBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDUwMHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAyODVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDY1MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAyNzVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc1MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAzMjVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDg1MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAzNzBweDtcXG4gIH1cXG59XFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvcHJvamVjdC9wcm9qZWN0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7RUFDWCxTQUFTO0VBQ1QsaUNBQWlDO0VBQ2pDLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLCtCQUErQjtBQUNqQzs7QUFFQTtFQUNFLDZDQUE2QztFQUM3QywyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7OztFQUdFLDBCQUEwQjtFQUMxQiw0QkFBNEI7QUFDOUI7O0FBRUE7OztFQUdFLHFCQUFxQjtBQUN2Qjs7QUFFQTs7OztFQUlFLGVBQWU7QUFDakI7O0FBRUE7RUFDRTtJQUNFLFlBQVk7RUFDZDtBQUNGOztBQUVBO0VBQ0U7SUFDRSxZQUFZO0VBQ2Q7QUFDRjs7QUFFQTtFQUNFO0lBQ0UsWUFBWTtFQUNkO0FBQ0Y7O0FBRUE7RUFDRTtJQUNFLFlBQVk7RUFDZDtBQUNGOztBQUVBO0VBQ0U7SUFDRSxZQUFZO0VBQ2Q7QUFDRjs7QUFFQTtFQUNFO0lBQ0UsWUFBWTtFQUNkO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnByb2plY3QtY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZ2FwOiAxOHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTIpO1xcbiAgcGFkZGluZzogMTJweCAxMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogN3B4O1xcbiAgdHJhbnNpdGlvbjogLjI1cztcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxufVxcblxcbi5wcm9qZWN0LWNvbnRhaW5lcjpob3ZlciB7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7XFxufVxcblxcbi5wcm9qZWN0LWNvbnRhaW5lcjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5wcm9qZWN0LXRpdGxlIHtcXG4gIHdpZHRoOiAxODVweDtcXG4gIG1hcmdpbi1yaWdodDogYXV0bztcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIG92ZXJmbG93LXdyYXA6IGFueXdoZXJlO1xcbn1cXG5cXG4ucHJvamVjdC1hZGQtaWNvbiB7XFxuICBtYXJnaW4tbGVmdDogMnB4O1xcbn1cXG5cXG4ucHJvamVjdC1hZGQtaWNvbixcXG4ucHJvamVjdC1lZGl0LWljb24sXFxuLnByb2plY3QtdHJhc2gtaWNvbiB7XFxuICB3aWR0aDogdmFyKC0taWNvbi13aWR0aC0xKTtcXG4gIGhlaWdodDogdmFyKC0taWNvbi1oZWlnaHQtMSk7XFxufVxcblxcbi5wcm9qZWN0LWFkZC1pY29uOmhvdmVyLFxcbi5wcm9qZWN0LWVkaXQtaWNvbjpob3ZlcixcXG4ucHJvamVjdC10cmFzaC1pY29uOmhvdmVyIHtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcXG59XFxuXFxuLnByb2plY3QtY29udGFpbmVyLFxcbi5wcm9qZWN0LWFkZC1pY29uLFxcbi5wcm9qZWN0LWVkaXQtaWNvbixcXG4ucHJvamVjdC10cmFzaC1pY29uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDM4MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAyMTVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDQ1MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAyNTBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDUwMHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAyODVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDY1MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAyNzVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc1MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAzMjVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDg1MHB4KSB7XFxuICAucHJvamVjdC10aXRsZSB7XFxuICAgIHdpZHRoOiAzNzBweDtcXG4gIH1cXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2NoZWNrLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5wcm9qZWN0LXNlbGVjdG9yLWNvbnRhaW5lciB7XFxuICBoZWlnaHQ6IG1pbig0MjVweCwgOTUlKTtcXG4gIHdpZHRoOiAzMzVweDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDY1cHggMWZyIDk1cHg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBmb250LWZhbWlseTogJ0xhdG8nLCBzYW5zLXNlcmlmO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYm94LXNoYWRvdzogM3B4IDNweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsgIC8qIEhpZGUgc2Nyb2xsYmFyIGZvciBJRSBhbmQgRWRnZSAqL1xcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOyAgLyogSGlkZSBzY3JvbGxiYXIgZm9yIEZpcmVmb3ggKi9cXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3ItY29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ucHJvamVjdC1zZWxlY3Rvci10aXRsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMyk7XFxuICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDAgMDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0Jywgc2Fucy1zZXJpZjtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3ItcHJvamVjdHMtYm94IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDE1cHg7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyAgLyogSGlkZSBzY3JvbGxiYXIgZm9yIElFIGFuZCBFZGdlICovXFxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7ICAvKiBIaWRlIHNjcm9sbGJhciBmb3IgRmlyZWZveCAqL1xcbn1cXG5cXG4vKiBIaWRlIHNjcm9sbGJhciBmb3IgQ2hyb21lLCBTYWZhcmkgYW5kIE9wZXJhICovXFxuLnByb2plY3Qtc2VsZWN0b3ItcHJvamVjdHMtYm94Ojotd2Via2l0LXNjcm9sbGJhciB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ucHJvamVjdC1zZWxlY3Rvci1idG5zLWNvbnRhaW5lciB7XFxuICBnYXA6IDE1cHg7XFxuICBtYXJnaW46IDM1cHggMCAyNXB4IDA7XFxufVxcblxcbi5wcm9qZWN0LXNlbGVjdG9yLWNhbmNlbC1idG4sIFxcbi5wcm9qZWN0LXNlbGVjdG9yLW9rLWJ0biB7XFxuICB3aWR0aDogMTA1cHg7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4OyAvKiBTcGVjaWZpYyAqL1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IC44NXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0cmFuc2l0aW9uOiAuNXM7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3ItY2FuY2VsLWJ0biB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1hY2NlbnQtMyk7XFxuICBjb2xvcjogdmFyKC0tYWNjZW50LTMpO1xcbn1cXG5cXG4ucHJvamVjdC1zZWxlY3Rvci1vay1idG4ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYWNjZW50LTEpO1xcbiAgY29sb3I6IHZhcigtLWFjY2VudC0xKTtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3ItY2FuY2VsLWJ0bjpob3ZlciwgXFxuLnByb2plY3Qtc2VsZWN0b3Itb2stYnRuOmhvdmVyIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ucHJvamVjdC1zZWxlY3Rvci1jYW5jZWwtYnRuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFjY2VudC0zKTtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3Itb2stYnRuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFjY2VudC0xKTtcXG59XFxuXFxuLnByb2plY3Qtb3B0aW9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTIpO1xcbiAgcGFkZGluZzogMTNweCAxMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xcbiAgdHJhbnNpdGlvbjogLjI1cztcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5wcm9qZWN0LW9wdGlvbjpob3ZlciB7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7XFxufVxcblxcbi5wcm9qZWN0LW9wdGlvbjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5wcm9qZWN0LW9wdGlvbi10aXRsZSB7XFxuICB3aWR0aDogMjA1cHg7IFxcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgb3ZlcmZsb3ctd3JhcDogYW55d2hlcmU7XFxufVxcblxcbi5wcm9qZWN0LW9wdGlvbi1jaGVja2JveCB7XFxuICBoZWlnaHQ6IDIwcHg7XFxuICB3aWR0aDogMjBweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgcmlnaHQ6IDE1cHg7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWFjY2VudC0xKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG59XFxuXFxuLnNlbGVjdGVkIC5wcm9qZWN0LW9wdGlvbi1jaGVja2JveCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxufVxcblxcbi5zZWxlY3RlZCAucHJvamVjdC1vcHRpb24tY2hlY2tib3g6OmJlZm9yZSB7XFxuICBoZWlnaHQ6IDEycHg7XFxuICB3aWR0aDogMTJweDtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk1MHB4KSB7XFxuICAucHJvamVjdC1zZWxlY3Rvci1jb250YWluZXIge1xcbiAgICBoZWlnaHQ6IG1pbig1MDBweCwgOTUlKTtcXG4gICAgd2lkdGg6IDM4MHB4O1xcbiAgfVxcblxcbiAgLnByb2plY3Qtc2VsZWN0b3ItdGl0bGUge1xcbiAgICBmb250LXNpemU6IDEuMjVyZW07XFxuICB9XFxuXFxuICAucHJvamVjdC1vcHRpb24tdGl0bGUge1xcbiAgICB3aWR0aDogMjY1cHg7IFxcbiAgfVxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0U2VsZWN0b3IvcHJvamVjdFNlbGVjdG9yLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osYUFBYTtFQUNiLGlDQUFpQztFQUNqQyxlQUFlO0VBQ2YsUUFBUTtFQUNSLFNBQVM7RUFDVCxnQ0FBZ0M7RUFDaEMsdUJBQXVCO0VBQ3ZCLCtCQUErQjtFQUMvQixrQkFBa0I7RUFDbEIsNkNBQTZDO0VBQzdDLGdCQUFnQjtFQUNoQix3QkFBd0IsR0FBRyxtQ0FBbUM7RUFDOUQscUJBQXFCLEdBQUcsK0JBQStCO0FBQ3pEOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsaUNBQWlDO0VBQ2pDLDBCQUEwQjtFQUMxQixZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLHFDQUFxQztBQUN2Qzs7QUFFQTtFQUNFLFdBQVc7RUFDWCxtQkFBbUI7RUFDbkIsYUFBYTtFQUNiLGdCQUFnQjtFQUNoQix3QkFBd0IsR0FBRyxtQ0FBbUM7RUFDOUQscUJBQXFCLEdBQUcsK0JBQStCO0FBQ3pEOztBQUVBLGdEQUFnRDtBQUNoRDtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFNBQVM7RUFDVCxxQkFBcUI7QUFDdkI7O0FBRUE7O0VBRUUsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixtQkFBbUIsRUFBRSxhQUFhO0VBQ2xDLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIscUNBQXFDO0VBQ3JDLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGVBQWU7RUFDZix1QkFBdUI7RUFDdkIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxpQ0FBaUM7RUFDakMsc0JBQXNCO0FBQ3hCOztBQUVBOztFQUVFLFlBQVk7RUFDWiwyQkFBMkI7RUFDM0IsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixpQ0FBaUM7RUFDakMsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsK0JBQStCO0VBQy9CLGtCQUFrQjtFQUNsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsNkNBQTZDO0VBQzdDLDJCQUEyQjtBQUM3Qjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFdBQVc7RUFDWCwyQkFBMkI7RUFDM0IsdUJBQXVCO0VBQ3ZCLGlDQUFpQztFQUNqQyxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxpQ0FBaUM7QUFDbkM7O0FBRUE7RUFDRSxZQUFZO0VBQ1osV0FBVztFQUNYLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7RUFDVCxnQ0FBZ0M7RUFDaEMseURBQW9DO0VBQ3BDLHNCQUFzQjtFQUN0Qiw0QkFBNEI7QUFDOUI7O0FBRUE7RUFDRTtJQUNFLHVCQUF1QjtJQUN2QixZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxZQUFZO0VBQ2Q7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucHJvamVjdC1zZWxlY3Rvci1jb250YWluZXIge1xcbiAgaGVpZ2h0OiBtaW4oNDI1cHgsIDk1JSk7XFxuICB3aWR0aDogMzM1cHg7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA2NXB4IDFmciA5NXB4O1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJveC1zaGFkb3c6IDNweCAzcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG4gIG92ZXJmbG93OiBzY3JvbGw7XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7ICAvKiBIaWRlIHNjcm9sbGJhciBmb3IgSUUgYW5kIEVkZ2UgKi9cXG4gIHNjcm9sbGJhci13aWR0aDogbm9uZTsgIC8qIEhpZGUgc2Nyb2xsYmFyIGZvciBGaXJlZm94ICovXFxufVxcblxcbi5wcm9qZWN0LXNlbGVjdG9yLWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3ItdGl0bGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTMpO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4IDhweCAwIDA7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LXNpemU6IDEuMnJlbTtcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XFxufVxcblxcbi5wcm9qZWN0LXNlbGVjdG9yLXByb2plY3RzLWJveCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxNXB4O1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsgIC8qIEhpZGUgc2Nyb2xsYmFyIGZvciBJRSBhbmQgRWRnZSAqL1xcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOyAgLyogSGlkZSBzY3JvbGxiYXIgZm9yIEZpcmVmb3ggKi9cXG59XFxuXFxuLyogSGlkZSBzY3JvbGxiYXIgZm9yIENocm9tZSwgU2FmYXJpIGFuZCBPcGVyYSAqL1xcbi5wcm9qZWN0LXNlbGVjdG9yLXByb2plY3RzLWJveDo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3ItYnRucy1jb250YWluZXIge1xcbiAgZ2FwOiAxNXB4O1xcbiAgbWFyZ2luOiAzNXB4IDAgMjVweCAwO1xcbn1cXG5cXG4ucHJvamVjdC1zZWxlY3Rvci1jYW5jZWwtYnRuLCBcXG4ucHJvamVjdC1zZWxlY3Rvci1vay1idG4ge1xcbiAgd2lkdGg6IDEwNXB4O1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDsgLyogU3BlY2lmaWMgKi9cXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAuODVyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgdHJhbnNpdGlvbjogLjVzO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5wcm9qZWN0LXNlbGVjdG9yLWNhbmNlbC1idG4ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYWNjZW50LTMpO1xcbiAgY29sb3I6IHZhcigtLWFjY2VudC0zKTtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3Itb2stYnRuIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWFjY2VudC0xKTtcXG4gIGNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxufVxcblxcbi5wcm9qZWN0LXNlbGVjdG9yLWNhbmNlbC1idG46aG92ZXIsIFxcbi5wcm9qZWN0LXNlbGVjdG9yLW9rLWJ0bjpob3ZlciB7XFxuICBjb2xvcjogd2hpdGU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCk7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLnByb2plY3Qtc2VsZWN0b3ItY2FuY2VsLWJ0bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMyk7XFxufVxcblxcbi5wcm9qZWN0LXNlbGVjdG9yLW9rLWJ0bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxufVxcblxcbi5wcm9qZWN0LW9wdGlvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogYXV0bztcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFjY2VudC0yKTtcXG4gIHBhZGRpbmc6IDEzcHggMTBweDtcXG4gIG1hcmdpbi1ib3R0b206IDhweDtcXG4gIHRyYW5zaXRpb246IC4yNXM7XFxuICBmb250LWZhbWlseTogJ0xhdG8nLCBzYW5zLXNlcmlmO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucHJvamVjdC1vcHRpb246aG92ZXIge1xcbiAgYm94LXNoYWRvdzogMnB4IDJweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xcHgpO1xcbn1cXG5cXG4ucHJvamVjdC1vcHRpb246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG5cXG4ucHJvamVjdC1vcHRpb24tdGl0bGUge1xcbiAgd2lkdGg6IDIwNXB4OyBcXG4gIG1hcmdpbi1yaWdodDogYXV0bztcXG4gIG92ZXJmbG93LXdyYXA6IGFueXdoZXJlO1xcbn1cXG5cXG4ucHJvamVjdC1vcHRpb24tY2hlY2tib3gge1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgd2lkdGg6IDIwcHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIHJpZ2h0OiAxNXB4O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1hY2NlbnQtMSk7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxufVxcblxcbi5zZWxlY3RlZCAucHJvamVjdC1vcHRpb24tY2hlY2tib3gge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbn1cXG5cXG4uc2VsZWN0ZWQgLnByb2plY3Qtb3B0aW9uLWNoZWNrYm94OjpiZWZvcmUge1xcbiAgaGVpZ2h0OiAxMnB4O1xcbiAgd2lkdGg6IDEycHg7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi4vY2hlY2sucG5nXFxcIik7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk1MHB4KSB7XFxuICAucHJvamVjdC1zZWxlY3Rvci1jb250YWluZXIge1xcbiAgICBoZWlnaHQ6IG1pbig1MDBweCwgOTUlKTtcXG4gICAgd2lkdGg6IDM4MHB4O1xcbiAgfVxcblxcbiAgLnByb2plY3Qtc2VsZWN0b3ItdGl0bGUge1xcbiAgICBmb250LXNpemU6IDEuMjVyZW07XFxuICB9XFxuXFxuICAucHJvamVjdC1vcHRpb24tdGl0bGUge1xcbiAgICB3aWR0aDogMjY1cHg7IFxcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZGV0YWlscy1jb250YWluZXIge1xcbiAgd2lkdGg6IDMxNXB4O1xcbiAgaGVpZ2h0OiBtaW4oNTA1cHgsIDk1JSk7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA0MHB4IDFmcjtcXG4gIGdhcDogMjBweDtcXG4gIHBhZGRpbmc6IDEwcHggMTVweDtcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJveC1zaGFkb3c6IDNweCAzcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyAgLyogSGlkZSBzY3JvbGxiYXIgZm9yIElFIGFuZCBFZGdlICovXFxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7ICAvKiBIaWRlIHNjcm9sbGJhciBmb3IgRmlyZWZveCAqL1xcbn1cXG5cXG4uZGV0YWlscy1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5kZXRhaWxzLXRvcC1jb250YWluZXIge1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmRldGFpbHMtYm90dG9tLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ2FwOiAyMHB4O1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA5MHB4IDIzMHB4IDYwcHg7XFxuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMCAxMHB4O1xcbn1cXG5cXG4uZGV0YWlscy1wcmlvcml0eSB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nOiAxcHggMTBweCAzcHggMTBweDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uZGV0YWlscy1wcmlvcml0eS1sIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWxvdy1wcmlvKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxvdy1wcmlvKTtcXG59XFxuXFxuLmRldGFpbHMtcHJpb3JpdHktbSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1tZWRpdW0tcHJpbyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tZWRpdW0tcHJpbyk7XFxufVxcblxcbi5kZXRhaWxzLXByaW9yaXR5LWgge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0taGlnaC1wcmlvKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpZ2gtcHJpbyk7XFxufVxcblxcbi5kZXRhaWxzLXRpdGxlLFxcbi5kZXRhaWxzLW5vdGVzIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBvdmVyZmxvdy13cmFwOiBhbnl3aGVyZTtcXG4gIG92ZXJmbG93OiBzY3JvbGw7XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7ICAvKiBJRSBhbmQgRWRnZSAqL1xcbiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOyAgLyogRmlyZWZveCAqL1xcbn1cXG5cXG4vKiBIaWRlIHNjcm9sbGJhciBmb3IgQ2hyb21lLCBTYWZhcmkgYW5kIE9wZXJhICovXFxuLmRldGFpbHMtdGl0bGU6Oi13ZWJraXQtc2Nyb2xsYmFyLFxcbi5kZXRhaWxzLW5vdGVzOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uZGV0YWlscy10aXRsZSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDEuMXJlbTtcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XFxufVxcblxcbi5kZXRhaWxzLW5vdGVzIHtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcblxcbi5kZXRhaWxzLWNsb3NlLWJ0biB7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1hY2NlbnQtMSk7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBjb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IC44NXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0cmFuc2l0aW9uOiAuNXM7XFxufVxcblxcbi5kZXRhaWxzLWNsb3NlLWJ0bjpob3ZlciB7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCk7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvdG9kb0RldGFpbHMvdG9kb0RldGFpbHMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsWUFBWTtFQUNaLHVCQUF1QjtFQUN2QixhQUFhO0VBQ2IsNEJBQTRCO0VBQzVCLFNBQVM7RUFDVCxrQkFBa0I7RUFDbEIsK0JBQStCO0VBQy9CLGtCQUFrQjtFQUNsQix1QkFBdUI7RUFDdkIsNkNBQTZDO0VBQzdDLGVBQWU7RUFDZixRQUFRO0VBQ1IsU0FBUztFQUNULGdDQUFnQztFQUNoQyxnQkFBZ0I7RUFDaEIsd0JBQXdCLEdBQUcsbUNBQW1DO0VBQzlELHFCQUFxQixHQUFHLCtCQUErQjtBQUN6RDs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztFQUNULG1DQUFtQztFQUNuQyxxQkFBcUI7RUFDckIsbUJBQW1CO0VBQ25CLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsMEJBQTBCO0VBQzFCLFlBQVk7RUFDWixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxpQ0FBaUM7RUFDakMsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0Usb0NBQW9DO0VBQ3BDLG9DQUFvQztBQUN0Qzs7QUFFQTtFQUNFLGtDQUFrQztFQUNsQyxrQ0FBa0M7QUFDcEM7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFlBQVk7RUFDWix1QkFBdUI7RUFDdkIsdUJBQXVCO0VBQ3ZCLGdCQUFnQjtFQUNoQix3QkFBd0IsR0FBRyxnQkFBZ0I7RUFDM0MscUJBQXFCLEdBQUcsWUFBWTtBQUN0Qzs7QUFFQSxnREFBZ0Q7QUFDaEQ7O0VBRUUsYUFBYTtBQUNmOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixxQ0FBcUM7QUFDdkM7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsaUNBQWlDO0VBQ2pDLGtCQUFrQjtFQUNsQixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLHFDQUFxQztFQUNyQyxpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGlDQUFpQztFQUNqQywyQkFBMkI7RUFDM0IsaUJBQWlCO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5kZXRhaWxzLWNvbnRhaW5lciB7XFxuICB3aWR0aDogMzE1cHg7XFxuICBoZWlnaHQ6IG1pbig1MDVweCwgOTUlKTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDQwcHggMWZyO1xcbiAgZ2FwOiAyMHB4O1xcbiAgcGFkZGluZzogMTBweCAxNXB4O1xcbiAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgYm94LXNoYWRvdzogM3B4IDNweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIG92ZXJmbG93OiBzY3JvbGw7XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7ICAvKiBIaWRlIHNjcm9sbGJhciBmb3IgSUUgYW5kIEVkZ2UgKi9cXG4gIHNjcm9sbGJhci13aWR0aDogbm9uZTsgIC8qIEhpZGUgc2Nyb2xsYmFyIGZvciBGaXJlZm94ICovXFxufVxcblxcbi5kZXRhaWxzLWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmRldGFpbHMtdG9wLWNvbnRhaW5lciB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZGV0YWlscy1ib3R0b20tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBnYXA6IDIwcHg7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDkwcHggMjMwcHggNjBweDtcXG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwIDEwcHg7XFxufVxcblxcbi5kZXRhaWxzLXByaW9yaXR5IHtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IDFweCAxMHB4IDNweCAxMHB4O1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5kZXRhaWxzLXByaW9yaXR5LWwge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbG93LXByaW8pO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbG93LXByaW8pO1xcbn1cXG5cXG4uZGV0YWlscy1wcmlvcml0eS1tIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW1lZGl1bS1wcmlvKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1lZGl1bS1wcmlvKTtcXG59XFxuXFxuLmRldGFpbHMtcHJpb3JpdHktaCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1oaWdoLXByaW8pO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taGlnaC1wcmlvKTtcXG59XFxuXFxuLmRldGFpbHMtdGl0bGUsXFxuLmRldGFpbHMtbm90ZXMge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG92ZXJmbG93LXdyYXA6IGFueXdoZXJlO1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsgIC8qIElFIGFuZCBFZGdlICovXFxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7ICAvKiBGaXJlZm94ICovXFxufVxcblxcbi8qIEhpZGUgc2Nyb2xsYmFyIGZvciBDaHJvbWUsIFNhZmFyaSBhbmQgT3BlcmEgKi9cXG4uZGV0YWlscy10aXRsZTo6LXdlYmtpdC1zY3JvbGxiYXIsXFxuLmRldGFpbHMtbm90ZXM6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5kZXRhaWxzLXRpdGxlIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMS4xcmVtO1xcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0Jywgc2Fucy1zZXJpZjtcXG59XFxuXFxuLmRldGFpbHMtbm90ZXMge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuXFxuLmRldGFpbHMtY2xvc2UtYnRuIHtcXG4gIHBhZGRpbmc6IDEwcHggMjBweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWFjY2VudC0xKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxuICBsZXR0ZXItc3BhY2luZzogMXB4O1xcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0Jywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogLjg1cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHRyYW5zaXRpb246IC41cztcXG59XFxuXFxuLmRldGFpbHMtY2xvc2UtYnRuOmhvdmVyIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFjY2VudC0xKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNXB4KTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYm94IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbn1cXG5cXG4uZm9ybS1jb250YWluZXIge1xcbiAgd2lkdGg6IDMyNXB4O1xcbiAgaGVpZ2h0OiBtaW4oNTg1cHgsIDk1JSk7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA2NXB4IDFmcjtcXG4gIGdhcDogNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3gtc2hhZG93OiAzcHggM3B4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICBmb250LWZhbWlseTogJ0xhdG8nLCBzYW5zLXNlcmlmO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsgIC8qIElFIGFuZCBFZGdlICovXFxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7ICAvKiBGaXJlZm94ICovXFxufVxcblxcbi8qIEhpZGUgc2Nyb2xsYmFyIGZvciBDaHJvbWUsIFNhZmFyaSBhbmQgT3BlcmEgKi9cXG4uZm9ybS1jb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5wcm9qZWN0LWZpZWxkcy1oZWlnaHQge1xcbiAgaGVpZ2h0OiBtaW4oMjQ1cHgsIDk1JSk7XFxufVxcblxcbi5mb3JtLXRvcC1jb250YWluZXIge1xcbiAgZ3JpZC1yb3c6IDEgLyAyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTMpO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4IDhweCAwIDA7XFxufVxcblxcbi5mb3JtLXRvZG8tYnRuLFxcbi5mb3JtLXByb2plY3QtYnRuIHtcXG4gIHdpZHRoOiBjbGFtcCg1MCUsIDEwMCUsIDEwMCUpO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItYm90dG9tOiA0cHggc29saWQgd2hpdGU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxuICB0cmFuc2l0aW9uOiAuNXM7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4uZm9ybS1maWVsZHMtY29udGFpbmVyIHtcXG4gIGdyaWQtcm93OiAyIC8gMztcXG59XFxuXFxuLmZvcm0tbWlkZGxlLWNvbnRhaW5lciB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXG4gIHBhZGRpbmc6IDBweCAxNXB4O1xcbn1cXG5cXG4uZm9ybS10aXRsZS1pbnB1dCxcXG4uZm9ybS1ub3Rlcy1pbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1ib3R0b206IDRweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMDUpO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHJlc2l6ZTogbm9uZTtcXG4gIHBhZGRpbmc6IDE1cHggMTBweCAxMHB4O1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsgIC8qIElFIGFuZCBFZGdlICovXFxuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7ICAvKiBGaXJlZm94ICovXFxufVxcblxcbi8qIEhpZGUgc2Nyb2xsYmFyIGZvciBDaHJvbWUsIFNhZmFyaSBhbmQgT3BlcmEgKi9cXG4uZm9ybS10aXRsZS1pbnB1dDo6LXdlYmtpdC1zY3JvbGxiYXIsXFxuLmZvcm0tbm90ZXMtaW5wdXQ6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5mb3JtLXRpdGxlLWlucHV0IHtcXG4gIGhlaWdodDogNzVweDtcXG59XFxuXFxuLmZvcm0tbm90ZXMtaW5wdXQge1xcbiAgaGVpZ2h0OiAxNjVweDtcXG59XFxuXFxuLmZvcm0tZHVlLWRhdGUtY29udGFpbmVyLFxcbi5mb3JtLXByaW9yaXR5LWNvbnRhaW5lciB7XFxuICBnYXA6IDEzcHg7XFxuICBtYXJnaW4tdG9wOiAyNHB4O1xcbn1cXG5cXG4uZm9ybS1kdWUtZGF0ZS1sYWJlbCB7XFxuICBmb250LXNpemU6IDEuMDVyZW07XFxufVxcblxcbi5mb3JtLWR1ZS1kYXRlLWlucHV0IHtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMjYsIDE2NywgMTI1LCAwLjUpO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4uZm9ybS1wcmlvcml0eS10aXRsZSB7XFxuICBmb250LXNpemU6IDEuMTVyZW07XFxufVxcblxcbi5mb3JtLXByaW9yaXR5LW9wdGlvbnMtY29udGFpbmVyIHtcXG4gIGdhcDogNHB4O1xcbn1cXG5cXG4uZm9ybS1wcmlvcml0eS1sYWJlbCB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nOiAxcHggN3B4IDNweCA3cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0cmFuc2l0aW9uOiAuMjVzO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5sLXByaW8tbGFiZWwge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbG93LXByaW8pO1xcbiAgY29sb3I6IHZhcigtLWxvdy1wcmlvKTtcXG59XFxuXFxuLm0tcHJpby1sYWJlbCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1tZWRpdW0tcHJpbyk7XFxuICBjb2xvcjogdmFyKC0tbWVkaXVtLXByaW8pO1xcbn1cXG5cXG4uaC1wcmlvLWxhYmVsIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWhpZ2gtcHJpbyk7XFxuICBjb2xvcjogdmFyKC0taGlnaC1wcmlvKTtcXG4gIG1hcmdpbi1yaWdodDogMThweDtcXG59XFxuXFxuLmZvcm0tcHJpb3JpdHktcmFkaW86Y2hlY2tlZCArIC5sLXByaW8tbGFiZWwge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbG93LXByaW8pO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbG93LXByaW8pO1xcbn1cXG5cXG4uZm9ybS1wcmlvcml0eS1yYWRpbzpjaGVja2VkICsgLm0tcHJpby1sYWJlbCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1tZWRpdW0tcHJpbyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tZWRpdW0tcHJpbyk7XFxufVxcblxcbi5mb3JtLXByaW9yaXR5LXJhZGlvOmNoZWNrZWQgKyAuaC1wcmlvLWxhYmVsIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWhpZ2gtcHJpbyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1oaWdoLXByaW8pO1xcbn1cXG5cXG4uZm9ybS1wcmlvcml0eS1yYWRpbzpjaGVja2VkICsgLmZvcm0tcHJpb3JpdHktbGFiZWwge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4uZm9ybS1ib3R0b20tY29udGFpbmVyIHtcXG4gIGdhcDogMTVweDtcXG4gIG1hcmdpbjogMzVweCAwIDI1cHggMDtcXG59XFxuXFxuLmZvcm0tb2stYnRuLFxcbi5mb3JtLWNhbmNlbC1idG4ge1xcbiAgd2lkdGg6IDEwNXB4O1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IC44NXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0cmFuc2l0aW9uOiAuNXM7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmZvcm0tb2stYnRuIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWFjY2VudC0xKTtcXG4gIGNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxufVxcblxcbi5mb3JtLWNhbmNlbC1idG4ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYWNjZW50LTMpO1xcbiAgY29sb3I6IHZhcigtLWFjY2VudC0zKTtcXG59XFxuXFxuLmZvcm0tb2stYnRuOmhvdmVyLFxcbi5mb3JtLWNhbmNlbC1idG46aG92ZXIge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01cHgpO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5mb3JtLW9rLWJ0bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMSk7XFxufVxcblxcbi5mb3JtLWNhbmNlbC1idG46aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTMpO1xcbn1cXG5cXG4uYm9yZGVyLWJ0bS1iIHtcXG4gIGJvcmRlci1ib3R0b206IDRweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuNzUpO1xcbn1cXG5cXG4uYm9yZGVyLWJ0bS13IHtcXG4gIGJvcmRlci1ib3R0b206IDRweCBzb2xpZCB3aGl0ZTtcXG59XFxuXFxuLm5vLXBvaW50ZXItZXZlbnRzIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy90b2RvRm9ybS90b2RvRm9ybS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixNQUFNO0VBQ04sU0FBUztFQUNULE9BQU87RUFDUCxRQUFRO0FBQ1Y7O0FBRUE7RUFDRSxZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLGFBQWE7RUFDYiw0QkFBNEI7RUFDNUIsUUFBUTtFQUNSLHVCQUF1QjtFQUN2Qiw2Q0FBNkM7RUFDN0MsK0JBQStCO0VBQy9CLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsd0JBQXdCLEdBQUcsZ0JBQWdCO0VBQzNDLHFCQUFxQixHQUFHLFlBQVk7QUFDdEM7O0FBRUEsZ0RBQWdEO0FBQ2hEO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlDQUFpQztFQUNqQywwQkFBMEI7QUFDNUI7O0FBRUE7O0VBRUUsNkJBQTZCO0VBQzdCLFlBQVk7RUFDWixZQUFZO0VBQ1osNkJBQTZCO0VBQzdCLFlBQVk7RUFDWiw4QkFBOEI7RUFDOUIsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZUFBZTtFQUNmLHFDQUFxQztBQUN2Qzs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsc0JBQXNCO0VBQ3RCLGlCQUFpQjtBQUNuQjs7QUFFQTs7RUFFRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLDRDQUE0QztFQUM1QyxhQUFhO0VBQ2IsWUFBWTtFQUNaLHVCQUF1QjtFQUN2QixnQkFBZ0I7RUFDaEIsd0JBQXdCLEdBQUcsZ0JBQWdCO0VBQzNDLHFCQUFxQixHQUFHLFlBQVk7QUFDdEM7O0FBRUEsZ0RBQWdEO0FBQ2hEOztFQUVFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTs7RUFFRSxTQUFTO0VBQ1QsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHlDQUF5QztFQUN6QyxhQUFhO0VBQ2IsaUJBQWlCO0VBQ2pCLGVBQWU7RUFDZixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxRQUFRO0FBQ1Y7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxvQ0FBb0M7RUFDcEMseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0Usa0NBQWtDO0VBQ2xDLHVCQUF1QjtFQUN2QixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxpQ0FBaUM7RUFDakMsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0Usb0NBQW9DO0VBQ3BDLG9DQUFvQztBQUN0Qzs7QUFFQTtFQUNFLGtDQUFrQztFQUNsQyxrQ0FBa0M7QUFDcEM7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsWUFBWTtBQUNkOztBQUVBO0VBQ0UsU0FBUztFQUNULHFCQUFxQjtBQUN2Qjs7QUFFQTs7RUFFRSxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIscUNBQXFDO0VBQ3JDLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGVBQWU7RUFDZix1QkFBdUI7RUFDdkIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxpQ0FBaUM7RUFDakMsc0JBQXNCO0FBQ3hCOztBQUVBOztFQUVFLFlBQVk7RUFDWiwyQkFBMkI7RUFDM0IsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UsNENBQTRDO0FBQzlDOztBQUVBO0VBQ0UsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0Usb0JBQW9CO0FBQ3RCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5ib3gge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxufVxcblxcbi5mb3JtLWNvbnRhaW5lciB7XFxuICB3aWR0aDogMzI1cHg7XFxuICBoZWlnaHQ6IG1pbig1ODVweCwgOTUlKTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDY1cHggMWZyO1xcbiAgZ2FwOiA1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJveC1zaGFkb3c6IDNweCAzcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTtcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyAgLyogSUUgYW5kIEVkZ2UgKi9cXG4gIHNjcm9sbGJhci13aWR0aDogbm9uZTsgIC8qIEZpcmVmb3ggKi9cXG59XFxuXFxuLyogSGlkZSBzY3JvbGxiYXIgZm9yIENocm9tZSwgU2FmYXJpIGFuZCBPcGVyYSAqL1xcbi5mb3JtLWNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnByb2plY3QtZmllbGRzLWhlaWdodCB7XFxuICBoZWlnaHQ6IG1pbigyNDVweCwgOTUlKTtcXG59XFxuXFxuLmZvcm0tdG9wLWNvbnRhaW5lciB7XFxuICBncmlkLXJvdzogMSAvIDI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMyk7XFxuICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDAgMDtcXG59XFxuXFxuLmZvcm0tdG9kby1idG4sXFxuLmZvcm0tcHJvamVjdC1idG4ge1xcbiAgd2lkdGg6IGNsYW1wKDUwJSwgMTAwJSwgMTAwJSk7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1ib3R0b206IDRweCBzb2xpZCB3aGl0ZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBmb250LXNpemU6IDEuMnJlbTtcXG4gIHRyYW5zaXRpb246IC41cztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIHNhbnMtc2VyaWY7XFxufVxcblxcbi5mb3JtLWZpZWxkcy1jb250YWluZXIge1xcbiAgZ3JpZC1yb3c6IDIgLyAzO1xcbn1cXG5cXG4uZm9ybS1taWRkbGUtY29udGFpbmVyIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xcbiAgcGFkZGluZzogMHB4IDE1cHg7XFxufVxcblxcbi5mb3JtLXRpdGxlLWlucHV0LFxcbi5mb3JtLW5vdGVzLWlucHV0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogNHB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgcmVzaXplOiBub25lO1xcbiAgcGFkZGluZzogMTVweCAxMHB4IDEwcHg7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyAgLyogSUUgYW5kIEVkZ2UgKi9cXG4gIHNjcm9sbGJhci13aWR0aDogbm9uZTsgIC8qIEZpcmVmb3ggKi9cXG59XFxuXFxuLyogSGlkZSBzY3JvbGxiYXIgZm9yIENocm9tZSwgU2FmYXJpIGFuZCBPcGVyYSAqL1xcbi5mb3JtLXRpdGxlLWlucHV0Ojotd2Via2l0LXNjcm9sbGJhcixcXG4uZm9ybS1ub3Rlcy1pbnB1dDo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmZvcm0tdGl0bGUtaW5wdXQge1xcbiAgaGVpZ2h0OiA3NXB4O1xcbn1cXG5cXG4uZm9ybS1ub3Rlcy1pbnB1dCB7XFxuICBoZWlnaHQ6IDE2NXB4O1xcbn1cXG5cXG4uZm9ybS1kdWUtZGF0ZS1jb250YWluZXIsXFxuLmZvcm0tcHJpb3JpdHktY29udGFpbmVyIHtcXG4gIGdhcDogMTNweDtcXG4gIG1hcmdpbi10b3A6IDI0cHg7XFxufVxcblxcbi5mb3JtLWR1ZS1kYXRlLWxhYmVsIHtcXG4gIGZvbnQtc2l6ZTogMS4wNXJlbTtcXG59XFxuXFxuLmZvcm0tZHVlLWRhdGUtaW5wdXQge1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgcmdiYSgyNiwgMTY3LCAxMjUsIDAuNSk7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi5mb3JtLXByaW9yaXR5LXRpdGxlIHtcXG4gIGZvbnQtc2l6ZTogMS4xNXJlbTtcXG59XFxuXFxuLmZvcm0tcHJpb3JpdHktb3B0aW9ucy1jb250YWluZXIge1xcbiAgZ2FwOiA0cHg7XFxufVxcblxcbi5mb3JtLXByaW9yaXR5LWxhYmVsIHtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IDFweCA3cHggM3B4IDdweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRyYW5zaXRpb246IC4yNXM7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLmwtcHJpby1sYWJlbCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1sb3ctcHJpbyk7XFxuICBjb2xvcjogdmFyKC0tbG93LXByaW8pO1xcbn1cXG5cXG4ubS1wcmlvLWxhYmVsIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW1lZGl1bS1wcmlvKTtcXG4gIGNvbG9yOiB2YXIoLS1tZWRpdW0tcHJpbyk7XFxufVxcblxcbi5oLXByaW8tbGFiZWwge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0taGlnaC1wcmlvKTtcXG4gIGNvbG9yOiB2YXIoLS1oaWdoLXByaW8pO1xcbiAgbWFyZ2luLXJpZ2h0OiAxOHB4O1xcbn1cXG5cXG4uZm9ybS1wcmlvcml0eS1yYWRpbzpjaGVja2VkICsgLmwtcHJpby1sYWJlbCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1sb3ctcHJpbyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sb3ctcHJpbyk7XFxufVxcblxcbi5mb3JtLXByaW9yaXR5LXJhZGlvOmNoZWNrZWQgKyAubS1wcmlvLWxhYmVsIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW1lZGl1bS1wcmlvKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1lZGl1bS1wcmlvKTtcXG59XFxuXFxuLmZvcm0tcHJpb3JpdHktcmFkaW86Y2hlY2tlZCArIC5oLXByaW8tbGFiZWwge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0taGlnaC1wcmlvKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpZ2gtcHJpbyk7XFxufVxcblxcbi5mb3JtLXByaW9yaXR5LXJhZGlvOmNoZWNrZWQgKyAuZm9ybS1wcmlvcml0eS1sYWJlbCB7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XFxuICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi5mb3JtLWJvdHRvbS1jb250YWluZXIge1xcbiAgZ2FwOiAxNXB4O1xcbiAgbWFyZ2luOiAzNXB4IDAgMjVweCAwO1xcbn1cXG5cXG4uZm9ybS1vay1idG4sXFxuLmZvcm0tY2FuY2VsLWJ0biB7XFxuICB3aWR0aDogMTA1cHg7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBsZXR0ZXItc3BhY2luZzogMXB4O1xcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0Jywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogLjg1cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHRyYW5zaXRpb246IC41cztcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZm9ybS1vay1idG4ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYWNjZW50LTEpO1xcbiAgY29sb3I6IHZhcigtLWFjY2VudC0xKTtcXG59XFxuXFxuLmZvcm0tY2FuY2VsLWJ0biB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1hY2NlbnQtMyk7XFxuICBjb2xvcjogdmFyKC0tYWNjZW50LTMpO1xcbn1cXG5cXG4uZm9ybS1vay1idG46aG92ZXIsXFxuLmZvcm0tY2FuY2VsLWJ0bjpob3ZlciB7XFxuICBjb2xvcjogd2hpdGU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCk7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLmZvcm0tb2stYnRuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFjY2VudC0xKTtcXG59XFxuXFxuLmZvcm0tY2FuY2VsLWJ0bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtMyk7XFxufVxcblxcbi5ib3JkZXItYnRtLWIge1xcbiAgYm9yZGVyLWJvdHRvbTogNHB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC43NSk7XFxufVxcblxcbi5ib3JkZXItYnRtLXcge1xcbiAgYm9yZGVyLWJvdHRvbTogNHB4IHNvbGlkIHdoaXRlO1xcbn1cXG5cXG4ubm8tcG9pbnRlci1ldmVudHMge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi9jaGVjay5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuaXRlbS1jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTIpO1xcbiAgcGFkZGluZzogMTRweCAxMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xcbiAgdHJhbnNpdGlvbjogLjI1cztcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5pdGVtLWNvbnRhaW5lcjpob3ZlciB7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7XFxufVxcblxcbi5pdGVtLWNvbnRhaW5lcjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5pdGVtLWNvbnRhaW5lcjpoYXMoLml0ZW0tY2hlY2tib3guY2hlY2tlZCk6OmJlZm9yZSB7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gMzRweCAtIDM0cHgpO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAzNHB4O1xcbiAgcmlnaHQ6IDM0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0MCwgMjQwLCAyNDAsIDAuOCk7XFxuICBmaWx0ZXI6IGJsdXIoMXB4KTtcXG59XFxuXFxuLml0ZW0tbGVmdC1jb250YWluZXIge1xcbiAgZ2FwOiAxMnB4O1xcbn1cXG5cXG4uaXRlbS1yaWdodC1jb250YWluZXIge1xcbiAgZ2FwOiAxNHB4O1xcbn1cXG5cXG4uaXRlbS1jaGVja2JveCB7XFxuICB3aWR0aDogMTlweDtcXG4gIGhlaWdodDogMTlweDtcXG4gIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tYWNjZW50LTEpO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBmb250LXNpemU6IDEuMnJlbTtcXG59XFxuXFxuLmNoZWNrZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbn1cXG5cXG4uY2hlY2tlZC5pdGVtLWNoZWNrYm94OjpiZWZvcmUge1xcbiAgd2lkdGg6IDExcHg7XFxuICBoZWlnaHQ6IDExcHg7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxufVxcblxcbi5uby1wb2ludGVyLWV2ZW50cyB7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIGN1cnNvcjogYXV0bztcXG59XFxuXFxuLml0ZW0tY29udGFpbmVyLm5vLXBvaW50ZXItZXZlbnRzIC5pdGVtLWNoZWNrYm94LFxcbi5pdGVtLWNvbnRhaW5lci5uby1wb2ludGVyLWV2ZW50cyAuaXRlbS10cmFzaC1pY29uIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5pdGVtLXRpdGxlIHtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIG92ZXJmbG93LXdyYXA6IGFueXdoZXJlO1xcbn1cXG5cXG4uaXRlbS1kdWUtZGF0ZSB7XFxuICBmb250LXNpemU6IC45cmVtO1xcbn1cXG5cXG4uaXRlbS1lZGl0LWljb24ge1xcbiAgbWFyZ2luLWxlZnQ6IDJweDtcXG59XFxuXFxuLml0ZW0tZWRpdC1pY29uLFxcbi5pdGVtLW1vdmUtaWNvbixcXG4uaXRlbS10cmFzaC1pY29uICB7XFxuICB3aWR0aDogdmFyKC0taWNvbi13aWR0aC0xKTtcXG4gIGhlaWdodDogdmFyKC0taWNvbi1oZWlnaHQtMSk7XFxuICB0cmFuc2l0aW9uOiAuMzVzO1xcbn1cXG5cXG4uaXRlbS1lZGl0LWljb246aG92ZXIsXFxuLml0ZW0tbW92ZS1pY29uOmhvdmVyLFxcbi5pdGVtLXRyYXNoLWljb246aG92ZXIge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xcbn1cXG5cXG4uaXRlbS1jb250YWluZXIsXFxuLml0ZW0tY2hlY2tib3gsXFxuLml0ZW0tZWRpdC1pY29uLFxcbi5pdGVtLW1vdmUtaWNvbixcXG4uaXRlbS10cmFzaC1pY29uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDM4MHB4KSB7XFxuICAuaXRlbS10aXRsZSB7XFxuICAgIHdpZHRoOiAxMjVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDQwMHB4KSB7XFxuICAuaXRlbS10aXRsZSB7XFxuICAgIHdpZHRoOiAxNDVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDQ1MHB4KSB7XFxuICAuaXRlbS10aXRsZSB7XFxuICAgIHdpZHRoOiAxODVweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDUwMHB4KSB7XFxuICAuaXRlbS10aXRsZSB7XFxuICAgIHdpZHRoOiAyNDBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDY1MHB4KSB7XFxuICAuaXRlbS10aXRsZSB7XFxuICAgIHdpZHRoOiAxNzVweDtcXG4gIH1cXG4gIFxcbiAgLml0ZW0tcmlnaHQtY29udGFpbmVyIHtcXG4gICAgZ2FwOiAxOHB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzUwcHgpIHtcXG4gIC5pdGVtLXRpdGxlIHtcXG4gICAgd2lkdGg6IDI3MHB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogODUwcHgpIHtcXG4gIC5pdGVtLXRpdGxlIHtcXG4gICAgd2lkdGg6IDMzMHB4O1xcbiAgfVxcbn1cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy90b2RvSXRlbS90b2RvSXRlbS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsOEJBQThCO0VBQzlCLG1CQUFtQjtFQUNuQixTQUFTO0VBQ1QsaUNBQWlDO0VBQ2pDLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLCtCQUErQjtFQUMvQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSw2Q0FBNkM7RUFDN0MsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsK0JBQStCO0VBQy9CLFlBQVk7RUFDWixXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixXQUFXO0VBQ1gsMENBQTBDO0VBQzFDLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGlDQUFpQztFQUNqQyxrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGlDQUFpQztBQUNuQzs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osV0FBVztFQUNYLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsU0FBUztFQUNULGdDQUFnQztFQUNoQyx5REFBb0M7RUFDcEMsc0JBQXNCO0VBQ3RCLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLG9CQUFvQjtFQUNwQixZQUFZO0FBQ2Q7O0FBRUE7O0VBRUUsbUJBQW1CO0VBQ25CLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osZUFBZTtFQUNmLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTs7O0VBR0UsMEJBQTBCO0VBQzFCLDRCQUE0QjtFQUM1QixnQkFBZ0I7QUFDbEI7O0FBRUE7OztFQUdFLHFCQUFxQjtBQUN2Qjs7QUFFQTs7Ozs7RUFLRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0U7SUFDRSxZQUFZO0VBQ2Q7QUFDRjs7QUFFQTtFQUNFO0lBQ0UsWUFBWTtFQUNkO0FBQ0Y7O0FBRUE7RUFDRTtJQUNFLFlBQVk7RUFDZDtBQUNGOztBQUVBO0VBQ0U7SUFDRSxZQUFZO0VBQ2Q7QUFDRjs7QUFFQTtFQUNFO0lBQ0UsWUFBWTtFQUNkOztFQUVBO0lBQ0UsU0FBUztFQUNYO0FBQ0Y7O0FBRUE7RUFDRTtJQUNFLFlBQVk7RUFDZDtBQUNGOztBQUVBO0VBQ0U7SUFDRSxZQUFZO0VBQ2Q7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaXRlbS1jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTIpO1xcbiAgcGFkZGluZzogMTRweCAxMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xcbiAgdHJhbnNpdGlvbjogLjI1cztcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5pdGVtLWNvbnRhaW5lcjpob3ZlciB7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7XFxufVxcblxcbi5pdGVtLWNvbnRhaW5lcjpsYXN0LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcblxcbi5pdGVtLWNvbnRhaW5lcjpoYXMoLml0ZW0tY2hlY2tib3guY2hlY2tlZCk6OmJlZm9yZSB7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gMzRweCAtIDM0cHgpO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAzNHB4O1xcbiAgcmlnaHQ6IDM0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0MCwgMjQwLCAyNDAsIDAuOCk7XFxuICBmaWx0ZXI6IGJsdXIoMXB4KTtcXG59XFxuXFxuLml0ZW0tbGVmdC1jb250YWluZXIge1xcbiAgZ2FwOiAxMnB4O1xcbn1cXG5cXG4uaXRlbS1yaWdodC1jb250YWluZXIge1xcbiAgZ2FwOiAxNHB4O1xcbn1cXG5cXG4uaXRlbS1jaGVja2JveCB7XFxuICB3aWR0aDogMTlweDtcXG4gIGhlaWdodDogMTlweDtcXG4gIHBvc2l0aW9uOnJlbGF0aXZlO1xcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tYWNjZW50LTEpO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBmb250LXNpemU6IDEuMnJlbTtcXG59XFxuXFxuLmNoZWNrZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LTEpO1xcbn1cXG5cXG4uY2hlY2tlZC5pdGVtLWNoZWNrYm94OjpiZWZvcmUge1xcbiAgd2lkdGg6IDExcHg7XFxuICBoZWlnaHQ6IDExcHg7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi4vY2hlY2sucG5nXFxcIik7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG59XFxuXFxuLm5vLXBvaW50ZXItZXZlbnRzIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgY3Vyc29yOiBhdXRvO1xcbn1cXG5cXG4uaXRlbS1jb250YWluZXIubm8tcG9pbnRlci1ldmVudHMgLml0ZW0tY2hlY2tib3gsXFxuLml0ZW0tY29udGFpbmVyLm5vLXBvaW50ZXItZXZlbnRzIC5pdGVtLXRyYXNoLWljb24ge1xcbiAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLml0ZW0tdGl0bGUge1xcbiAgd2lkdGg6IDEwMHB4O1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgb3ZlcmZsb3ctd3JhcDogYW55d2hlcmU7XFxufVxcblxcbi5pdGVtLWR1ZS1kYXRlIHtcXG4gIGZvbnQtc2l6ZTogLjlyZW07XFxufVxcblxcbi5pdGVtLWVkaXQtaWNvbiB7XFxuICBtYXJnaW4tbGVmdDogMnB4O1xcbn1cXG5cXG4uaXRlbS1lZGl0LWljb24sXFxuLml0ZW0tbW92ZS1pY29uLFxcbi5pdGVtLXRyYXNoLWljb24gIHtcXG4gIHdpZHRoOiB2YXIoLS1pY29uLXdpZHRoLTEpO1xcbiAgaGVpZ2h0OiB2YXIoLS1pY29uLWhlaWdodC0xKTtcXG4gIHRyYW5zaXRpb246IC4zNXM7XFxufVxcblxcbi5pdGVtLWVkaXQtaWNvbjpob3ZlcixcXG4uaXRlbS1tb3ZlLWljb246aG92ZXIsXFxuLml0ZW0tdHJhc2gtaWNvbjpob3ZlciB7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XFxufVxcblxcbi5pdGVtLWNvbnRhaW5lcixcXG4uaXRlbS1jaGVja2JveCxcXG4uaXRlbS1lZGl0LWljb24sXFxuLml0ZW0tbW92ZS1pY29uLFxcbi5pdGVtLXRyYXNoLWljb24ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMzgwcHgpIHtcXG4gIC5pdGVtLXRpdGxlIHtcXG4gICAgd2lkdGg6IDEyNXB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNDAwcHgpIHtcXG4gIC5pdGVtLXRpdGxlIHtcXG4gICAgd2lkdGg6IDE0NXB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNDUwcHgpIHtcXG4gIC5pdGVtLXRpdGxlIHtcXG4gICAgd2lkdGg6IDE4NXB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTAwcHgpIHtcXG4gIC5pdGVtLXRpdGxlIHtcXG4gICAgd2lkdGg6IDI0MHB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNjUwcHgpIHtcXG4gIC5pdGVtLXRpdGxlIHtcXG4gICAgd2lkdGg6IDE3NXB4O1xcbiAgfVxcbiAgXFxuICAuaXRlbS1yaWdodC1jb250YWluZXIge1xcbiAgICBnYXA6IDE4cHg7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA3NTBweCkge1xcbiAgLml0ZW0tdGl0bGUge1xcbiAgICB3aWR0aDogMjcwcHg7XFxuICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA4NTBweCkge1xcbiAgLml0ZW0tdGl0bGUge1xcbiAgICB3aWR0aDogMzMwcHg7XFxuICB9XFxufVxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi9iZy13YWxscGFwZXIuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1BbGF0c2kmZmFtaWx5PUpldEJyYWlucytNb25vOndnaHRAMjAwJmZhbWlseT1MYXRvOndnaHRAMTAwOzMwMCZmYW1pbHk9TG9ic3RlciZmYW1pbHk9TW9udHNlcnJhdCtBbHRlcm5hdGVzOndnaHRAMzAwOzQwMCZmYW1pbHk9TW9udHNlcnJhdDp3Z2h0QDIwMDszMDA7NDAwJmZhbWlseT1QVCtNb25vJmZhbWlseT1QcmVzcytTdGFydCsyUCZkaXNwbGF5PXN3YXApO1wiXSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3Qge1xcbiAgLS1hY2NlbnQtMTogcmdiKDI2LCAxNjcsIDEyNSk7XFxuICAtLWFjY2VudC0yOiByZ2IoMjQwLCAyNDAsIDI0MCk7XFxuICAtLWFjY2VudC0zOiAjY2M3ZTk3O1xcbiAgLS1hY2NlbnQtNDogcmdiKDM1LCAzNSwgMzUpO1xcbiAgLS1hY2NlbnQtNTogcmdiYSgyMjAsIDIyMCwgMjIwLCAwLjUpO1xcbiAgLS1hY2NlbnQtNjogcmdiYSgyMDUsIDIwNSwgMjA1LCAwLjY1KTtcXG4gIC0tYWNjZW50LTc6IHJnYigyNTUsIDYyLCAxMDEpO1xcbiAgLS1sb3ctcHJpbzogcmdiKDQwLCAyMDcsIDQwKTtcXG4gIC0tbWVkaXVtLXByaW86IHJnYigyNTUsIDE4NywgNjApO1xcbiAgLS1oaWdoLXByaW86IHJnYigyNTUsIDcwLCA3MCk7XFxuICAtLWljb24td2lkdGgtMTogMjBweDtcXG4gIC0taWNvbi1oZWlnaHQtMTogMjBweDtcXG59XFxuXFxuLmFwcC1jb250YWluZXIge1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbnRhaW5lci9hcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0UsNkJBQTZCO0VBQzdCLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsMkJBQTJCO0VBQzNCLG9DQUFvQztFQUNwQyxxQ0FBcUM7RUFDckMsNkJBQTZCO0VBQzdCLDRCQUE0QjtFQUM1QixnQ0FBZ0M7RUFDaEMsNkJBQTZCO0VBQzdCLG9CQUFvQjtFQUNwQixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IseURBQTJDO0VBQzNDLHNCQUFzQjtFQUN0Qiw0QkFBNEI7RUFDNUIsMkJBQTJCO0FBQzdCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUFsYXRzaSZmYW1pbHk9SmV0QnJhaW5zK01vbm86d2dodEAyMDAmZmFtaWx5PUxhdG86d2dodEAxMDA7MzAwJmZhbWlseT1Mb2JzdGVyJmZhbWlseT1Nb250c2VycmF0K0FsdGVybmF0ZXM6d2dodEAzMDA7NDAwJmZhbWlseT1Nb250c2VycmF0OndnaHRAMjAwOzMwMDs0MDAmZmFtaWx5PVBUK01vbm8mZmFtaWx5PVByZXNzK1N0YXJ0KzJQJmRpc3BsYXk9c3dhcCcpO1xcblxcbjpyb290IHtcXG4gIC0tYWNjZW50LTE6IHJnYigyNiwgMTY3LCAxMjUpO1xcbiAgLS1hY2NlbnQtMjogcmdiKDI0MCwgMjQwLCAyNDApO1xcbiAgLS1hY2NlbnQtMzogI2NjN2U5NztcXG4gIC0tYWNjZW50LTQ6IHJnYigzNSwgMzUsIDM1KTtcXG4gIC0tYWNjZW50LTU6IHJnYmEoMjIwLCAyMjAsIDIyMCwgMC41KTtcXG4gIC0tYWNjZW50LTY6IHJnYmEoMjA1LCAyMDUsIDIwNSwgMC42NSk7XFxuICAtLWFjY2VudC03OiByZ2IoMjU1LCA2MiwgMTAxKTtcXG4gIC0tbG93LXByaW86IHJnYig0MCwgMjA3LCA0MCk7XFxuICAtLW1lZGl1bS1wcmlvOiByZ2IoMjU1LCAxODcsIDYwKTtcXG4gIC0taGlnaC1wcmlvOiByZ2IoMjU1LCA3MCwgNzApO1xcbiAgLS1pY29uLXdpZHRoLTE6IDIwcHg7XFxuICAtLWljb24taGVpZ2h0LTE6IDIwcHg7XFxufVxcblxcbi5hcHAtY29udGFpbmVyIHtcXG4gIGhlaWdodDogMTAwdmg7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi4vYmctd2FsbHBhcGVyLmpwZ1xcXCIpO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4vKiBVdGlsaXRpZXMgKi9cXG4uZmxleCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uZmxleC1jb2x1bW4ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5jZW50ZXIge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5kaXNhYmxlZCB7XFxuICBmaWx0ZXI6IGJsdXIoMXB4KSBncmF5c2NhbGUoNTAlKSBicmlnaHRuZXNzKDUwJSk7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7O0VBR0UsU0FBUztFQUNULFVBQVU7RUFDVixzQkFBc0I7QUFDeEI7O0FBRUEsY0FBYztBQUNkO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxnREFBZ0Q7RUFDaEQsb0JBQW9CO0FBQ3RCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4vKiBVdGlsaXRpZXMgKi9cXG4uZmxleCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uZmxleC1jb2x1bW4ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5jZW50ZXIge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5kaXNhYmxlZCB7XFxuICBmaWx0ZXI6IGJsdXIoMXB4KSBncmF5c2NhbGUoNTAlKSBicmlnaHRuZXNzKDUwJSk7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTsgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FwcC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FwcC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29udGVudEJveC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbnRlbnRCb3guY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25hdmJhci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25hdmJhci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdG9kb0Zvcm0uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi90b2RvRm9ybS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZihhcmd1bWVudCkgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNzdHJpbmctYXJndW1lbnRzXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJ2YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG5ld09wdGlvbnMpIHtcbiAgZGVmYXVsdE9wdGlvbnMgPSBuZXdPcHRpb25zO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgd2Vla1xuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBTdW4gQXVnIDMxIDIwMTQgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSwgdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSwgeyB3ZWVrU3RhcnRzT246IDEgfSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZldlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcblxuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHN0YXJ0T2ZXZWVrIGZyb20gXCIuLi9zdGFydE9mV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc1NhbWVXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIHdlZWsgKGFuZCBtb250aCBhbmQgeWVhcik/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIHdlZWsgKGFuZCBtb250aCBhbmQgeWVhcik/XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIHdlZWsgKGFuZCBtb250aCBhbmQgeWVhcilcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDMxIEF1Z3VzdCAyMDE0IGFuZCA0IFNlcHRlbWJlciAyMDE0IGluIHRoZSBzYW1lIHdlZWs/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVXZWVrKG5ldyBEYXRlKDIwMTQsIDcsIDMxKSwgbmV3IERhdGUoMjAxNCwgOCwgNCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgd2VlayBzdGFydHMgd2l0aCBNb25kYXksXG4gKiAvLyBhcmUgMzEgQXVndXN0IDIwMTQgYW5kIDQgU2VwdGVtYmVyIDIwMTQgaW4gdGhlIHNhbWUgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZVdlZWsobmV3IERhdGUoMjAxNCwgNywgMzEpLCBuZXcgRGF0ZSgyMDE0LCA4LCA0KSwge1xuICogICB3ZWVrU3RhcnRzT246IDFcbiAqIH0pXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSAxIEphbnVhcnkgMjAxNCBhbmQgMSBKYW51YXJ5IDIwMTUgaW4gdGhlIHNhbWUgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZVdlZWsobmV3IERhdGUoMjAxNCwgMCwgMSksIG5ldyBEYXRlKDIwMTUsIDAsIDEpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1NhbWVXZWVrKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0LCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnRTdGFydE9mV2VlayA9IHN0YXJ0T2ZXZWVrKGRpcnR5RGF0ZUxlZnQsIG9wdGlvbnMpO1xuICB2YXIgZGF0ZVJpZ2h0U3RhcnRPZldlZWsgPSBzdGFydE9mV2VlayhkaXJ0eURhdGVSaWdodCwgb3B0aW9ucyk7XG4gIHJldHVybiBkYXRlTGVmdFN0YXJ0T2ZXZWVrLmdldFRpbWUoKSA9PT0gZGF0ZVJpZ2h0U3RhcnRPZldlZWsuZ2V0VGltZSgpO1xufSIsImltcG9ydCBpc1NhbWVXZWVrIGZyb20gXCIuLi9pc1NhbWVXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzVGhpc1dlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBzYW1lIHdlZWsgYXMgdGhlIGN1cnJlbnQgZGF0ZT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgc2FtZSB3ZWVrIGFzIHRoZSBjdXJyZW50IGRhdGU/XG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBwcmVzZW50IGluIHRoZSBGUCBzdWJtb2R1bGUgYXNcbiAqID4gaXQgdXNlcyBgRGF0ZS5ub3coKWAgaW50ZXJuYWxseSBoZW5jZSBpbXB1cmUgYW5kIGNhbid0IGJlIHNhZmVseSBjdXJyaWVkLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgaW4gdGhpcyB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgMjUgU2VwdGVtYmVyIDIwMTQsIGlzIDIxIFNlcHRlbWJlciAyMDE0IGluIHRoaXMgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzVGhpc1dlZWsobmV3IERhdGUoMjAxNCwgOCwgMjEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDI1IFNlcHRlbWJlciAyMDE0IGFuZCB3ZWVrIHN0YXJ0cyB3aXRoIE1vbmRheVxuICogLy8gaXMgMjEgU2VwdGVtYmVyIDIwMTQgaW4gdGhpcyB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNUaGlzV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyMSksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGhpc1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gaXNTYW1lV2VlayhkaXJ0eURhdGUsIERhdGUubm93KCksIG9wdGlvbnMpO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5pbXBvcnQgaXNUaGlzV2VlayBmcm9tIFwiZGF0ZS1mbnMvaXNUaGlzV2Vla1wiO1xuXG5jb25zdCBzZXRBdHRyaWJ1dGVzID0gKGVsLCBhdHRycykgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIGd1YXJkLWZvci1pblxuICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgIGVsW2tleV0gPSBhdHRyc1trZXldO1xuICB9XG59O1xuXG5jb25zdCBnZXRSYW5kb21OdW1JbmNsdXNpdmUgPSAobWluLCBtYXgpID0+IHtcbiAgbWluID0gTWF0aC5jZWlsKG1pbik7XG4gIG1heCA9IE1hdGguZmxvb3IobWF4KTtcblxuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpICsgbWluKTtcbn07XG5cbmNvbnN0IGdlbmVyYXRlUmFuZG9tSUQgPSAodGl0bGUpID0+XG4gIGAke3RpdGxlfS0ke2dldFJhbmRvbU51bUluY2x1c2l2ZSgxLCAxMDAwMDAwKX1gO1xuXG5jb25zdCBhZGRFdmVudExpc3RlbmVyVG9FbGVtcyA9IChlbGVtc0FyciwgZXZlbnQsIGZuKSA9PiB7XG4gIGVsZW1zQXJyLmZvckVhY2goKGUpID0+IHtcbiAgICBlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuKTtcbiAgfSk7XG59O1xuXG5jb25zdCBnZXRUb2RheUluWVlZWU1NREQgPSAoKSA9PiB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCB5ZWFyID0gU3RyaW5nKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIGNvbnN0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpO1xuICBjb25zdCBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpO1xuXG4gIHJldHVybiBgJHt5ZWFyfS0ke21vbnRoLnBhZFN0YXJ0KDIsIFwiMFwiKX0tJHtkYXkucGFkU3RhcnQoMiwgXCIwXCIpfWA7XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1Ub1RvZG9zRGF0YSA9ICh0b2Rvc0FycikgPT4ge1xuICBjb25zdCB0b2Rvc0RhdGEgPSB0b2Rvc0Fyci5tYXAoKHRvZG8pID0+ICh7XG4gICAgaWQ6IHRvZG8uZ2V0SWQoKSxcbiAgICBjaGVja2VkOiB0b2RvLmdldENoZWNrZWQoKSxcbiAgICB0aXRsZTogdG9kby5nZXRUaXRsZSgpLFxuICAgIG5vdGVzOiB0b2RvLmdldE5vdGVzKCksXG4gICAgZHVlRGF0ZTogdG9kby5nZXREdWVEYXRlKCksXG4gICAgcHJpb3JpdHk6IHRvZG8uZ2V0UHJpb3JpdHkoKSxcbiAgfSkpO1xuXG4gIHJldHVybiB0b2Rvc0RhdGE7XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1Ub1Byb2plY3RzRGF0YSA9IChwcm9qZWN0c0FycikgPT4ge1xuICBjb25zdCBwcm9qZWN0c0RhdGEgPSBwcm9qZWN0c0Fyci5tYXAoKHByb2plY3QpID0+ICh7XG4gICAgaWQ6IHByb2plY3QuZ2V0SWQoKSxcbiAgICB0b2Rvc0RhdGE6IHRyYW5zZm9ybVRvVG9kb3NEYXRhKHByb2plY3QuZ2V0VG9kb3NBcnIoKSksXG4gICAgdGl0bGU6IHByb2plY3QuZ2V0VGl0bGUoKSxcbiAgfSkpO1xuXG4gIHJldHVybiBwcm9qZWN0c0RhdGE7XG59O1xuXG5jb25zdCB1cGRhdGVMb2NhbFN0b3JhZ2UgPSAoYXBwKSA9PiB7XG4gIGxvY2FsU3RvcmFnZS50b2Rvc0RhdGEgPSBKU09OLnN0cmluZ2lmeShcbiAgICB0cmFuc2Zvcm1Ub1RvZG9zRGF0YShhcHAuZ2V0VG9kb3NBcnIoKSlcbiAgKTtcbiAgbG9jYWxTdG9yYWdlLnByb2plY3RzRGF0YSA9IEpTT04uc3RyaW5naWZ5KFxuICAgIHRyYW5zZm9ybVRvUHJvamVjdHNEYXRhKGFwcC5nZXRQcm9qZWN0c0FycigpKVxuICApO1xufTtcblxuLy8gR2V0IG9iamVjdHMgdGhhdCBhcmUgZHVlIHRvZGF5XG5jb25zdCBnZXRPYmpzRHVlVG9kYXkgPSAoYXJyKSA9PiB7XG4gIGNvbnN0IHRvZGF5ID0gZ2V0VG9kYXlJbllZWVlNTUREKCk7XG4gIHJldHVybiBhcnIuZmlsdGVyKChlKSA9PiBlLmdldER1ZURhdGUoKSA9PT0gdG9kYXkpO1xufTtcblxuLy8gR2V0IG9iamVjdHMgdGhhdCBhcmUgZHVlIHRoaXMgd2VlayAoTW9uIC0gU3VuKVxuY29uc3QgZ2V0T2Jqc0R1ZVRoaXNXZWVrID0gKGFycikgPT5cbiAgYXJyLmZpbHRlcigoZSkgPT4ge1xuICAgIGNvbnN0IHByb2Nlc3NlZER1ZURhdGUgPSBgJHtlLmdldER1ZURhdGUoKX1UMDA6MDA6MDBgO1xuXG4gICAgcmV0dXJuIGlzVGhpc1dlZWsobmV3IERhdGUocHJvY2Vzc2VkRHVlRGF0ZSksIHsgd2Vla1N0YXJ0c09uOiAxIH0pO1xuICB9KTtcblxuZXhwb3J0IHtcbiAgc2V0QXR0cmlidXRlcyxcbiAgZ2V0UmFuZG9tTnVtSW5jbHVzaXZlLFxuICBnZW5lcmF0ZVJhbmRvbUlELFxuICBhZGRFdmVudExpc3RlbmVyVG9FbGVtcyxcbiAgZ2V0VG9kYXlJbllZWVlNTURELFxuICB1cGRhdGVMb2NhbFN0b3JhZ2UsXG4gIGdldE9ianNEdWVUb2RheSxcbiAgZ2V0T2Jqc0R1ZVRoaXNXZWVrLFxufTtcbiIsImNvbnN0IGdldEFwcENvbnRhaW5lciA9ICgpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYXBwLWNvbnRhaW5lclwiKTtcblxuY29uc3QgZ2V0Q29udGVudEJveCA9ICgpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGVudC1ib3gtY29udGFpbmVyXCIpO1xuXG5jb25zdCBhcHBlbmRUb1Jvb3QgPSAoZWxlbSkgPT4ge1xuICBjb25zdCByb290ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyb290XCIpO1xuXG4gIHJvb3QuYXBwZW5kKGVsZW0pO1xufTtcblxuY29uc3QgYXBwZW5kVG9Ib2xkZXJCb3ggPSAoZWxlbSkgPT4ge1xuICBjb25zdCBob2xkZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhvbGRlci1ib3gtY29udGFpbmVyXCIpO1xuXG4gIGhvbGRlckJveC5hcHBlbmQoZWxlbSk7XG59O1xuXG5leHBvcnQgeyBnZXRBcHBDb250YWluZXIsIGFwcGVuZFRvUm9vdCwgYXBwZW5kVG9Ib2xkZXJCb3gsIGdldENvbnRlbnRCb3ggfTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi90b2RvSXRlbS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3RvZG9JdGVtLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NTozMC43NTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsImltcG9ydCBhZGRNaWxsaXNlY29uZHMgZnJvbSBcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcblxuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgb3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkZmlyc3RXZWVrQ29uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmlyc3RXZWVrQ29uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmaXJzdFdlZWtDb24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2VlayA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWsuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vlaywgb3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuXG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gRyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiBZKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gUihkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiB1KGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIFEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gcShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdNJzpcbiAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gTChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gdyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gSShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9IGdldFVUQ0lTT1dlZWsoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gRChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiBFKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiBlKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gYyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gaShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDJcbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG5cbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcblxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gYihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIEIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gSyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiBrKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiBYKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiB4KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG5cbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcblxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIE8oZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiB6KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gdChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiBUKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwidmFyIGRhdGVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgdGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgdG9rZW5WYWx1ZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcblxuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQudG9TdHJpbmcoKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0RGlzdGFuY2U7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgU3RyaW5nKClcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qc1wiO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcblxudmFyIGZvcm1hdFJlbGF0aXZlID0gZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRSZWxhdGl2ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7IC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG5cbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTsgLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xuXG52YXIgb3JkaW5hbE51bWJlciA9IGZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiBhcmd1bWVudENhbGxiYWNrKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBxdWFydGVyIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2soaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0TG9jYWxlOyIsImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0TG9jYWxlL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX29wdGlvbnMkbG9jYWxlLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZTIsIF9vcHRpb25zJGxvY2FsZTIkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLCBfcmVmNSwgX3JlZjYsIF9yZWY3LCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZTMsIF9vcHRpb25zJGxvY2FsZTMkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMywgX2RlZmF1bHRPcHRpb25zJGxvY2FsNDtcblxuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBsb2NhbGUgPSAoX3JlZiA9IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2NhbGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvY2FsZSA6IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYyID0gKF9yZWYzID0gKF9yZWY0ID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiRvcHRpID0gX29wdGlvbnMkbG9jYWxlMi5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTIkb3B0aS5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWY0ICE9PSB2b2lkIDAgPyBfcmVmNCA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogMSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZjUgPSAoX3JlZjYgPSAoX3JlZjcgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUzID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZTMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPSBfb3B0aW9ucyRsb2NhbGUzLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZTMkb3B0aSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlMyRvcHRpLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjcgIT09IHZvaWQgMCA/IF9yZWY3IDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNiAhPT0gdm9pZCAwID8gX3JlZjYgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMyA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNSAhPT0gdm9pZCAwID8gX3JlZjUgOiAwKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICB2YXIgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuXG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVkWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdG9kb0RldGFpbHMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi90b2RvRGV0YWlscy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZGVsQ29uZmlybWF0aW9uLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZGVsQ29uZmlybWF0aW9uLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vZGVsQ29uZmlybWF0aW9uLmNzc1wiO1xuaW1wb3J0ICogYXMgZG9tQ29udHJvbGxlciBmcm9tIFwiLi4vLi4vbW9kdWxlcy9kb21Db250cm9sbGVyL2RvbUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IHVwZGF0ZUxvY2FsU3RvcmFnZSB9IGZyb20gXCIuLi8uLi9tb2R1bGVzL3V0aWxpdHlGdW5jdGlvbnMvdXRpbGl0eUZ1bmN0aW9uc1wiO1xuaW1wb3J0IHtcbiAgdXBkYXRlVG9kb3NUb3RhbCxcbiAgdXBkYXRlUHJvamVjdHNUb3RhbCxcbiAgdXBkYXRlRGF5VG90YWwsXG4gIHVwZGF0ZVdlZWtUb3RhbCxcbn0gZnJvbSBcIi4uL25hdmJhci9uYXZiYXJcIjtcblxuY29uc3QgY3JlYXRlRGVsQ29uZmlybWF0aW9uVUkgPSAoYXBwLCB0eXBlLCBvYmosIG9ialVJKSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGNvbmZpcm1hdGlvbk1zZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCBidG5zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3Qgbm9CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjb25zdCB5ZXNCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFxuICAgIFwiZGVsLWNvbmZpcm1hdGlvbi1jb250YWluZXJcIixcbiAgICBcImZsZXgtY29sdW1uXCIsXG4gICAgXCJjZW50ZXJcIlxuICApO1xuXG4gIGNvbmZpcm1hdGlvbk1zZy5jbGFzc0xpc3QuYWRkKFwiZGVsLWNvbmZpcm1hdGlvbi1tc2dcIik7XG4gIGNvbmZpcm1hdGlvbk1zZy5pbm5lclRleHQgPSBcIkNvbmZpcm0gRGVsZXRlP1wiO1xuXG4gIGJ0bnNDb250YWluZXIuY2xhc3NMaXN0LmFkZChcbiAgICBcImRlbC1jb25maXJtYXRpb24tYnRucy1jb250YWluZXJcIixcbiAgICBcImZsZXhcIixcbiAgICBcImNlbnRlclwiXG4gICk7XG5cbiAgbm9CdG4uY2xhc3NMaXN0LmFkZChcImRlbC1jb25maXJtYXRpb24tbm8tYnRuXCIpO1xuICBub0J0bi5pbm5lclRleHQgPSBcIk5PXCI7XG4gIG5vQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKCkgPT4ge1xuICAgIHJlbW92ZUNvbnRhaW5lcihjb250YWluZXIpO1xuICB9KTtcblxuICB5ZXNCdG4uY2xhc3NMaXN0LmFkZChcImRlbC1jb25maXJtYXRpb24teWVzLWJ0blwiKTtcbiAgeWVzQnRuLmlubmVyVGV4dCA9IFwiWUVTXCI7XG4gIHllc0J0bi5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsICgpID0+IHtcbiAgICBpZiAodHlwZSA9PT0gXCJ0b2RvXCIpIHtcbiAgICAgIGFwcC5yZW1vdmVGcm9tVG9kb3NBcnIob2JqLmdldElkKCkpO1xuXG4gICAgICBhcHAuZ2V0UHJvamVjdHNBcnIoKS5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XG4gICAgICAgIHByb2plY3QucmVtb3ZlRnJvbVRvZG9zQXJyKG9iai5nZXRJZCgpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJwcm9qZWN0XCIpIHtcbiAgICAgIG9iai5nZXRUb2Rvc0FycigpLmZvckVhY2goKHRvZG8pID0+IHtcbiAgICAgICAgYXBwLnJlbW92ZUZyb21Ub2Rvc0Fycih0b2RvLmdldElkKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGFwcC5yZW1vdmVGcm9tUHJvamVjdHNBcnIob2JqLmdldElkKCkpO1xuICAgIH1cblxuICAgIHVwZGF0ZUxvY2FsU3RvcmFnZShhcHApO1xuICAgIHVwZGF0ZU5hdmJhclRvdGFscyhhcHApO1xuICAgIG9ialVJLnJlbW92ZSgpO1xuICAgIHJlbW92ZUNvbnRhaW5lcihjb250YWluZXIpO1xuICB9KTtcblxuICBidG5zQ29udGFpbmVyLmFwcGVuZChub0J0biwgeWVzQnRuKTtcbiAgY29udGFpbmVyLmFwcGVuZChjb25maXJtYXRpb25Nc2csIGJ0bnNDb250YWluZXIpO1xuXG4gIHJldHVybiBjb250YWluZXI7XG59O1xuXG5jb25zdCByZW1vdmVDb250YWluZXIgPSAoY29udGFpbmVyKSA9PiB7XG4gIGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgZG9tQ29udHJvbGxlci5nZXRBcHBDb250YWluZXIoKS5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XG59O1xuXG5jb25zdCB1cGRhdGVOYXZiYXJUb3RhbHMgPSAoYXBwKSA9PiB7XG4gIHVwZGF0ZVRvZG9zVG90YWwoYXBwKTtcbiAgdXBkYXRlUHJvamVjdHNUb3RhbChhcHApO1xuICB1cGRhdGVEYXlUb3RhbChhcHApO1xuICB1cGRhdGVXZWVrVG90YWwoYXBwKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZURlbENvbmZpcm1hdGlvblVJO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Byb2plY3RTZWxlY3Rvci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Byb2plY3RTZWxlY3Rvci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL3Byb2plY3RTZWxlY3Rvci5jc3NcIjtcbmltcG9ydCAqIGFzIGRvbUNvbnRyb2xsZXIgZnJvbSBcIi4uLy4uL21vZHVsZXMvZG9tQ29udHJvbGxlci9kb21Db250cm9sbGVyXCI7XG5pbXBvcnQgeyB1cGRhdGVMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiLi4vLi4vbW9kdWxlcy91dGlsaXR5RnVuY3Rpb25zL3V0aWxpdHlGdW5jdGlvbnNcIjtcblxuY29uc3QgY3JlYXRlUHJvamVjdFNlbGVjdG9yVUkgPSAoYXBwLCB0b2RvSXRlbSkgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCBwcm9qZWN0c0JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGJ0bnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjb25zdCBva0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LXNlbGVjdG9yLWNvbnRhaW5lclwiKTtcblxuICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1zZWxlY3Rvci10aXRsZVwiLCBcImZsZXhcIiwgXCJjZW50ZXJcIik7XG4gIHRpdGxlLmlubmVyVGV4dCA9IFwiQWRkIFRvIFByb2plY3RcIjtcblxuICBwcm9qZWN0c0JveC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1zZWxlY3Rvci1wcm9qZWN0cy1ib3hcIiwgXCJmbGV4LWNvbHVtblwiKTtcblxuICBidG5zQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXG4gICAgXCJwcm9qZWN0LXNlbGVjdG9yLWJ0bnMtY29udGFpbmVyXCIsXG4gICAgXCJmbGV4XCIsXG4gICAgXCJjZW50ZXJcIlxuICApO1xuXG4gIGNhbmNlbEJ0bi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1zZWxlY3Rvci1jYW5jZWwtYnRuXCIpO1xuICBjYW5jZWxCdG4uaW5uZXJUZXh0ID0gXCJDQU5DRUxcIjtcbiAgY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKCkgPT4ge1xuICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICBkb21Db250cm9sbGVyLmdldEFwcENvbnRhaW5lcigpLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcbiAgfSk7XG5cbiAgb2tCdG4uY2xhc3NMaXN0LmFkZChcInByb2plY3Qtc2VsZWN0b3Itb2stYnRuXCIpO1xuICBva0J0bi5pbm5lclRleHQgPSBcIk9LXCI7XG4gIG9rQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkUHJvamVjdHMgPSBBcnJheS5mcm9tKFxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcm9qZWN0LW9wdGlvbi5zZWxlY3RlZFwiKVxuICAgICk7XG5cbiAgICBpZiAoIXNlbGVjdGVkUHJvamVjdHMubGVuZ3RoKSB7XG4gICAgICBkb21Db250cm9sbGVyLmdldEFwcENvbnRhaW5lcigpLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxlY3RlZFByb2plY3RzSWQgPSBzZWxlY3RlZFByb2plY3RzLm1hcChcbiAgICAgIChwcm9qZWN0KSA9PiBwcm9qZWN0LmRhdGFzZXQuaWRcbiAgICApO1xuICAgIGNvbnNvbGUubG9nKFwiaWRzOlwiLCBzZWxlY3RlZFByb2plY3RzSWQpO1xuXG4gICAgc2VsZWN0ZWRQcm9qZWN0c0lkLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICBhcHAuZ2V0UHJvamVjdHNBcnIoKS5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XG4gICAgICAgIGlmIChpZCA9PT0gcHJvamVjdC5nZXRJZCgpKSB7XG4gICAgICAgICAgcHJvamVjdC5wdXNoVG9Ub2Rvc0Fycih0b2RvSXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdXBkYXRlTG9jYWxTdG9yYWdlKGFwcCk7XG4gICAgZG9tQ29udHJvbGxlci5nZXRBcHBDb250YWluZXIoKS5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XG4gICAgY29udGFpbmVyLnJlbW92ZSgpO1xuICB9KTtcblxuICBjb25zdCBmaWx0ZXJlZFByb2plY3RzID0gYXBwXG4gICAgLmdldFByb2plY3RzQXJyKClcbiAgICAuZmlsdGVyKChwcm9qZWN0KSA9PlxuICAgICAgcHJvamVjdC5nZXRUb2Rvc0FycigpLmV2ZXJ5KCh0b2RvKSA9PiB0b2RvLmdldElkKCkgIT09IHRvZG9JdGVtLmdldElkKCkpXG4gICAgKTtcblxuICBjb25zdCBwcm9qZWN0T3B0aW9uVUlzID0gZmlsdGVyZWRQcm9qZWN0cy5tYXAoKHByb2plY3QpID0+XG4gICAgY3JlYXRlUHJvamVjdE9wdGlvblVJKHByb2plY3QpXG4gICk7XG5cbiAgaWYgKCFwcm9qZWN0T3B0aW9uVUlzLmxlbmd0aCkge1xuICAgIHByb2plY3RzQm94LmFwcGVuZChcIk5vIFByb2plY3RzXCIpO1xuICB9IGVsc2Uge1xuICAgIHByb2plY3RzQm94LmFwcGVuZCguLi5wcm9qZWN0T3B0aW9uVUlzKTtcbiAgfVxuXG4gIGJ0bnNDb250YWluZXIuYXBwZW5kKGNhbmNlbEJ0biwgb2tCdG4pO1xuICBjb250YWluZXIuYXBwZW5kKHRpdGxlLCBwcm9qZWN0c0JveCwgYnRuc0NvbnRhaW5lcik7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn07XG5cbmNvbnN0IGNyZWF0ZVByb2plY3RPcHRpb25VSSA9IChwcm9qZWN0KSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IGNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInByb2plY3Qtb3B0aW9uXCIsIFwiZmxleFwiLCBcImNlbnRlclwiKTtcbiAgY29udGFpbmVyLmRhdGFzZXQuaWQgPSBwcm9qZWN0LmdldElkKCk7XG4gIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsICgpID0+IHtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZShcInNlbGVjdGVkXCIpO1xuICB9KTtcblxuICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1vcHRpb24tdGl0bGVcIik7XG4gIHRpdGxlLmlubmVyVGV4dCA9IHByb2plY3QuZ2V0VGl0bGUoKTtcblxuICBjaGVja2JveC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1vcHRpb24tY2hlY2tib3hcIik7XG5cbiAgY29udGFpbmVyLmFwcGVuZCh0aXRsZSwgY2hlY2tib3gpO1xuXG4gIHJldHVybiBjb250YWluZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm9qZWN0U2VsZWN0b3JVSTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5pbXBvcnQgXCIuL3RvZG9JdGVtLmNzc1wiO1xuaW1wb3J0IGZvcm1hdCBmcm9tIFwiZGF0ZS1mbnMvZm9ybWF0XCI7XG5pbXBvcnQgY3JlYXRlVG9kb0RldGFpbHNVSSBmcm9tIFwiLi4vdG9kb0RldGFpbHMvdG9kb0RldGFpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZUZvcm1VSSB9IGZyb20gXCIuLi90b2RvRm9ybS90b2RvRm9ybVwiO1xuaW1wb3J0IGNyZWF0ZURlbENvbmZpcm1hdGlvblVJIGZyb20gXCIuLi9kZWxDb25maXJtYXRpb24vZGVsQ29uZmlybWF0aW9uXCI7XG5pbXBvcnQgY3JlYXRlUHJvamVjdFNlbGVjdG9yVUkgZnJvbSBcIi4uL3Byb2plY3RTZWxlY3Rvci9wcm9qZWN0U2VsZWN0b3JcIjtcbmltcG9ydCAqIGFzIGRvbUNvbnRyb2xsZXIgZnJvbSBcIi4uLy4uL21vZHVsZXMvZG9tQ29udHJvbGxlci9kb21Db250cm9sbGVyXCI7XG5pbXBvcnQgKiBhcyB1dGlsaXR5RnVuY3Rpb25zIGZyb20gXCIuLi8uLi9tb2R1bGVzL3V0aWxpdHlGdW5jdGlvbnMvdXRpbGl0eUZ1bmN0aW9uc1wiO1xuaW1wb3J0IHBlbkljb24gZnJvbSBcIi4vcGVuY2lsLW91dGxpbmUuc3ZnXCI7XG5pbXBvcnQgYXJyb3dJY29uIGZyb20gXCIuL2Fycm93LXJpZ2h0LXRoaW4tY2lyY2xlLW91dGxpbmUuc3ZnXCI7XG5pbXBvcnQgZGVsZXRlSWNvbiBmcm9tIFwiLi9kZWxldGUuc3ZnXCI7XG5cbmNvbnN0IHRvZG9JdGVtRmFjdG9yeSA9IChcbiAgY2hlY2tlZCxcbiAgdGl0bGUsXG4gIG5vdGVzLFxuICBkdWVEYXRlLFxuICBwcmlvcml0eSxcbiAgaWRGcm9tRGF0YVxuKSA9PiB7XG4gIGNvbnN0IGlkID0gaWRGcm9tRGF0YSB8fCB1dGlsaXR5RnVuY3Rpb25zLmdlbmVyYXRlUmFuZG9tSUQodGl0bGUpO1xuXG4gIC8vIEdldHRpbmdcbiAgY29uc3QgZ2V0Q2hlY2tlZCA9ICgpID0+IGNoZWNrZWQ7XG4gIGNvbnN0IGdldFRpdGxlID0gKCkgPT4gdGl0bGU7XG4gIGNvbnN0IGdldE5vdGVzID0gKCkgPT4gbm90ZXM7XG4gIGNvbnN0IGdldER1ZURhdGUgPSAoKSA9PiBkdWVEYXRlO1xuICBjb25zdCBnZXRQcmlvcml0eSA9ICgpID0+IHByaW9yaXR5O1xuICBjb25zdCBnZXRJZCA9ICgpID0+IGlkO1xuXG4gIC8vIEVkaXRpbmdcbiAgY29uc3QgZWRpdENoZWNrZWQgPSAoKSA9PiB7XG4gICAgY2hlY2tlZCA9ICFjaGVja2VkO1xuICB9O1xuICBjb25zdCBlZGl0VGl0bGUgPSAobmV3VGl0bGUpID0+IHtcbiAgICB0aXRsZSA9IG5ld1RpdGxlO1xuICB9O1xuICBjb25zdCBlZGl0Tm90ZXMgPSAobmV3Tm90ZXMpID0+IHtcbiAgICBub3RlcyA9IG5ld05vdGVzO1xuICB9O1xuICBjb25zdCBlZGl0RHVlRGF0ZSA9IChuZXdEdWVEYXRlKSA9PiB7XG4gICAgZHVlRGF0ZSA9IG5ld0R1ZURhdGU7XG4gIH07XG4gIGNvbnN0IGVkaXRQcmlvcml0eSA9IChuZXdQcmlvcml0eSkgPT4ge1xuICAgIHByaW9yaXR5ID0gbmV3UHJpb3JpdHk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBnZXRDaGVja2VkLFxuICAgIGdldFRpdGxlLFxuICAgIGdldE5vdGVzLFxuICAgIGdldER1ZURhdGUsXG4gICAgZ2V0UHJpb3JpdHksXG4gICAgZ2V0SWQsXG4gICAgZWRpdENoZWNrZWQsXG4gICAgZWRpdFRpdGxlLFxuICAgIGVkaXROb3RlcyxcbiAgICBlZGl0RHVlRGF0ZSxcbiAgICBlZGl0UHJpb3JpdHksXG4gIH07XG59O1xuXG5jb25zdCBjcmVhdGVUb2RvSXRlbVVJID0gKHRvZG9JdGVtLCBhcHAsIHByb2plY3RJZCkgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBsZWZ0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgcmlnaHRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IHN1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdXBcIik7XG4gIGNvbnN0IGR1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgZWRpdEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICBjb25zdCBtb3ZlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gIGNvbnN0IHRyYXNoSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIGNvbnN0IHByb2Nlc3NlZER1ZURhdGUgPSBmb3JtYXREdWVEYXRlKHRvZG9JdGVtLmdldER1ZURhdGUoKSk7XG5cbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJpdGVtLWNvbnRhaW5lclwiLCBcImZsZXhcIik7XG4gIGNvbnRhaW5lci5kYXRhc2V0LmlkID0gdG9kb0l0ZW0uZ2V0SWQoKTtcbiAgY29udGFpbmVyLmRhdGFzZXQucHJvamVjdElkID0gcHJvamVjdElkO1xuICBjb250YWluZXIuc3R5bGUuYm9yZGVyTGVmdCA9IGA1cHggc29saWQgdmFyKC0tJHt0b2RvSXRlbS5nZXRQcmlvcml0eSgpfS1wcmlvKWA7XG4gIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGRvbUNvbnRyb2xsZXIuYXBwZW5kVG9Sb290KGNyZWF0ZVRvZG9EZXRhaWxzVUkodG9kb0l0ZW0pKTtcbiAgICBkb21Db250cm9sbGVyLmdldEFwcENvbnRhaW5lcigpLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgfSk7XG5cbiAgbGVmdENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaXRlbS1sZWZ0LWNvbnRhaW5lclwiLCBcImZsZXhcIiwgXCJjZW50ZXJcIik7XG5cbiAgcmlnaHRDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIml0ZW0tcmlnaHQtY29udGFpbmVyXCIsIFwiZmxleFwiLCBcImNlbnRlclwiKTtcblxuICBjaGVja2JveC5jbGFzc0xpc3QuYWRkKFwiaXRlbS1jaGVja2JveFwiLCBcImZsZXhcIiwgXCJjZW50ZXJcIik7XG4gIGlmICh0b2RvSXRlbS5nZXRDaGVja2VkKCkpIHtcbiAgICBjaGVja2JveC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tlZFwiKTtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5vLXBvaW50ZXItZXZlbnRzXCIpO1xuICB9XG4gIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKGUpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgY2hlY2tib3guY2xhc3NMaXN0LnRvZ2dsZShcImNoZWNrZWRcIik7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoXCJuby1wb2ludGVyLWV2ZW50c1wiKTtcblxuICAgIHRvZG9JdGVtLmVkaXRDaGVja2VkKCk7XG4gICAgdXRpbGl0eUZ1bmN0aW9ucy51cGRhdGVMb2NhbFN0b3JhZ2UoYXBwKTtcbiAgfSk7XG5cbiAgdGl0bGUuY2xhc3NMaXN0LmFkZChcIml0ZW0tdGl0bGVcIik7XG4gIHRpdGxlLmlubmVyVGV4dCA9IHRvZG9JdGVtLmdldFRpdGxlKCk7XG5cbiAgc3VwLmlubmVyVGV4dCA9IHByb2Nlc3NlZER1ZURhdGUuc2xpY2UoLTYsIC00KTtcblxuICBkdWVEYXRlLmNsYXNzTGlzdC5hZGQoXCJpdGVtLWR1ZS1kYXRlXCIpO1xuICBkdWVEYXRlLmFwcGVuZChcbiAgICBwcm9jZXNzZWREdWVEYXRlLnNsaWNlKDAsIC02KSxcbiAgICBzdXAsXG4gICAgcHJvY2Vzc2VkRHVlRGF0ZS5zbGljZSgtNClcbiAgKTtcblxuICBlZGl0SWNvbi5jbGFzc0xpc3QuYWRkKFwiaXRlbS1lZGl0LWljb25cIik7XG4gIGVkaXRJY29uLnRpdGxlID0gXCJFZGl0IFRvZG9cIjtcbiAgZWRpdEljb24uc3JjID0gcGVuSWNvbjtcbiAgZWRpdEljb24uYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCAoZSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBjb25zdCBuYXZiYXJNb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItY29udGFpbmVyW2RhdGEtbW9kZV1cIilcbiAgICAgIC5kYXRhc2V0Lm1vZGU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgIGNvbnN0IHByb2plY3RJZCA9XG4gICAgICBjb250YWluZXIuZGF0YXNldC5wcm9qZWN0SWQgPT09IFwibnVsbFwiXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IGNvbnRhaW5lci5kYXRhc2V0LnByb2plY3RJZDtcblxuICAgIGRvbUNvbnRyb2xsZXIuYXBwZW5kVG9Sb290KFxuICAgICAgY3JlYXRlRm9ybVVJKGFwcCwgbmF2YmFyTW9kZSwgXCJlZGl0LXRvZG9cIiwgdG9kb0l0ZW0sIG51bGwsIHByb2plY3RJZClcbiAgICApO1xuICAgIGRvbUNvbnRyb2xsZXIuZ2V0QXBwQ29udGFpbmVyKCkuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xuICB9KTtcblxuICBtb3ZlSWNvbi5jbGFzc0xpc3QuYWRkKFwiaXRlbS1tb3ZlLWljb25cIik7XG4gIG1vdmVJY29uLnRpdGxlID0gXCJNb3ZlIHRvIFByb2plY3RcIjtcbiAgbW92ZUljb24uc3JjID0gYXJyb3dJY29uO1xuICBtb3ZlSWNvbi5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGRvbUNvbnRyb2xsZXIuYXBwZW5kVG9Sb290KGNyZWF0ZVByb2plY3RTZWxlY3RvclVJKGFwcCwgdG9kb0l0ZW0pKTtcbiAgICBkb21Db250cm9sbGVyLmdldEFwcENvbnRhaW5lcigpLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgfSk7XG5cbiAgdHJhc2hJY29uLmNsYXNzTGlzdC5hZGQoXCJpdGVtLXRyYXNoLWljb25cIik7XG4gIHRyYXNoSWNvbi50aXRsZSA9IFwiRGVsZXRlIFRvZG9cIjtcbiAgdHJhc2hJY29uLnNyYyA9IGRlbGV0ZUljb247XG4gIHRyYXNoSWNvbi5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBkb21Db250cm9sbGVyLmFwcGVuZFRvUm9vdChcbiAgICAgIGNyZWF0ZURlbENvbmZpcm1hdGlvblVJKGFwcCwgXCJ0b2RvXCIsIHRvZG9JdGVtLCBjb250YWluZXIpXG4gICAgKTtcbiAgICBkb21Db250cm9sbGVyLmdldEFwcENvbnRhaW5lcigpLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgfSk7XG5cbiAgbGVmdENvbnRhaW5lci5hcHBlbmQoY2hlY2tib3gsIHRpdGxlKTtcbiAgcmlnaHRDb250YWluZXIuYXBwZW5kKGR1ZURhdGUsIGVkaXRJY29uLCBtb3ZlSWNvbiwgdHJhc2hJY29uKTtcbiAgY29udGFpbmVyLmFwcGVuZChsZWZ0Q29udGFpbmVyLCByaWdodENvbnRhaW5lcik7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn07XG5cbi8vIEZvcm1hdCBcIjIwMjItMTItMzBcIiB0byBcIjMwdGggRGVjXCJcbmNvbnN0IGZvcm1hdER1ZURhdGUgPSAoZHVlRGF0ZSkgPT4ge1xuICBjb25zdCBbeSwgbSwgZF0gPSBkdWVEYXRlLnNwbGl0KFwiLVwiKTtcbiAgY29uc3QgcHJvY2Vzc2VkTSA9IE51bWJlcihtKSAtIDE7XG5cbiAgcmV0dXJuIGZvcm1hdChuZXcgRGF0ZSh5LCBwcm9jZXNzZWRNLCBkKSwgXCJkbyBNTU1cIik7XG59O1xuXG5leHBvcnQgeyB0b2RvSXRlbUZhY3RvcnksIGNyZWF0ZVRvZG9JdGVtVUkgfTtcbiIsImltcG9ydCBcIi4vdG9kb0RldGFpbHMuY3NzXCI7XG5pbXBvcnQgKiBhcyBkb21Db250cm9sbGVyIGZyb20gXCIuLi8uLi9tb2R1bGVzL2RvbUNvbnRyb2xsZXIvZG9tQ29udHJvbGxlclwiO1xuXG5jb25zdCBjcmVhdGVUb2RvRGV0YWlsc1VJID0gKHtcbiAgZ2V0UHJpb3JpdHksXG4gIGdldER1ZURhdGUsXG4gIGdldFRpdGxlLFxuICBnZXROb3Rlcyxcbn0pID0+IHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgdG9wQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgYm90dG9tQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBkdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IG5vdGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IGNsb3NlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblxuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcImRldGFpbHMtY29udGFpbmVyXCIpO1xuXG4gIHRvcENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZGV0YWlscy10b3AtY29udGFpbmVyXCIsIFwiZmxleFwiKTtcblxuICBib3R0b21Db250YWluZXIuY2xhc3NMaXN0LmFkZChcImRldGFpbHMtYm90dG9tLWNvbnRhaW5lclwiKTtcblxuICBwcmlvcml0eS5jbGFzc0xpc3QuYWRkKFwiZGV0YWlscy1wcmlvcml0eVwiLCBcImZsZXhcIiwgXCJjZW50ZXJcIik7XG4gIGlmIChnZXRQcmlvcml0eSgpID09PSBcImxvd1wiKSB7XG4gICAgcHJpb3JpdHkuY2xhc3NMaXN0LmFkZChcImRldGFpbHMtcHJpb3JpdHktbFwiKTtcbiAgfSBlbHNlIGlmIChnZXRQcmlvcml0eSgpID09PSBcIm1lZGl1bVwiKSB7XG4gICAgcHJpb3JpdHkuY2xhc3NMaXN0LmFkZChcImRldGFpbHMtcHJpb3JpdHktbVwiKTtcbiAgfSBlbHNlIHtcbiAgICBwcmlvcml0eS5jbGFzc0xpc3QuYWRkKFwiZGV0YWlscy1wcmlvcml0eS1oXCIpO1xuICB9XG4gIHByaW9yaXR5LmlubmVyVGV4dCA9IGdldFByaW9yaXR5KClbMF0udG9VcHBlckNhc2UoKSArIGdldFByaW9yaXR5KCkuc2xpY2UoMSk7XG5cbiAgZHVlRGF0ZS5jbGFzc0xpc3QuYWRkKFwiZGV0YWlscy1kdWUtZGF0ZVwiLCBcImZsZXhcIiwgXCJjZW50ZXJcIik7XG4gIGR1ZURhdGUuaW5uZXJUZXh0ID0gYER1ZTogJHtnZXREdWVEYXRlKCl9YDtcblxuICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwiZGV0YWlscy10aXRsZVwiLCBcImZsZXhcIik7XG4gIHRpdGxlLmlubmVyVGV4dCA9IGdldFRpdGxlKCk7XG5cbiAgbm90ZXMuY2xhc3NMaXN0LmFkZChcImRldGFpbHMtbm90ZXNcIiwgXCJmbGV4XCIpO1xuICBub3Rlcy5pbm5lclRleHQgPSBnZXROb3RlcygpIHx8IFwiTm8gTm90ZXNcIjtcblxuICBjbG9zZUJ0bi5jbGFzc0xpc3QuYWRkKFwiZGV0YWlscy1jbG9zZS1idG5cIik7XG4gIGNsb3NlQnRuLmlubmVyVGV4dCA9IFwiQ0xPU0VcIjtcbiAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCAoKSA9PiB7XG4gICAgY29udGFpbmVyLnJlbW92ZSgpO1xuICAgIGRvbUNvbnRyb2xsZXIuZ2V0QXBwQ29udGFpbmVyKCkuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FibGVkXCIpO1xuICB9KTtcblxuICB0b3BDb250YWluZXIuYXBwZW5kKHByaW9yaXR5LCBkdWVEYXRlKTtcbiAgYm90dG9tQ29udGFpbmVyLmFwcGVuZCh0aXRsZSwgbm90ZXMsIGNsb3NlQnRuKTtcbiAgY29udGFpbmVyLmFwcGVuZCh0b3BDb250YWluZXIsIGJvdHRvbUNvbnRhaW5lcik7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRvZG9EZXRhaWxzVUk7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcHJvamVjdC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Byb2plY3QuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hvbGRlckJveC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hvbGRlckJveC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL2hvbGRlckJveC5jc3NcIjtcbmltcG9ydCBjb21wYXJlQXNjIGZyb20gXCJkYXRlLWZucy9jb21wYXJlQXNjXCI7XG5pbXBvcnQgeyBjcmVhdGVUb2RvSXRlbVVJIH0gZnJvbSBcIi4uL3RvZG9JdGVtL3RvZG9JdGVtXCI7XG5pbXBvcnQgeyBjcmVhdGVQcm9qZWN0VUkgfSBmcm9tIFwiLi4vcHJvamVjdC9wcm9qZWN0XCI7XG5pbXBvcnQgKiBhcyB1dGlsaXR5RnVuY3Rpb25zIGZyb20gXCIuLi8uLi9tb2R1bGVzL3V0aWxpdHlGdW5jdGlvbnMvdXRpbGl0eUZ1bmN0aW9uc1wiO1xuaW1wb3J0ICogYXMgZG9tQ29udHJvbGxlciBmcm9tIFwiLi4vLi4vbW9kdWxlcy9kb21Db250cm9sbGVyL2RvbUNvbnRyb2xsZXJcIjtcblxuY29uc3QgY3JlYXRlSG9sZGVyQm94VUkgPSAoYXBwLCB0eXBlLCBhcnIsIHByb2plY3RJZCkgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaG9sZGVyLWJveC1jb250YWluZXJcIiwgXCJmbGV4LWNvbHVtblwiKTtcblxuICBpZiAoZG9tQ29udHJvbGxlci5nZXRDb250ZW50Qm94KCkpIHtcbiAgICBkb21Db250cm9sbGVyLmdldENvbnRlbnRCb3goKS5sYXN0RWxlbWVudENoaWxkLnJlbW92ZSgpO1xuICB9XG5cbiAgaWYgKCFhcnIubGVuZ3RoICYmIHR5cGUgPT09IFwicHJvamVjdHNcIikge1xuICAgIGNvbnRhaW5lci5hcHBlbmQoXCJObyBQcm9qZWN0c1wiKTtcbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9XG5cbiAgaWYgKCFhcnIubGVuZ3RoKSB7XG4gICAgY29udGFpbmVyLmFwcGVuZChcIk5vIFRvZG9zXCIpO1xuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gXCJ0b2Rvc1wiKSB7XG4gICAgY29uc3Qgc29ydGVkQXJyID0gc29ydE9ianNCeURhdGVBc2MoYXJyKTtcblxuICAgIGNvbnRhaW5lci5hcHBlbmQoXG4gICAgICAuLi5zb3J0ZWRBcnIubWFwKChlKSA9PiBjcmVhdGVUb2RvSXRlbVVJKGUsIGFwcCwgcHJvamVjdElkKSlcbiAgICApO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwicHJvamVjdHNcIikge1xuICAgIGNvbnRhaW5lci5hcHBlbmQoLi4uYXJyLm1hcCgoZSkgPT4gY3JlYXRlUHJvamVjdFVJKGUsIGFwcCkpKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImRheVwiKSB7XG4gICAgY29uc3QgZmlsdGVyZWRBcnIgPSB1dGlsaXR5RnVuY3Rpb25zLmdldE9ianNEdWVUb2RheShhcnIpO1xuXG4gICAgY29udGFpbmVyLmFwcGVuZChcbiAgICAgIC4uLmZpbHRlcmVkQXJyLm1hcCgoZSkgPT4gY3JlYXRlVG9kb0l0ZW1VSShlLCBhcHAsIHByb2plY3RJZCkpXG4gICAgKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcIndlZWtcIikge1xuICAgIGNvbnN0IGZpbHRlcmVkQXJyID0gdXRpbGl0eUZ1bmN0aW9ucy5nZXRPYmpzRHVlVGhpc1dlZWsoYXJyKTtcbiAgICBjb25zdCBzb3J0ZWRBcnIgPSBzb3J0T2Jqc0J5RGF0ZUFzYyhmaWx0ZXJlZEFycik7XG5cbiAgICBjb250YWluZXIuYXBwZW5kKFxuICAgICAgLi4uc29ydGVkQXJyLm1hcCgoZSkgPT4gY3JlYXRlVG9kb0l0ZW1VSShlLCBhcHAsIHByb2plY3RJZCkpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXI7XG59O1xuXG5jb25zdCBzb3J0T2Jqc0J5RGF0ZUFzYyA9IChvYmpzQXJyKSA9PiBvYmpzQXJyLnNvcnQoKGEsIGIpID0+XG4gICAgY29tcGFyZUFzYyhuZXcgRGF0ZShhLmdldER1ZURhdGUoKSksIG5ldyBEYXRlKGIuZ2V0RHVlRGF0ZSgpKSlcbiAgKTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSG9sZGVyQm94VUk7XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGNvbXBhcmVBc2NcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29tcGFyZSB0aGUgdHdvIGRhdGVzIGFuZCByZXR1cm4gLTEsIDAgb3IgMS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIDEgaWYgdGhlIGZpcnN0IGRhdGUgaXMgYWZ0ZXIgdGhlIHNlY29uZCxcbiAqIC0xIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGJlZm9yZSB0aGUgc2Vjb25kIG9yIDAgaWYgZGF0ZXMgYXJlIGVxdWFsLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY29tcGFyZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSByZXN1bHQgb2YgdGhlIGNvbXBhcmlzb25cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29tcGFyZSAxMSBGZWJydWFyeSAxOTg3IGFuZCAxMCBKdWx5IDE5ODk6XG4gKiBjb25zdCByZXN1bHQgPSBjb21wYXJlQXNjKG5ldyBEYXRlKDE5ODcsIDEsIDExKSwgbmV3IERhdGUoMTk4OSwgNiwgMTApKVxuICogLy89PiAtMVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTb3J0IHRoZSBhcnJheSBvZiBkYXRlczpcbiAqIGNvbnN0IHJlc3VsdCA9IFtcbiAqICAgbmV3IERhdGUoMTk5NSwgNiwgMiksXG4gKiAgIG5ldyBEYXRlKDE5ODcsIDEsIDExKSxcbiAqICAgbmV3IERhdGUoMTk4OSwgNiwgMTApXG4gKiBdLnNvcnQoY29tcGFyZUFzYylcbiAqIC8vPT4gW1xuICogLy8gICBXZWQgRmViIDExIDE5ODcgMDA6MDA6MDAsXG4gKiAvLyAgIE1vbiBKdWwgMTAgMTk4OSAwMDowMDowMCxcbiAqIC8vICAgU3VuIEp1bCAwMiAxOTk1IDAwOjAwOjAwXG4gKiAvLyBdXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGFyZUFzYyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIGRpZmYgPSBkYXRlTGVmdC5nZXRUaW1lKCkgLSBkYXRlUmlnaHQuZ2V0VGltZSgpO1xuXG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxOyAvLyBSZXR1cm4gMCBpZiBkaWZmIGlzIDA7IHJldHVybiBOYU4gaWYgZGlmZiBpcyBOYU5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGlmZjtcbiAgfVxufSIsImltcG9ydCBcIi4vcHJvamVjdC5jc3NcIjtcbmltcG9ydCBwbHVzSWNvbiBmcm9tIFwiLi9wbHVzLnN2Z1wiO1xuaW1wb3J0IHBlbkljb24gZnJvbSBcIi4vcGVuY2lsLW91dGxpbmUuc3ZnXCI7XG5pbXBvcnQgZGVsZXRlSWNvbiBmcm9tIFwiLi9kZWxldGUuc3ZnXCI7XG5pbXBvcnQgeyBjcmVhdGVGb3JtVUkgfSBmcm9tIFwiLi4vdG9kb0Zvcm0vdG9kb0Zvcm1cIjtcbmltcG9ydCBjcmVhdGVEZWxDb25maXJtYXRpb25VSSBmcm9tIFwiLi4vZGVsQ29uZmlybWF0aW9uL2RlbENvbmZpcm1hdGlvblwiO1xuaW1wb3J0IGNyZWF0ZUhvbGRlckJveFVJIGZyb20gXCIuLi9ob2xkZXJCb3gvaG9sZGVyQm94XCI7XG5pbXBvcnQgKiBhcyBkb21Db250cm9sbGVyIGZyb20gXCIuLi8uLi9tb2R1bGVzL2RvbUNvbnRyb2xsZXIvZG9tQ29udHJvbGxlclwiO1xuaW1wb3J0ICogYXMgdXRpbGl0eUZ1bmN0aW9ucyBmcm9tIFwiLi4vLi4vbW9kdWxlcy91dGlsaXR5RnVuY3Rpb25zL3V0aWxpdHlGdW5jdGlvbnNcIjtcblxuY29uc3QgcHJvamVjdEZhY3RvcnkgPSAodGl0bGUsIGlkRnJvbURhdGEsIHRvZG9zQXJyRnJvbURhdGEpID0+IHtcbiAgY29uc3QgaWQgPSBpZEZyb21EYXRhIHx8IHV0aWxpdHlGdW5jdGlvbnMuZ2VuZXJhdGVSYW5kb21JRCh0aXRsZSk7XG4gIGxldCB0b2Rvc0FyciA9IHRvZG9zQXJyRnJvbURhdGEgfHwgW107XG5cbiAgLy8gR2V0dGluZ1xuICBjb25zdCBnZXRUaXRsZSA9ICgpID0+IHRpdGxlO1xuICBjb25zdCBnZXRUb2Rvc0FyciA9ICgpID0+IHRvZG9zQXJyO1xuICBjb25zdCBnZXRJZCA9ICgpID0+IGlkO1xuXG4gIC8vIEVkaXRpbmdcbiAgY29uc3QgZWRpdFRpdGxlID0gKG5ld1RpdGxlKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdGl0bGUgPSBuZXdUaXRsZTtcbiAgfTtcblxuICBjb25zdCBwdXNoVG9Ub2Rvc0FyciA9ICh0b2RvSXRlbSkgPT4ge1xuICAgIHRvZG9zQXJyLnB1c2godG9kb0l0ZW0pO1xuICB9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgY29uc3QgcmVtb3ZlRnJvbVRvZG9zQXJyID0gKGlkKSA9PiB7XG4gICAgdG9kb3NBcnIgPSB0b2Rvc0Fyci5maWx0ZXIoKGUpID0+IGUuaWQgIT09IGlkKTtcbiAgfTtcblxuICAvLyBVcGRhdGluZ1xuICAvLyBjb25zdCBwdXNoVG9Ub2Rvc0RhdGEgPSAodG9kb0RhdGEpID0+IHtcbiAgLy8gICB0b2Rvc0RhdGEucHVzaCh0b2RvRGF0YSk7XG4gIC8vIH1cblxuICAvLyBjb25zdCByZW1vdmVGcm9tVG9kb3NEYXRhID0gKGlkKSA9PiB7XG4gIC8vICAgdG9kb3NEYXRhID0gdG9kb3NEYXRhLmZpbHRlcihlID0+IGUuaWQgIT09IGlkKTtcbiAgLy8gfVxuXG4gIHJldHVybiB7XG4gICAgaWQsXG4gICAgZ2V0VGl0bGUsXG4gICAgZ2V0VG9kb3NBcnIsXG4gICAgZ2V0SWQsXG4gICAgZWRpdFRpdGxlLFxuICAgIHB1c2hUb1RvZG9zQXJyLFxuICAgIHJlbW92ZUZyb21Ub2Rvc0FycixcbiAgfTtcbn07XG5cbmNvbnN0IGNyZWF0ZVByb2plY3RVSSA9IChwcm9qZWN0LCBhcHApID0+IHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgYWRkSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gIGNvbnN0IGVkaXRJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgY29uc3QgdHJhc2hJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcblxuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInByb2plY3QtY29udGFpbmVyXCIsIFwiZmxleFwiLCBcImNlbnRlclwiKTtcbiAgY29udGFpbmVyLmRhdGFzZXQuaWQgPSBwcm9qZWN0LmdldElkKCk7XG4gIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGNvbnN0IHRvZG9zQXJyID0gcHJvamVjdC5nZXRUb2Rvc0FycigpO1xuICAgIGNvbnN0IHByb2plY3RJZCA9IGNvbnRhaW5lci5kYXRhc2V0LmlkO1xuXG4gICAgLy8gY29uc29sZS5sb2coXCJ0b2Rvc0FycjpcIiwgdG9kb3NBcnIpO1xuXG4gICAgZG9tQ29udHJvbGxlclxuICAgICAgLmdldENvbnRlbnRCb3goKVxuICAgICAgLmFwcGVuZChjcmVhdGVIb2xkZXJCb3hVSShhcHAsIFwidG9kb3NcIiwgdG9kb3NBcnIsIHByb2plY3RJZCkpO1xuICB9KTtcblxuICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC10aXRsZVwiKTtcbiAgdGl0bGUuaW5uZXJUZXh0ID0gcHJvamVjdC5nZXRUaXRsZSgpO1xuXG4gIGFkZEljb24uY2xhc3NMaXN0LmFkZChcInByb2plY3QtYWRkLWljb25cIik7XG4gIGFkZEljb24uc3JjID0gcGx1c0ljb247XG4gIGFkZEljb24uYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCAoZSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBkb21Db250cm9sbGVyLmFwcGVuZFRvUm9vdChcbiAgICAgIGNyZWF0ZUZvcm1VSShhcHAsIG51bGwsIFwiYWRkLXRvLXByb2plY3RcIiwgbnVsbCwgcHJvamVjdClcbiAgICApO1xuICAgIGRvbUNvbnRyb2xsZXIuZ2V0QXBwQ29udGFpbmVyKCkuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xuICB9KTtcblxuICBlZGl0SWNvbi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1lZGl0LWljb25cIik7XG4gIGVkaXRJY29uLnNyYyA9IHBlbkljb247XG4gIGVkaXRJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKGUpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgY29uc3QgbmF2YmFyTW9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2YmFyLWNvbnRhaW5lcltkYXRhLW1vZGVdXCIpXG4gICAgICAuZGF0YXNldC5tb2RlO1xuXG4gICAgZG9tQ29udHJvbGxlci5hcHBlbmRUb1Jvb3QoXG4gICAgICBjcmVhdGVGb3JtVUkoYXBwLCBuYXZiYXJNb2RlLCBcImVkaXQtcHJvamVjdFwiLCBudWxsLCBwcm9qZWN0KVxuICAgICk7XG4gICAgZG9tQ29udHJvbGxlci5nZXRBcHBDb250YWluZXIoKS5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XG4gIH0pO1xuXG4gIHRyYXNoSWNvbi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC10cmFzaC1pY29uXCIpO1xuICB0cmFzaEljb24uc3JjID0gZGVsZXRlSWNvbjtcbiAgdHJhc2hJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKGUpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgZG9tQ29udHJvbGxlci5hcHBlbmRUb1Jvb3QoXG4gICAgICBjcmVhdGVEZWxDb25maXJtYXRpb25VSShhcHAsIFwicHJvamVjdFwiLCBwcm9qZWN0LCBjb250YWluZXIpXG4gICAgKTtcbiAgICBkb21Db250cm9sbGVyLmdldEFwcENvbnRhaW5lcigpLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgfSk7XG5cbiAgY29udGFpbmVyLmFwcGVuZCh0aXRsZSwgYWRkSWNvbiwgZWRpdEljb24sIHRyYXNoSWNvbik7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn07XG5cbmV4cG9ydCB7IHByb2plY3RGYWN0b3J5LCBjcmVhdGVQcm9qZWN0VUkgfTtcbiIsImltcG9ydCBcIi4vdG9kb0Zvcm0uY3NzXCI7XG5pbXBvcnQgaXNUaGlzV2VlayBmcm9tIFwiZGF0ZS1mbnMvaXNUaGlzV2Vla1wiO1xuaW1wb3J0IHsgc2V0QXR0cmlidXRlcyB9IGZyb20gXCIuLi8uLi9tb2R1bGVzL3V0aWxpdHlGdW5jdGlvbnMvdXRpbGl0eUZ1bmN0aW9uc1wiO1xuaW1wb3J0ICogYXMgZG9tQ29udHJvbGxlciBmcm9tIFwiLi4vLi4vbW9kdWxlcy9kb21Db250cm9sbGVyL2RvbUNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IHRvZG9JdGVtRmFjdG9yeSB9IGZyb20gXCIuLi90b2RvSXRlbS90b2RvSXRlbVwiO1xuaW1wb3J0IHsgcHJvamVjdEZhY3RvcnkgfSBmcm9tIFwiLi4vcHJvamVjdC9wcm9qZWN0XCI7XG5pbXBvcnQgY3JlYXRlSG9sZGVyQm94VUkgZnJvbSBcIi4uL2hvbGRlckJveC9ob2xkZXJCb3hcIjtcbmltcG9ydCAqIGFzIHV0aWxpdHlGdW5jdGlvbnMgZnJvbSBcIi4uLy4uL21vZHVsZXMvdXRpbGl0eUZ1bmN0aW9ucy91dGlsaXR5RnVuY3Rpb25zXCI7XG5pbXBvcnQge1xuICB1cGRhdGVUb2Rvc1RvdGFsLFxuICB1cGRhdGVQcm9qZWN0c1RvdGFsLFxuICB1cGRhdGVEYXlUb3RhbCxcbiAgdXBkYXRlV2Vla1RvdGFsLFxufSBmcm9tIFwiLi4vbmF2YmFyL25hdmJhclwiO1xuXG5jb25zdCBjcmVhdGVGb3JtVUkgPSAoYXBwLCBuYXZiYXJNb2RlLCBtb2RlLCB0b2RvSXRlbSwgcHJvamVjdCwgcHJvamVjdElkKSA9PiB7XG4gIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHRvcENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHRvZG9CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjb25zdCBwcm9qZWN0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblxuICBib3guY2xhc3NMaXN0LmFkZChcImJveFwiLCBcImZsZXhcIiwgXCJjZW50ZXJcIik7XG5cbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJmb3JtLWNvbnRhaW5lclwiKTtcblxuICB0b3BDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImZvcm0tdG9wLWNvbnRhaW5lclwiLCBcImZsZXhcIiwgXCJjZW50ZXJcIik7XG5cbiAgdG9kb0J0bi5jbGFzc0xpc3QuYWRkKFwiZm9ybS10b2RvLWJ0blwiKTtcbiAgdG9kb0J0bi5pbm5lclRleHQgPSBtb2RlID09PSBcImVkaXQtdG9kb1wiID8gXCJFZGl0IFRvZG9cIiA6IFwiTmV3IFRvZG9cIjtcblxuICBwcm9qZWN0QnRuLmNsYXNzTGlzdC5hZGQoXCJmb3JtLXByb2plY3QtYnRuXCIpO1xuICBwcm9qZWN0QnRuLmlubmVyVGV4dCA9XG4gICAgbW9kZSA9PT0gXCJlZGl0LXByb2plY3RcIiA/IFwiRWRpdCBQcm9qZWN0XCIgOiBcIk5ldyBQcm9qZWN0XCI7XG5cbiAgaWYgKG1vZGUgPT09IFwiZWRpdC10b2RvXCIpIHtcbiAgICB0b2RvQnRuLmNsYXNzTGlzdC5hZGQoXCJib3JkZXItYnRtLXdcIiwgXCJuby1wb2ludGVyLWV2ZW50c1wiKTtcblxuICAgIHRvcENvbnRhaW5lci5hcHBlbmQodG9kb0J0bik7XG5cbiAgICBjb250YWluZXIuYXBwZW5kKFxuICAgICAgdG9wQ29udGFpbmVyLFxuICAgICAgY3JlYXRlVG9kb0ZpZWxkc1VJKGFwcCwgbmF2YmFyTW9kZSwgbW9kZSwgYm94LCB0b2RvSXRlbSwgbnVsbCwgcHJvamVjdElkKVxuICAgICk7XG4gICAgYm94LmFwcGVuZChjb250YWluZXIpO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09IFwiZWRpdC1wcm9qZWN0XCIpIHtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInByb2plY3QtZmllbGRzLWhlaWdodFwiKTtcbiAgICBwcm9qZWN0QnRuLmNsYXNzTGlzdC5hZGQoXCJib3JkZXItYnRtLXdcIiwgXCJuby1wb2ludGVyLWV2ZW50c1wiKTtcblxuICAgIHRvcENvbnRhaW5lci5hcHBlbmQocHJvamVjdEJ0bik7XG4gICAgY29udGFpbmVyLmFwcGVuZChcbiAgICAgIHRvcENvbnRhaW5lcixcbiAgICAgIGNyZWF0ZVByb2plY3RGaWVsZHNVSShhcHAsIG5hdmJhck1vZGUsIG1vZGUsIGJveCwgcHJvamVjdClcbiAgICApO1xuICAgIGJveC5hcHBlbmQoY29udGFpbmVyKTtcbiAgfSBlbHNlIGlmIChtb2RlID09PSBcImFkZC10by1wcm9qZWN0XCIpIHtcbiAgICB0b2RvQnRuLmNsYXNzTGlzdC5hZGQoXCJib3JkZXItYnRtLXdcIiwgXCJuby1wb2ludGVyLWV2ZW50c1wiKTtcblxuICAgIHRvcENvbnRhaW5lci5hcHBlbmQodG9kb0J0bik7XG4gICAgY29udGFpbmVyLmFwcGVuZChcbiAgICAgIHRvcENvbnRhaW5lcixcbiAgICAgIGNyZWF0ZVRvZG9GaWVsZHNVSShhcHAsIG5hdmJhck1vZGUsIG1vZGUsIGJveCwgbnVsbCwgcHJvamVjdCwgbnVsbClcbiAgICApO1xuICAgIGJveC5hcHBlbmQoY29udGFpbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0b2RvQnRuLmNsYXNzTGlzdC5hZGQoXCJib3JkZXItYnRtLWJcIik7XG5cbiAgICB0b3BDb250YWluZXIuYXBwZW5kKHRvZG9CdG4sIHByb2plY3RCdG4pO1xuICAgIGNvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0b3BDb250YWluZXIsXG4gICAgICBjcmVhdGVUb2RvRmllbGRzVUkoYXBwLCBuYXZiYXJNb2RlLCBtb2RlLCBib3gsIG51bGwsIG51bGwsIG51bGwpXG4gICAgKTtcbiAgICBib3guYXBwZW5kKGNvbnRhaW5lcik7XG5cbiAgICB0b2RvQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKCkgPT4ge1xuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJwcm9qZWN0LWZpZWxkcy1oZWlnaHRcIik7XG4gICAgICB0b2RvQnRuLmNsYXNzTGlzdC5hZGQoXCJib3JkZXItYnRtLWJcIik7XG4gICAgICBwcm9qZWN0QnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJib3JkZXItYnRtLWJcIik7XG5cbiAgICAgIGNvbnRhaW5lci5sYXN0RWxlbWVudENoaWxkLnJlbW92ZSgpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZChcbiAgICAgICAgY3JlYXRlVG9kb0ZpZWxkc1VJKGFwcCwgbmF2YmFyTW9kZSwgbW9kZSwgYm94LCBudWxsLCBudWxsLCBudWxsKVxuICAgICAgKTtcbiAgICAgIGJveC5hcHBlbmQoY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIHByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCAoKSA9PiB7XG4gICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInByb2plY3QtZmllbGRzLWhlaWdodFwiKTtcbiAgICAgIHRvZG9CdG4uY2xhc3NMaXN0LnJlbW92ZShcImJvcmRlci1idG0tYlwiKTtcbiAgICAgIHByb2plY3RCdG4uY2xhc3NMaXN0LmFkZChcImJvcmRlci1idG0tYlwiKTtcblxuICAgICAgY29udGFpbmVyLmxhc3RFbGVtZW50Q2hpbGQucmVtb3ZlKCk7XG4gICAgICBjb250YWluZXIuYXBwZW5kKGNyZWF0ZVByb2plY3RGaWVsZHNVSShhcHAsIG5hdmJhck1vZGUsIG1vZGUsIGJveCwgbnVsbCkpO1xuICAgICAgYm94LmFwcGVuZChjb250YWluZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGJveDtcbn07XG5cbmNvbnN0IGNyZWF0ZVRvZG9GaWVsZHNVSSA9IChcbiAgYXBwLFxuICBuYXZiYXJNb2RlLFxuICBtb2RlLFxuICBib3gsXG4gIHRvZG9JdGVtLFxuICBwcm9qZWN0LFxuICBwcm9qZWN0SWRcbikgPT4ge1xuICBjb25zdCBmaWVsZHNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBtaWRkbGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgY29uc3QgdGl0bGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgY29uc3Qgbm90ZXNJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgY29uc3QgZHVlRGF0ZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGR1ZURhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgY29uc3QgZHVlRGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBjb25zdCBwcmlvcml0eUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHByaW9yaXR5VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgcHJpb3JpdHlPcHRpb25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgbG93UHJpb3JpdHlJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgY29uc3QgbG93UHJpb3JpdHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgY29uc3QgbWlkUHJpb3JpdHlJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgY29uc3QgbWlkUHJpb3JpdHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgY29uc3QgaGlnaFByaW9yaXR5SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGNvbnN0IGhpZ2hQcmlvcml0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuXG4gIGZpZWxkc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZm9ybS1maWVsZHMtY29udGFpbmVyXCIsIFwiZmxleC1jb2x1bW5cIik7XG5cbiAgLy8gTWlkZGxlXG4gIG1pZGRsZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZm9ybS1taWRkbGUtY29udGFpbmVyXCIsIFwiZmxleC1jb2x1bW5cIik7XG4gIG1pZGRsZUNvbnRhaW5lci5pZCA9IFwiZm9ybVwiO1xuICBtaWRkbGVDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChtb2RlID09PSBcImFkZFwiKSB7XG4gICAgICBhZGRUb2RvKGFwcCwgbmF2YmFyTW9kZSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBcImVkaXQtdG9kb1wiKSB7XG4gICAgICBlZGl0VG9kbyhhcHAsIG5hdmJhck1vZGUsIHRvZG9JdGVtLCBwcm9qZWN0SWQpO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJhZGQtdG8tcHJvamVjdFwiKSB7XG4gICAgICBhZGRUb1Byb2plY3QoYXBwLCBwcm9qZWN0KTtcbiAgICB9XG5cbiAgICBkb21Db250cm9sbGVyLmdldEFwcENvbnRhaW5lcigpLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcbiAgICBib3gucmVtb3ZlKCk7XG4gIH0pO1xuXG4gIHRpdGxlSW5wdXQuY2xhc3NMaXN0LmFkZChcImZvcm0tdGl0bGUtaW5wdXRcIik7XG4gIHRpdGxlSW5wdXQucGxhY2Vob2xkZXIgPSBcIkVudGVyIFRpdGxlXCI7XG4gIHRpdGxlSW5wdXQudmFsdWUgPSB0b2RvSXRlbSA/IHRvZG9JdGVtLmdldFRpdGxlKCkgOiBcIlwiO1xuICB0aXRsZUlucHV0LnNldEF0dHJpYnV0ZShcIm1heGxlbmd0aFwiLCBcIjUwXCIpO1xuICB0aXRsZUlucHV0LnJlcXVpcmVkID0gdHJ1ZTtcblxuICBub3Rlc0lucHV0LmNsYXNzTGlzdC5hZGQoXCJmb3JtLW5vdGVzLWlucHV0XCIpO1xuICBub3Rlc0lucHV0LnBsYWNlaG9sZGVyID0gXCJFbnRlciBOb3Rlc1wiO1xuICBub3Rlc0lucHV0LnZhbHVlID0gdG9kb0l0ZW0gPyB0b2RvSXRlbS5nZXROb3RlcygpIDogXCJcIjtcbiAgbm90ZXNJbnB1dC5zZXRBdHRyaWJ1dGUoXCJtYXhsZW5ndGhcIiwgXCIzMDBcIik7XG5cbiAgZHVlRGF0ZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFxuICAgIFwiZm9ybS1kdWUtZGF0ZS1jb250YWluZXJcIixcbiAgICBcImZsZXgtY29sdW1uXCIsXG4gICAgXCJjZW50ZXJcIlxuICApO1xuXG4gIGR1ZURhdGVMYWJlbC5jbGFzc0xpc3QuYWRkKFwiZm9ybS1kdWUtZGF0ZS1sYWJlbFwiKTtcbiAgZHVlRGF0ZUxhYmVsLmlubmVyVGV4dCA9IFwiRHVlIERhdGVcIjtcblxuICBkdWVEYXRlSW5wdXQuY2xhc3NMaXN0LmFkZChcImZvcm0tZHVlLWRhdGUtaW5wdXRcIik7XG4gIGR1ZURhdGVJbnB1dC50eXBlID0gXCJkYXRlXCI7XG4gIGR1ZURhdGVJbnB1dC52YWx1ZSA9IHRvZG9JdGVtID8gdG9kb0l0ZW0uZ2V0RHVlRGF0ZSgpIDogXCIyMi0xMS0xMVwiO1xuICBkdWVEYXRlSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuXG4gIHByaW9yaXR5Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXG4gICAgXCJmb3JtLXByaW9yaXR5LWNvbnRhaW5lclwiLFxuICAgIFwiZmxleC1jb2x1bW5cIixcbiAgICBcImNlbnRlclwiXG4gICk7XG5cbiAgcHJpb3JpdHlUaXRsZS5jbGFzc0xpc3QuYWRkKFwiZm9ybS1wcmlvcml0eS10aXRsZVwiKTtcbiAgcHJpb3JpdHlUaXRsZS5pbm5lclRleHQgPSBcIlByaW9yaXR5XCI7XG5cbiAgcHJpb3JpdHlPcHRpb25zQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXG4gICAgXCJmb3JtLXByaW9yaXR5LW9wdGlvbnMtY29udGFpbmVyXCIsXG4gICAgXCJmbGV4XCJcbiAgKTtcblxuICBzZXRBdHRyaWJ1dGVzKGxvd1ByaW9yaXR5SW5wdXQsIHtcbiAgICB0eXBlOiBcInJhZGlvXCIsXG4gICAgaWQ6IFwibC1wcmlvXCIsXG4gICAgdmFsdWU6IFwibG93XCIsXG4gICAgbmFtZTogXCJwcmlvcml0eVwiLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIGNoZWNrZWQ6ICEhKHRvZG9JdGVtICYmIHRvZG9JdGVtLmdldFByaW9yaXR5KCkgPT09IFwibG93XCIpXG4gIH0pO1xuICBsb3dQcmlvcml0eUlucHV0LmNsYXNzTGlzdC5hZGQoXCJmb3JtLXByaW9yaXR5LXJhZGlvXCIsIFwiaGlkZGVuXCIpO1xuXG4gIGxvd1ByaW9yaXR5TGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwibC1wcmlvXCIpO1xuICBsb3dQcmlvcml0eUxhYmVsLmlubmVyVGV4dCA9IFwiTG93XCI7XG4gIGxvd1ByaW9yaXR5TGFiZWwuY2xhc3NMaXN0LmFkZChcImZvcm0tcHJpb3JpdHktbGFiZWxcIiwgXCJsLXByaW8tbGFiZWxcIik7XG5cbiAgc2V0QXR0cmlidXRlcyhtaWRQcmlvcml0eUlucHV0LCB7XG4gICAgdHlwZTogXCJyYWRpb1wiLFxuICAgIGlkOiBcIm0tcHJpb1wiLFxuICAgIHZhbHVlOiBcIm1lZGl1bVwiLFxuICAgIG5hbWU6IFwicHJpb3JpdHlcIixcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICBjaGVja2VkOiAhISh0b2RvSXRlbSAmJiB0b2RvSXRlbS5nZXRQcmlvcml0eSgpID09PSBcIm1lZGl1bVwiKVxuICB9KTtcbiAgbWlkUHJpb3JpdHlJbnB1dC5jbGFzc0xpc3QuYWRkKFwiZm9ybS1wcmlvcml0eS1yYWRpb1wiLCBcImhpZGRlblwiKTtcblxuICBtaWRQcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcIm0tcHJpb1wiKTtcbiAgbWlkUHJpb3JpdHlMYWJlbC5pbm5lclRleHQgPSBcIk1lZGl1bVwiO1xuICBtaWRQcmlvcml0eUxhYmVsLmNsYXNzTGlzdC5hZGQoXCJmb3JtLXByaW9yaXR5LWxhYmVsXCIsIFwibS1wcmlvLWxhYmVsXCIpO1xuXG4gIHNldEF0dHJpYnV0ZXMoaGlnaFByaW9yaXR5SW5wdXQsIHtcbiAgICB0eXBlOiBcInJhZGlvXCIsXG4gICAgaWQ6IFwiaC1wcmlvXCIsXG4gICAgdmFsdWU6IFwiaGlnaFwiLFxuICAgIG5hbWU6IFwicHJpb3JpdHlcIixcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICBjaGVja2VkOiAhISh0b2RvSXRlbSAmJiB0b2RvSXRlbS5nZXRQcmlvcml0eSgpID09PSBcImhpZ2hcIilcbiAgfSk7XG4gIGhpZ2hQcmlvcml0eUlucHV0LmNsYXNzTGlzdC5hZGQoXCJmb3JtLXByaW9yaXR5LXJhZGlvXCIsIFwiaGlkZGVuXCIpO1xuXG4gIGhpZ2hQcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcImgtcHJpb1wiKTtcbiAgaGlnaFByaW9yaXR5TGFiZWwuaW5uZXJUZXh0ID0gXCJIaWdoXCI7XG4gIGhpZ2hQcmlvcml0eUxhYmVsLmNsYXNzTGlzdC5hZGQoXCJmb3JtLXByaW9yaXR5LWxhYmVsXCIsIFwiaC1wcmlvLWxhYmVsXCIpO1xuXG4gIGZpZWxkc0NvbnRhaW5lci5hcHBlbmQobWlkZGxlQ29udGFpbmVyLCBjcmVhdGVCb3R0b21Db250YWluZXJVSShib3gpKTtcbiAgbWlkZGxlQ29udGFpbmVyLmFwcGVuZChcbiAgICB0aXRsZUlucHV0LFxuICAgIG5vdGVzSW5wdXQsXG4gICAgZHVlRGF0ZUNvbnRhaW5lcixcbiAgICBwcmlvcml0eUNvbnRhaW5lclxuICApO1xuICBkdWVEYXRlQ29udGFpbmVyLmFwcGVuZChkdWVEYXRlTGFiZWwsIGR1ZURhdGVJbnB1dCk7XG4gIHByaW9yaXR5Q29udGFpbmVyLmFwcGVuZChwcmlvcml0eVRpdGxlLCBwcmlvcml0eU9wdGlvbnNDb250YWluZXIpO1xuICBwcmlvcml0eU9wdGlvbnNDb250YWluZXIuYXBwZW5kKFxuICAgIGxvd1ByaW9yaXR5SW5wdXQsXG4gICAgbG93UHJpb3JpdHlMYWJlbCxcbiAgICBtaWRQcmlvcml0eUlucHV0LFxuICAgIG1pZFByaW9yaXR5TGFiZWwsXG4gICAgaGlnaFByaW9yaXR5SW5wdXQsXG4gICAgaGlnaFByaW9yaXR5TGFiZWxcbiAgKTtcblxuICByZXR1cm4gZmllbGRzQ29udGFpbmVyO1xufTtcblxuY29uc3QgY3JlYXRlUHJvamVjdEZpZWxkc1VJID0gKGFwcCwgbmF2YmFyTW9kZSwgbW9kZSwgYm94LCBwcm9qZWN0KSA9PiB7XG4gIGNvbnN0IGZpZWxkc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IG1pZGRsZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICBjb25zdCB0aXRsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuXG4gIGZpZWxkc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZm9ybS1maWVsZHMtY29udGFpbmVyXCIsIFwiZmxleC1jb2x1bW5cIik7XG5cbiAgLy8gTWlkZGxlXG4gIG1pZGRsZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZm9ybS1taWRkbGUtY29udGFpbmVyXCIsIFwiZmxleC1jb2x1bW5cIik7XG4gIG1pZGRsZUNvbnRhaW5lci5pZCA9IFwiZm9ybVwiO1xuICBtaWRkbGVDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChtb2RlID09PSBcImFkZFwiKSB7XG4gICAgICBhZGRQcm9qZWN0KGFwcCwgbmF2YmFyTW9kZSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBcImVkaXQtcHJvamVjdFwiKSB7XG4gICAgICBlZGl0UHJvamVjdChhcHAsIG5hdmJhck1vZGUsIHByb2plY3QpO1xuICAgIH1cblxuICAgIGRvbUNvbnRyb2xsZXIuZ2V0QXBwQ29udGFpbmVyKCkuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FibGVkXCIpO1xuICAgIGJveC5yZW1vdmUoKTtcbiAgfSk7XG5cbiAgdGl0bGVJbnB1dC5jbGFzc0xpc3QuYWRkKFwiZm9ybS10aXRsZS1pbnB1dFwiKTtcbiAgdGl0bGVJbnB1dC5wbGFjZWhvbGRlciA9IFwiRW50ZXIgVGl0bGVcIjtcbiAgdGl0bGVJbnB1dC5pbm5lclRleHQgPSBwcm9qZWN0ID8gcHJvamVjdC5nZXRUaXRsZSgpIDogXCJcIjtcbiAgdGl0bGVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJtYXhsZW5ndGhcIiwgXCI1MFwiKTtcbiAgdGl0bGVJbnB1dC5yZXF1aXJlZCA9IHRydWU7XG5cbiAgZmllbGRzQ29udGFpbmVyLmFwcGVuZChtaWRkbGVDb250YWluZXIsIGNyZWF0ZUJvdHRvbUNvbnRhaW5lclVJKGJveCkpO1xuICBtaWRkbGVDb250YWluZXIuYXBwZW5kKHRpdGxlSW5wdXQpO1xuXG4gIHJldHVybiBmaWVsZHNDb250YWluZXI7XG59O1xuXG5jb25zdCBjcmVhdGVCb3R0b21Db250YWluZXJVSSA9IChib3gpID0+IHtcbiAgY29uc3QgYm90dG9tQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgY2FuY2VsQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgY29uc3Qgb2tCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG4gIGJvdHRvbUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZm9ybS1ib3R0b20tY29udGFpbmVyXCIsIFwiZmxleFwiLCBcImNlbnRlclwiKTtcblxuICBjYW5jZWxCdG4uY2xhc3NMaXN0LmFkZChcImZvcm0tY2FuY2VsLWJ0blwiKTtcbiAgY2FuY2VsQnRuLmlubmVyVGV4dCA9IFwiQ0FOQ0VMXCI7XG4gIGNhbmNlbEJ0bi5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsICgpID0+IHtcbiAgICBib3gucmVtb3ZlKCk7XG4gICAgZG9tQ29udHJvbGxlci5nZXRBcHBDb250YWluZXIoKS5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XG4gIH0pO1xuXG4gIG9rQnRuLmNsYXNzTGlzdC5hZGQoXCJmb3JtLW9rLWJ0blwiKTtcbiAgb2tCdG4uaW5uZXJUZXh0ID0gXCJPS1wiO1xuICBva0J0bi5zZXRBdHRyaWJ1dGUoXCJmb3JtXCIsIFwiZm9ybVwiKTtcblxuICBib3R0b21Db250YWluZXIuYXBwZW5kKGNhbmNlbEJ0biwgb2tCdG4pO1xuXG4gIHJldHVybiBib3R0b21Db250YWluZXI7XG59O1xuXG5jb25zdCBnZXRJbnB1dFZhbHVlcyA9ICgpID0+IHtcbiAgY29uc3QgdGl0bGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybS10aXRsZS1pbnB1dFwiKTtcbiAgY29uc3Qgbm90ZXNJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybS1ub3Rlcy1pbnB1dFwiKTtcbiAgY29uc3QgZHVlRGF0ZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtLWR1ZS1kYXRlLWlucHV0XCIpO1xuICBjb25zdCBwcmlvcml0eUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICBcImlucHV0W25hbWU9J3ByaW9yaXR5J106Y2hlY2tlZFwiXG4gICk7XG5cbiAgY29uc29sZS5sb2coe1xuICAgIHRpdGxlVmFsOiB0aXRsZUlucHV0LnZhbHVlLFxuICAgIG5vdGVzVmFsOiBub3Rlc0lucHV0ID8gbm90ZXNJbnB1dC52YWx1ZSA6IG51bGwsXG4gICAgZHVlRGF0ZVZhbDogZHVlRGF0ZUlucHV0ID8gZHVlRGF0ZUlucHV0LnZhbHVlIDogbnVsbCxcbiAgICBwcmlvcml0eVZhbDogcHJpb3JpdHlJbnB1dCA/IHByaW9yaXR5SW5wdXQudmFsdWUgOiBudWxsLFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIHRpdGxlVmFsOiB0aXRsZUlucHV0LnZhbHVlLFxuICAgIG5vdGVzVmFsOiBub3Rlc0lucHV0ID8gbm90ZXNJbnB1dC52YWx1ZSA6IG51bGwsXG4gICAgZHVlRGF0ZVZhbDogZHVlRGF0ZUlucHV0ID8gZHVlRGF0ZUlucHV0LnZhbHVlIDogbnVsbCxcbiAgICBwcmlvcml0eVZhbDogcHJpb3JpdHlJbnB1dCA/IHByaW9yaXR5SW5wdXQudmFsdWUgOiBudWxsLFxuICB9O1xufTtcblxuY29uc3QgYWRkVG9kbyA9IChhcHAsIG5hdmJhck1vZGUpID0+IHtcbiAgY29uc3QgdG9kb0l0ZW0gPSBjcmVhdGVUb2RvSXRlbSgpO1xuXG4gIGNvbnN0IHsgaXNEdWVUb2RheSwgaXNEdWVUaGlzV2VlayB9ID0gY2hlY2tEdWVEYXRlKHRvZG9JdGVtKTtcblxuICBhcHAucHVzaFRvVG9kb3NBcnIodG9kb0l0ZW0pO1xuICB1dGlsaXR5RnVuY3Rpb25zLnVwZGF0ZUxvY2FsU3RvcmFnZShhcHApO1xuICB1cGRhdGVUb2Rvc1RvdGFsKGFwcCk7XG4gIHVwZGF0ZURheVRvdGFsKGFwcCk7XG4gIHVwZGF0ZVdlZWtUb3RhbChhcHApO1xuXG4gIGNvbnN0IHRvZG9zQXJyID0gYXBwLmdldFRvZG9zQXJyKCk7XG5cbiAgcmVuZGVyVG9kb3MoYXBwLCBuYXZiYXJNb2RlLCB0b2Rvc0FyciwgaXNEdWVUb2RheSwgaXNEdWVUaGlzV2VlaywgbnVsbCk7XG59O1xuXG5jb25zdCBlZGl0VG9kbyA9IChhcHAsIG5hdmJhck1vZGUsIHRvZG9JdGVtLCBwcm9qZWN0SWQpID0+IHtcbiAgY29uc3QgeyB0aXRsZVZhbCwgbm90ZXNWYWwsIGR1ZURhdGVWYWwsIHByaW9yaXR5VmFsIH0gPSBnZXRJbnB1dFZhbHVlcygpO1xuXG4gIHRvZG9JdGVtLmVkaXRUaXRsZSh0aXRsZVZhbCk7XG4gIHRvZG9JdGVtLmVkaXROb3Rlcyhub3Rlc1ZhbCk7XG4gIHRvZG9JdGVtLmVkaXREdWVEYXRlKGR1ZURhdGVWYWwpO1xuICB0b2RvSXRlbS5lZGl0UHJpb3JpdHkocHJpb3JpdHlWYWwpO1xuXG4gIGFwcC51cGRhdGVUb2Rvc0Fycih0b2RvSXRlbSk7IC8vIFJlZmFjdG9yXG4gIHV0aWxpdHlGdW5jdGlvbnMudXBkYXRlTG9jYWxTdG9yYWdlKGFwcCk7XG4gIHVwZGF0ZURheVRvdGFsKGFwcCk7XG4gIHVwZGF0ZVdlZWtUb3RhbChhcHApO1xuXG4gIGNvbnN0IHsgaXNEdWVUb2RheSwgaXNEdWVUaGlzV2VlayB9ID0gY2hlY2tEdWVEYXRlKHRvZG9JdGVtKTtcblxuICBpZiAocHJvamVjdElkKSB7XG4gICAgY29uc3QgcHJvamVjdCA9IGFwcFxuICAgICAgLmdldFByb2plY3RzQXJyKClcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICAgIC5maWx0ZXIoKHByb2plY3QpID0+IHByb2plY3QuZ2V0SWQoKSA9PT0gcHJvamVjdElkKVswXTtcbiAgICBjb25zdCB0b2Rvc0FyciA9IHByb2plY3QuZ2V0VG9kb3NBcnIoKTtcblxuICAgIHJlbmRlclRvZG9zKGFwcCwgbmF2YmFyTW9kZSwgdG9kb3NBcnIsIG51bGwsIG51bGwsIHByb2plY3RJZCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdG9kb3NBcnIgPSBhcHAuZ2V0VG9kb3NBcnIoKTtcblxuICAgIHJlbmRlclRvZG9zKGFwcCwgbmF2YmFyTW9kZSwgdG9kb3NBcnIsIGlzRHVlVG9kYXksIGlzRHVlVGhpc1dlZWssIG51bGwpO1xuICB9XG59O1xuXG5jb25zdCBhZGRQcm9qZWN0ID0gKGFwcCwgbmF2YmFyTW9kZSkgPT4ge1xuICBjb25zdCB7IHRpdGxlVmFsIH0gPSBnZXRJbnB1dFZhbHVlcygpO1xuICBjb25zdCBwcm9qZWN0ID0gcHJvamVjdEZhY3RvcnkodGl0bGVWYWwsIG51bGwsIG51bGwpO1xuXG4gIGFwcC5wdXNoVG9Qcm9qZWN0c0Fycihwcm9qZWN0KTtcbiAgdXRpbGl0eUZ1bmN0aW9ucy51cGRhdGVMb2NhbFN0b3JhZ2UoYXBwKTtcbiAgdXBkYXRlUHJvamVjdHNUb3RhbChhcHApO1xuXG4gIGNvbnN0IHByb2plY3RzQXJyID0gYXBwLmdldFByb2plY3RzQXJyKCk7XG5cbiAgcmVuZGVyUHJvamVjdHMoYXBwLCBuYXZiYXJNb2RlLCBwcm9qZWN0c0Fycik7XG59O1xuXG5jb25zdCBlZGl0UHJvamVjdCA9IChhcHAsIG5hdmJhck1vZGUsIHByb2plY3QpID0+IHtcbiAgY29uc3QgeyB0aXRsZVZhbCB9ID0gZ2V0SW5wdXRWYWx1ZXMoKTtcblxuICBwcm9qZWN0LmVkaXRUaXRsZSh0aXRsZVZhbCk7XG5cbiAgLy8gVXBkYXRlIHByb2plY3QgaW4gYXBwIGFyclxuICBhcHAudXBkYXRlUHJvamVjdHNBcnIocHJvamVjdCk7XG4gIHV0aWxpdHlGdW5jdGlvbnMudXBkYXRlTG9jYWxTdG9yYWdlKGFwcCk7XG5cbiAgLy8gR2V0IGxhdGVzdCBwcm9qZWN0c0FyciAmIHJlcmVuZGVyIHByb2plY3RzXG4gIGNvbnN0IHByb2plY3RzQXJyID0gYXBwLmdldFByb2plY3RzQXJyKCk7XG5cbiAgcmVuZGVyUHJvamVjdHMoYXBwLCBuYXZiYXJNb2RlLCBwcm9qZWN0c0Fycik7XG59O1xuXG5jb25zdCBjaGVja0R1ZURhdGUgPSAodG9kb0l0ZW0pID0+IHtcbiAgY29uc3QgdG9kYXkgPSB1dGlsaXR5RnVuY3Rpb25zLmdldFRvZGF5SW5ZWVlZTU1ERCgpO1xuICBjb25zdCBwcm9jZXNzZWREdWVEYXRlID0gYCR7dG9kb0l0ZW0uZ2V0RHVlRGF0ZSgpfVQwMDowMDowMGA7XG4gIGNvbnN0IGlzRHVlVG9kYXkgPSB0b2RvSXRlbS5nZXREdWVEYXRlKCkgPT09IHRvZGF5O1xuICBjb25zdCBpc0R1ZVRoaXNXZWVrID0gaXNUaGlzV2VlayhuZXcgRGF0ZShwcm9jZXNzZWREdWVEYXRlKSwge1xuICAgIHdlZWtTdGFydHNPbjogMSxcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBpc0R1ZVRvZGF5LFxuICAgIGlzRHVlVGhpc1dlZWssXG4gIH07XG59O1xuXG5jb25zdCByZW5kZXJUb2RvcyA9IChcbiAgYXBwLFxuICBuYXZiYXJNb2RlLFxuICB0b2Rvc0FycixcbiAgaXNEdWVUb2RheSxcbiAgaXNEdWVUaGlzV2VlayxcbiAgcHJvamVjdElkXG4pID0+IHtcbiAgaWYgKG5hdmJhck1vZGUgPT09IFwidG9kb3NcIikge1xuICAgIGRvbUNvbnRyb2xsZXJcbiAgICAgIC5nZXRDb250ZW50Qm94KClcbiAgICAgIC5hcHBlbmQoY3JlYXRlSG9sZGVyQm94VUkoYXBwLCBcInRvZG9zXCIsIHRvZG9zQXJyLCBwcm9qZWN0SWQpKTtcbiAgfSBlbHNlIGlmIChuYXZiYXJNb2RlID09PSBcImRheVwiICYmIGlzRHVlVG9kYXkpIHtcbiAgICBkb21Db250cm9sbGVyXG4gICAgICAuZ2V0Q29udGVudEJveCgpXG4gICAgICAuYXBwZW5kKGNyZWF0ZUhvbGRlckJveFVJKGFwcCwgXCJkYXlcIiwgdG9kb3NBcnIsIHByb2plY3RJZCkpO1xuICB9IGVsc2UgaWYgKG5hdmJhck1vZGUgPT09IFwid2Vla1wiICYmIGlzRHVlVGhpc1dlZWspIHtcbiAgICBkb21Db250cm9sbGVyXG4gICAgICAuZ2V0Q29udGVudEJveCgpXG4gICAgICAuYXBwZW5kKGNyZWF0ZUhvbGRlckJveFVJKGFwcCwgXCJ3ZWVrXCIsIHRvZG9zQXJyLCBwcm9qZWN0SWQpKTtcbiAgfSBlbHNlIGlmIChuYXZiYXJNb2RlID09PSBcInByb2plY3RzXCIpIHtcbiAgICBkb21Db250cm9sbGVyXG4gICAgICAuZ2V0Q29udGVudEJveCgpXG4gICAgICAuYXBwZW5kKGNyZWF0ZUhvbGRlckJveFVJKGFwcCwgXCJ0b2Rvc1wiLCB0b2Rvc0FyciwgcHJvamVjdElkKSk7XG4gIH1cbn07XG5cbmNvbnN0IHJlbmRlclByb2plY3RzID0gKGFwcCwgbmF2YmFyTW9kZSwgcHJvamVjdHNBcnIpID0+IHtcbiAgaWYgKG5hdmJhck1vZGUgPT09IFwicHJvamVjdHNcIikge1xuICAgIGRvbUNvbnRyb2xsZXJcbiAgICAgIC5nZXRDb250ZW50Qm94KClcbiAgICAgIC5hcHBlbmQoY3JlYXRlSG9sZGVyQm94VUkoYXBwLCBcInByb2plY3RzXCIsIHByb2plY3RzQXJyKSk7XG4gIH1cbn07XG5cbmNvbnN0IGFkZFRvUHJvamVjdCA9IChhcHAsIHByb2plY3QpID0+IHtcbiAgY29uc3QgdG9kb0l0ZW0gPSBjcmVhdGVUb2RvSXRlbSgpO1xuXG4gIC8vIFVwZGF0ZSBwcm9qZWN0IG9ialxuICBwcm9qZWN0LnB1c2hUb1RvZG9zQXJyKHRvZG9JdGVtKTtcblxuICAvLyBVcGRhdGUgYXBwIG9ialxuICBhcHAucHVzaFRvVG9kb3NBcnIodG9kb0l0ZW0pO1xuICBhcHAudXBkYXRlUHJvamVjdHNBcnIocHJvamVjdCk7XG4gIHV0aWxpdHlGdW5jdGlvbnMudXBkYXRlTG9jYWxTdG9yYWdlKGFwcCk7XG4gIHVwZGF0ZVRvZG9zVG90YWwoYXBwKTtcbiAgdXBkYXRlRGF5VG90YWwoYXBwKTtcbiAgdXBkYXRlV2Vla1RvdGFsKGFwcCk7XG59O1xuXG5jb25zdCBjcmVhdGVUb2RvSXRlbSA9ICgpID0+IHtcbiAgY29uc3QgeyB0aXRsZVZhbCwgbm90ZXNWYWwsIGR1ZURhdGVWYWwsIHByaW9yaXR5VmFsIH0gPSBnZXRJbnB1dFZhbHVlcygpO1xuICByZXR1cm4gdG9kb0l0ZW1GYWN0b3J5KFxuICAgIGZhbHNlLFxuICAgIHRpdGxlVmFsLFxuICAgIG5vdGVzVmFsLFxuICAgIGR1ZURhdGVWYWwsXG4gICAgcHJpb3JpdHlWYWwsXG4gICAgbnVsbFxuICApO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmV4cG9ydCB7IGNyZWF0ZUZvcm1VSSB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmltcG9ydCBcIi4vbmF2YmFyLmNzc1wiO1xuaW1wb3J0IHsgY3JlYXRlRm9ybVVJIH0gZnJvbSBcIi4uL3RvZG9Gb3JtL3RvZG9Gb3JtXCI7XG5pbXBvcnQgKiBhcyBkb21Db250cm9sbGVyIGZyb20gXCIuLi8uLi9tb2R1bGVzL2RvbUNvbnRyb2xsZXIvZG9tQ29udHJvbGxlclwiO1xuaW1wb3J0ICogYXMgdXRpbGl0eUZ1bmN0aW9ucyBmcm9tIFwiLi4vLi4vbW9kdWxlcy91dGlsaXR5RnVuY3Rpb25zL3V0aWxpdHlGdW5jdGlvbnNcIjtcbmltcG9ydCBjcmVhdGVIb2xkZXJCb3hVSSBmcm9tIFwiLi4vaG9sZGVyQm94L2hvbGRlckJveFwiO1xuaW1wb3J0IHRvZG9zSWNvbiBmcm9tIFwiLi9jaGVjay1saXN0LnBuZ1wiO1xuaW1wb3J0IHByb2plY3RzSWNvbiBmcm9tIFwiLi9mb2xkZXIucG5nXCI7XG5pbXBvcnQgZGF5SWNvbiBmcm9tIFwiLi9kYWlseS1jYWxlbmRhci5wbmdcIjtcbmltcG9ydCB3ZWVrSWNvbiBmcm9tIFwiLi93ZWVrbHktY2FsZW5kYXIucG5nXCI7XG5cbmNvbnN0IGNyZWF0ZU5hdmJhclVJID0gKGFwcCkgPT4ge1xuICBsZXQgbmF2YmFyTW9kZSA9IFwidG9kb3NcIjtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgdG9kb3NCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBwcm9qZWN0c0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGRheUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHdlZWtCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBwbHVzQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5hdmJhci1jb250YWluZXJcIiwgXCJmbGV4XCIpO1xuICBjb250YWluZXIuZGF0YXNldC5tb2RlID0gbmF2YmFyTW9kZTtcblxuICB0b2Rvc0J0bi5jbGFzc0xpc3QuYWRkKFxuICAgIFwibmF2YmFyLWJ0blwiLFxuICAgIFwibmF2YmFyLWJ0bi1ncnAtMVwiLFxuICAgIFwibmF2YmFyLXRvZG9zLWJ0blwiLFxuICAgIFwiZmxleFwiLFxuICAgIFwibmF2YmFyLWJ0bi1zZWxlY3RlZFwiXG4gICk7XG4gIHRvZG9zQnRuLmRhdGFzZXQuY291bnQgPSBhcHAuZ2V0VG9kb3NBcnIoKS5sZW5ndGg7XG4gIHRvZG9zQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKGUpID0+IHtcbiAgICBoYW5kbGVCdG5VSShlKTtcbiAgICB1cGRhdGVOYXZiYXJNb2RlKFwidG9kb3NcIik7XG5cbiAgICBjb25zdCB0b2Rvc0FyciA9IGFwcC5nZXRUb2Rvc0FycigpO1xuICAgIGNvbnNvbGUubG9nKFwidG9kb3NBcnI6XCIsIHRvZG9zQXJyKTtcbiAgICBkb21Db250cm9sbGVyXG4gICAgICAuZ2V0Q29udGVudEJveCgpXG4gICAgICAuYXBwZW5kKGNyZWF0ZUhvbGRlckJveFVJKGFwcCwgXCJ0b2Rvc1wiLCB0b2Rvc0FyciwgbnVsbCkpO1xuICB9KTtcblxuICBwcm9qZWN0c0J0bi5jbGFzc0xpc3QuYWRkKFxuICAgIFwibmF2YmFyLWJ0blwiLFxuICAgIFwibmF2YmFyLWJ0bi1ncnAtMVwiLFxuICAgIFwibmF2YmFyLXByb2plY3RzLWJ0blwiLFxuICAgIFwiZmxleFwiXG4gICk7XG4gIHByb2plY3RzQnRuLmRhdGFzZXQuY291bnQgPSBhcHAuZ2V0UHJvamVjdHNBcnIoKS5sZW5ndGg7XG4gIHByb2plY3RzQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKGUpID0+IHtcbiAgICBoYW5kbGVCdG5VSShlKTtcbiAgICB1cGRhdGVOYXZiYXJNb2RlKFwicHJvamVjdHNcIik7XG5cbiAgICBjb25zdCBwcm9qZWN0c0FyciA9IGFwcC5nZXRQcm9qZWN0c0FycigpO1xuICAgIGNvbnNvbGUubG9nKFwicHJvamVjdHNBcnI6XCIsIHByb2plY3RzQXJyKTtcbiAgICBkb21Db250cm9sbGVyXG4gICAgICAuZ2V0Q29udGVudEJveCgpXG4gICAgICAuYXBwZW5kKGNyZWF0ZUhvbGRlckJveFVJKGFwcCwgXCJwcm9qZWN0c1wiLCBwcm9qZWN0c0FycikpO1xuICB9KTtcblxuICBkYXlCdG4uY2xhc3NMaXN0LmFkZChcbiAgICBcIm5hdmJhci1idG5cIixcbiAgICBcIm5hdmJhci1idG4tZ3JwLTFcIixcbiAgICBcIm5hdmJhci1kYXktYnRuXCIsXG4gICAgXCJmbGV4XCJcbiAgKTtcbiAgZGF5QnRuLmRhdGFzZXQuY291bnQgPSB1dGlsaXR5RnVuY3Rpb25zLmdldE9ianNEdWVUb2RheShcbiAgICBhcHAuZ2V0VG9kb3NBcnIoKVxuICApLmxlbmd0aDtcbiAgZGF5QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKGUpID0+IHtcbiAgICBoYW5kbGVCdG5VSShlKTtcbiAgICB1cGRhdGVOYXZiYXJNb2RlKFwiZGF5XCIpO1xuXG4gICAgY29uc3QgdG9kb3NBcnIgPSBhcHAuZ2V0VG9kb3NBcnIoKTtcbiAgICBjb25zb2xlLmxvZyhcInRvZG9zQXJyOlwiLCB0b2Rvc0Fycik7XG4gICAgZG9tQ29udHJvbGxlclxuICAgICAgLmdldENvbnRlbnRCb3goKVxuICAgICAgLmFwcGVuZChjcmVhdGVIb2xkZXJCb3hVSShhcHAsIG5hdmJhck1vZGUsIHRvZG9zQXJyLCBudWxsKSk7XG4gIH0pO1xuXG4gIHdlZWtCdG4uY2xhc3NMaXN0LmFkZChcbiAgICBcIm5hdmJhci1idG5cIixcbiAgICBcIm5hdmJhci1idG4tZ3JwLTFcIixcbiAgICBcIm5hdmJhci13ZWVrLWJ0blwiLFxuICAgIFwiZmxleFwiXG4gICk7XG4gIHdlZWtCdG4uZGF0YXNldC5jb3VudCA9IHV0aWxpdHlGdW5jdGlvbnMuZ2V0T2Jqc0R1ZVRoaXNXZWVrKFxuICAgIGFwcC5nZXRUb2Rvc0FycigpXG4gICkubGVuZ3RoO1xuICB3ZWVrQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKGUpID0+IHtcbiAgICBoYW5kbGVCdG5VSShlKTtcbiAgICB1cGRhdGVOYXZiYXJNb2RlKFwid2Vla1wiKTtcblxuICAgIGNvbnN0IHRvZG9zQXJyID0gYXBwLmdldFRvZG9zQXJyKCk7XG4gICAgY29uc29sZS5sb2coXCJ0b2Rvc0FycjpcIiwgdG9kb3NBcnIpO1xuICAgIGRvbUNvbnRyb2xsZXJcbiAgICAgIC5nZXRDb250ZW50Qm94KClcbiAgICAgIC5hcHBlbmQoY3JlYXRlSG9sZGVyQm94VUkoYXBwLCBuYXZiYXJNb2RlLCB0b2Rvc0FyciwgbnVsbCkpO1xuICB9KTtcblxuICBwbHVzQnRuLmNsYXNzTGlzdC5hZGQoXG4gICAgXCJuYXZiYXItYnRuXCIsXG4gICAgXCJuYXZiYXItYnRuLWdycC0yXCIsXG4gICAgXCJuYXZiYXItcGx1cy1idG5cIixcbiAgICBcImZsZXhcIlxuICApO1xuICBwbHVzQnRuLnRpdGxlID0gXCJBZGQgTmV3XCI7XG4gIHBsdXNCdG4uaW5uZXJUZXh0ID0gXCIrXCI7XG4gIHBsdXNCdG4uYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCAoKSA9PiB7XG4gICAgZG9tQ29udHJvbGxlci5hcHBlbmRUb1Jvb3QoXG4gICAgICBjcmVhdGVGb3JtVUkoYXBwLCBuYXZiYXJNb2RlLCBcImFkZFwiLCBudWxsLCBudWxsLCBudWxsKVxuICAgICk7XG4gICAgZG9tQ29udHJvbGxlci5nZXRBcHBDb250YWluZXIoKS5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZU5hdmJhck1vZGUobmV3TW9kZSkge1xuICAgIG5hdmJhck1vZGUgPSBuZXdNb2RlO1xuICAgIGNvbnRhaW5lci5kYXRhc2V0Lm1vZGUgPSBuYXZiYXJNb2RlO1xuICB9XG5cbiAgdXBkYXRlQnRucyh0b2Rvc0J0biwgcHJvamVjdHNCdG4sIGRheUJ0biwgd2Vla0J0bik7XG4gIHdpbmRvdy5vbnJlc2l6ZSA9IHVwZGF0ZUJ0bnModG9kb3NCdG4sIHByb2plY3RzQnRuLCBkYXlCdG4sIHdlZWtCdG4pO1xuXG4gIGNvbnRhaW5lci5hcHBlbmQodG9kb3NCdG4sIHByb2plY3RzQnRuLCBkYXlCdG4sIHdlZWtCdG4sIHBsdXNCdG4pO1xuXG4gIHJldHVybiBjb250YWluZXI7XG59O1xuXG5jb25zdCB1cGRhdGVUb2Rvc1RvdGFsID0gKGFwcCkgPT4ge1xuICBjb25zdCB0b2Rvc0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2YmFyLXRvZG9zLWJ0blwiKTtcbiAgdG9kb3NCdG4uZGF0YXNldC5jb3VudCA9IGFwcC5nZXRUb2Rvc0FycigpLmxlbmd0aDtcbn07XG5cbmNvbnN0IHVwZGF0ZVByb2plY3RzVG90YWwgPSAoYXBwKSA9PiB7XG4gIGNvbnN0IHByb2plY3RzQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItcHJvamVjdHMtYnRuXCIpO1xuICBwcm9qZWN0c0J0bi5kYXRhc2V0LmNvdW50ID0gYXBwLmdldFByb2plY3RzQXJyKCkubGVuZ3RoO1xufTtcblxuY29uc3QgdXBkYXRlRGF5VG90YWwgPSAoYXBwKSA9PiB7XG4gIGNvbnN0IGRheUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2YmFyLWRheS1idG5cIik7XG4gIGRheUJ0bi5kYXRhc2V0LmNvdW50ID0gdXRpbGl0eUZ1bmN0aW9ucy5nZXRPYmpzRHVlVG9kYXkoXG4gICAgYXBwLmdldFRvZG9zQXJyKClcbiAgKS5sZW5ndGg7XG59O1xuXG5jb25zdCB1cGRhdGVXZWVrVG90YWwgPSAoYXBwKSA9PiB7XG4gIGNvbnN0IHdlZWtCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdmJhci13ZWVrLWJ0blwiKTtcbiAgd2Vla0J0bi5kYXRhc2V0LmNvdW50ID0gdXRpbGl0eUZ1bmN0aW9ucy5nZXRPYmpzRHVlVGhpc1dlZWsoXG4gICAgYXBwLmdldFRvZG9zQXJyKClcbiAgKS5sZW5ndGg7XG59O1xuXG5jb25zdCBjaGFuZ2VCdG5zVG9JY29ucyA9ICh0b2Rvc0J0biwgcHJvamVjdHNCdG4sIGRheUJ0biwgd2Vla0J0bikgPT4ge1xuICB0b2Rvc0J0bi5pbm5lclRleHQgPSBcIlwiO1xuICBwcm9qZWN0c0J0bi5pbm5lclRleHQgPSBcIlwiO1xuICBkYXlCdG4uaW5uZXJUZXh0ID0gXCJcIjtcbiAgd2Vla0J0bi5pbm5lclRleHQgPSBcIlwiO1xuXG4gIGNvbnN0IGljb25zQXJyID0gW3RvZG9zSWNvbiwgcHJvamVjdHNJY29uLCBkYXlJY29uLCB3ZWVrSWNvbl07XG4gIGNvbnN0IGJ0bnNBcnIgPSBbdG9kb3NCdG4sIHByb2plY3RzQnRuLCBkYXlCdG4sIHdlZWtCdG5dO1xuXG4gIGJ0bnNBcnIuZm9yRWFjaCgoYnRuLCBpKSA9PiB7XG4gICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG5cbiAgICBpY29uLmNsYXNzTGlzdC5hZGQoXCJuYXZiYXItYnRuLWljb25cIik7XG4gICAgaWNvbi5zcmMgPSBpY29uc0FycltpXTtcblxuICAgIGJ0bi5hcHBlbmQoaWNvbik7XG4gIH0pO1xufTtcblxuY29uc3QgY2hhbmdlQnRuc1RvVGV4dHMgPSAodG9kb3NCdG4sIHByb2plY3RzQnRuLCBkYXlCdG4sIHdlZWtCdG4pID0+IHtcbiAgdG9kb3NCdG4uaW5uZXJUZXh0ID0gXCJUb2Rvc1wiO1xuICBwcm9qZWN0c0J0bi5pbm5lclRleHQgPSBcIlByb2plY3RzXCI7XG4gIGRheUJ0bi5pbm5lclRleHQgPSBcIkRheVwiO1xuICB3ZWVrQnRuLmlubmVyVGV4dCA9IFwiV2Vla1wiO1xufTtcblxuY29uc3QgdXBkYXRlQnRucyA9ICh0b2Rvc0J0biwgcHJvamVjdHNCdG4sIGRheUJ0biwgd2Vla0J0bikgPT4ge1xuICBpZiAod2luZG93LmlubmVyV2lkdGggPCA2NTApIHtcbiAgICBjaGFuZ2VCdG5zVG9JY29ucyh0b2Rvc0J0biwgcHJvamVjdHNCdG4sIGRheUJ0biwgd2Vla0J0bik7XG4gIH0gZWxzZSB7XG4gICAgY2hhbmdlQnRuc1RvVGV4dHModG9kb3NCdG4sIHByb2plY3RzQnRuLCBkYXlCdG4sIHdlZWtCdG4pO1xuICB9XG59O1xuXG5jb25zdCBoYW5kbGVCdG5VSSA9IChlKSA9PiB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubmF2YmFyLWJ0bi1ncnAtMVwiKS5mb3JFYWNoKChlKSA9PiB7XG4gICAgZS5jbGFzc0xpc3QucmVtb3ZlKFwibmF2YmFyLWJ0bi1zZWxlY3RlZFwiKTtcbiAgfSk7XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uYXZiYXItYnRuLWljb25cIikuZm9yRWFjaCgoZSkgPT4ge1xuICAgIGUuY2xhc3NMaXN0LnJlbW92ZShcIm5hdmJhci1idG4tc2VsZWN0ZWRcIik7XG4gIH0pO1xuXG4gIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJuYXZiYXItYnRuLWljb25cIikpIHtcbiAgICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJuYXZiYXItYnRuLXNlbGVjdGVkXCIpO1xuICB9XG5cbiAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZChcIm5hdmJhci1idG4tc2VsZWN0ZWRcIik7XG59O1xuXG5leHBvcnQge1xuICBjcmVhdGVOYXZiYXJVSSxcbiAgdXBkYXRlVG9kb3NUb3RhbCxcbiAgdXBkYXRlUHJvamVjdHNUb3RhbCxcbiAgdXBkYXRlRGF5VG90YWwsXG4gIHVwZGF0ZVdlZWtUb3RhbCxcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbmltcG9ydCBcIi4vYXBwLmNzc1wiO1xuaW1wb3J0IGNyZWF0ZUNvbnRlbnRCb3hVSSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb250ZW50Qm94L2NvbnRlbnRCb3hcIjtcbmltcG9ydCB7IHRvZG9JdGVtRmFjdG9yeSB9IGZyb20gXCIuLi9jb21wb25lbnRzL3RvZG9JdGVtL3RvZG9JdGVtXCI7XG5pbXBvcnQgeyBwcm9qZWN0RmFjdG9yeSB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Byb2plY3QvcHJvamVjdFwiO1xuaW1wb3J0IHsgdXBkYXRlTG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4uL21vZHVsZXMvdXRpbGl0eUZ1bmN0aW9ucy91dGlsaXR5RnVuY3Rpb25zXCI7XG5cbmNvbnN0IGFwcEZhY3RvcnkgPSAoKSA9PiB7XG4gIGxldCB0b2Rvc0FyciA9IFtdO1xuICBsZXQgcHJvamVjdHNBcnIgPSBbXTtcblxuICAvLyBHZXR0aW5nXG4gIGNvbnN0IGdldFRvZG9zQXJyID0gKCkgPT4gdG9kb3NBcnI7XG4gIGNvbnN0IGdldFByb2plY3RzQXJyID0gKCkgPT4gcHJvamVjdHNBcnI7XG5cbiAgLy8gSW5pdGlhbGl6aW5nXG4gIGNvbnN0IGluaXRpYWxpemVUb2Rvc0FyciA9IChhcnIpID0+IHtcbiAgICB0b2Rvc0FyciA9IGFycjtcbiAgfTtcbiAgY29uc3QgaW5pdGlhbGl6ZVByb2plY3RzQXJyID0gKGFycikgPT4ge1xuICAgIHByb2plY3RzQXJyID0gYXJyO1xuICB9O1xuXG4gIC8vIEFkZGluZ1xuICBjb25zdCBwdXNoVG9Ub2Rvc0FyciA9ICh0b2RvSXRlbSkgPT4ge1xuICAgIHRvZG9zQXJyLnB1c2godG9kb0l0ZW0pO1xuICB9O1xuICBjb25zdCBwdXNoVG9Qcm9qZWN0c0FyciA9IChwcm9qZWN0KSA9PiB7XG4gICAgcHJvamVjdHNBcnIucHVzaChwcm9qZWN0KTtcbiAgfTtcblxuICAvLyBSZW1vdmluZ1xuICBjb25zdCByZW1vdmVGcm9tVG9kb3NBcnIgPSAoaWQpID0+IHtcbiAgICB0b2Rvc0FyciA9IHRvZG9zQXJyLmZpbHRlcigoZSkgPT4gZS5pZCAhPT0gaWQpO1xuICB9O1xuICBjb25zdCByZW1vdmVGcm9tUHJvamVjdHNBcnIgPSAoaWQpID0+IHtcbiAgICBwcm9qZWN0c0FyciA9IHByb2plY3RzQXJyLmZpbHRlcigoZSkgPT4gZS5pZCAhPT0gaWQpO1xuICB9O1xuXG4gIC8vIFVwZGF0aW5nXG4gIGNvbnN0IHVwZGF0ZVRvZG9zQXJyID0gKHRvZG9JdGVtKSA9PiB7XG4gICAgdG9kb3NBcnIgPSB0b2Rvc0Fyci5tYXAoKGUpID0+XG4gICAgICBlLmdldElkKCkgPT09IHRvZG9JdGVtLmdldElkKCkgPyB0b2RvSXRlbSA6IGVcbiAgICApO1xuICB9O1xuICBjb25zdCB1cGRhdGVQcm9qZWN0c0FyciA9IChwcm9qZWN0KSA9PiB7XG4gICAgcHJvamVjdHNBcnIgPSBwcm9qZWN0c0Fyci5tYXAoKGUpID0+XG4gICAgICBlLmdldElkKCkgPT09IHByb2plY3QuZ2V0SWQoKSA/IHByb2plY3QgOiBlXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGdldFRvZG9zQXJyLFxuICAgIGdldFByb2plY3RzQXJyLFxuICAgIGluaXRpYWxpemVUb2Rvc0FycixcbiAgICBpbml0aWFsaXplUHJvamVjdHNBcnIsXG4gICAgcHVzaFRvVG9kb3NBcnIsXG4gICAgcmVtb3ZlRnJvbVRvZG9zQXJyLFxuICAgIHVwZGF0ZVRvZG9zQXJyLFxuICAgIHB1c2hUb1Byb2plY3RzQXJyLFxuICAgIHJlbW92ZUZyb21Qcm9qZWN0c0FycixcbiAgICB1cGRhdGVQcm9qZWN0c0FycixcbiAgfTtcbn07XG5cbmNvbnN0IGNyZWF0ZUFwcFVJID0gKCkgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBhcHAgPSBhcHBGYWN0b3J5KCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIGluaXRpYWxpemVBcHAoYXBwKTtcblxuICBvbmJlZm9yZXVubG9hZCA9IHVwZGF0ZUxvY2FsU3RvcmFnZShhcHApO1xuXG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiYXBwLWNvbnRhaW5lclwiLCBcImZsZXgtY29sdW1uXCIsIFwiY2VudGVyXCIpO1xuXG4gIC8vIExvZ2dlciBidG5cbiAgLy8gY29uc3QgbG9nQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgLy8gbG9nQnRuLmlubmVyVGV4dCA9IFwiTE9HIElORk9cIjtcbiAgLy8gbG9nQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKCkgPT4ge1xuICAvLyAgIGNvbnNvbGUubG9nKHtcbiAgLy8gICAgIHRvZG9zQXJyT3JpOiBhcHAuZ2V0VG9kb3NBcnIoKSxcbiAgLy8gICAgIHByb2plY3RzQXJyT3JpOiBhcHAuZ2V0UHJvamVjdHNBcnIoKVxuICAvLyAgIH0pXG4gIC8vIH0pXG4gIC8vIExvZ2dlciBidG5cblxuICBjb250YWluZXIuYXBwZW5kKGNyZWF0ZUNvbnRlbnRCb3hVSShhcHApKTtcblxuICByZXR1cm4gY29udGFpbmVyO1xufTtcblxuY29uc3QgdHJhbnNmb3JtVG9Ub2Rvc0FyciA9ICh0b2Rvc0RhdGEpID0+IHtcbiAgY29uc3QgdG9kb3NBcnIgPSB0b2Rvc0RhdGEubWFwKChkYXRhKSA9PiB7XG4gICAgY29uc3QgeyBjaGVja2VkLCB0aXRsZSwgbm90ZXMsIGR1ZURhdGUsIHByaW9yaXR5LCBpZCB9ID0gZGF0YTtcblxuICAgIHJldHVybiB0b2RvSXRlbUZhY3RvcnkoY2hlY2tlZCwgdGl0bGUsIG5vdGVzLCBkdWVEYXRlLCBwcmlvcml0eSwgaWQpO1xuICB9KTtcblxuICByZXR1cm4gdG9kb3NBcnI7XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1Ub1Byb2plY3RzQXJyID0gKHByb2plY3RzRGF0YSkgPT4ge1xuICBjb25zdCBwcm9qZWN0c0FyciA9IHByb2plY3RzRGF0YS5tYXAoKGRhdGEpID0+IHtcbiAgICBjb25zdCB7IHRpdGxlLCBpZCwgdG9kb3NEYXRhIH0gPSBkYXRhO1xuICAgIGNvbnN0IHRvZG9zQXJyID0gdHJhbnNmb3JtVG9Ub2Rvc0Fycih0b2Rvc0RhdGEpO1xuXG4gICAgcmV0dXJuIHByb2plY3RGYWN0b3J5KHRpdGxlLCBpZCwgdG9kb3NBcnIpO1xuICB9KTtcblxuICByZXR1cm4gcHJvamVjdHNBcnI7XG59O1xuXG5jb25zdCBnZW5lcmF0ZURlZmF1bHRJdGVtcyA9ICgpID0+IHtcbiAgY29uc3Qgc2hhcmVkVG9kb0l0ZW0gPSB0b2RvSXRlbUZhY3RvcnkoXG4gICAgdHJ1ZSxcbiAgICBcIkxlZyBkYXlcIixcbiAgICBcIlNxdWF0cyB4IDEwMFwiLFxuICAgIFwiMjAyMi0xMS0yNVwiLFxuICAgIFwibG93XCIsXG4gICAgbnVsbFxuICApO1xuXG4gIGNvbnN0IHRvZG9zQXJyID0gW1xuICAgIHRvZG9JdGVtRmFjdG9yeShcbiAgICAgIGZhbHNlLFxuICAgICAgXCJDUyBmdW5kYW1lbnRhbHNcIixcbiAgICAgIFwiRmluaXNoIGxlc3NvbiAyOFwiLFxuICAgICAgXCIyMDIyLTExLTI4XCIsXG4gICAgICBcImhpZ2hcIixcbiAgICAgIG51bGxcbiAgICApLFxuICAgIHRvZG9JdGVtRmFjdG9yeShcbiAgICAgIGZhbHNlLFxuICAgICAgXCJDb2Rld2FycyBwcmFjdGljZVwiLFxuICAgICAgXCJDb21wbGV0ZSAxMCBjaGFsbGVuZ2VzIHRvZGF5XCIsXG4gICAgICBcIjIwMjItMTEtMjhcIixcbiAgICAgIFwibWVkaXVtXCIsXG4gICAgICBudWxsXG4gICAgKSxcbiAgICB0b2RvSXRlbUZhY3RvcnkoXG4gICAgICBmYWxzZSxcbiAgICAgIFwiUHJvamVjdCB1cGRhdGVcIixcbiAgICAgIFwiVXBkYXRlIHNpZ24taW4gZm9ybSBmZWF0dXJlc1wiLFxuICAgICAgXCIyMDIyLTExLTI4XCIsXG4gICAgICBcImhpZ2hcIixcbiAgICAgIG51bGxcbiAgICApLFxuICAgIHNoYXJlZFRvZG9JdGVtLFxuICBdO1xuXG4gIGNvbnN0IHByb2plY3RzQXJyID0gW3Byb2plY3RGYWN0b3J5KFwiRml0bmVzc1wiLCBudWxsLCBbc2hhcmVkVG9kb0l0ZW1dKV07XG5cbiAgcmV0dXJuIFt0b2Rvc0FyciwgcHJvamVjdHNBcnJdO1xufTtcblxuY29uc3QgaW5pdGlhbGl6ZUFwcCA9IChhcHApID0+IHtcbiAgY29uc3QgW2RlZmF1bHRUb2Rvc0FyciwgZGVmYXVsdFByb2plY3RzQXJyXSA9IGdlbmVyYXRlRGVmYXVsdEl0ZW1zKCk7XG5cbiAgbG9jYWxTdG9yYWdlLnRvZG9zRGF0YVxuICAgID8gYXBwLmluaXRpYWxpemVUb2Rvc0FycihcbiAgICAgICAgdHJhbnNmb3JtVG9Ub2Rvc0FycihKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS50b2Rvc0RhdGEpKVxuICAgICAgKVxuICAgIDogYXBwLmluaXRpYWxpemVUb2Rvc0FycihkZWZhdWx0VG9kb3NBcnIpO1xuXG4gIGxvY2FsU3RvcmFnZS5wcm9qZWN0c0RhdGFcbiAgICA/IGFwcC5pbml0aWFsaXplUHJvamVjdHNBcnIoXG4gICAgICAgIHRyYW5zZm9ybVRvUHJvamVjdHNBcnIoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucHJvamVjdHNEYXRhKSlcbiAgICAgIClcbiAgICA6IGFwcC5pbml0aWFsaXplUHJvamVjdHNBcnIoZGVmYXVsdFByb2plY3RzQXJyKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUFwcFVJO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGNyZWF0ZUFwcFVJIGZyb20gXCIuL2NvbnRhaW5lci9hcHBcIjtcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5cbmNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jvb3RcIik7XG5cbnJvb3QuYXBwZW5kKGNyZWF0ZUFwcFVJKCkpO1xuIiwiaW1wb3J0IFwiLi9jb250ZW50Qm94LmNzc1wiO1xuaW1wb3J0IHsgY3JlYXRlTmF2YmFyVUkgfSBmcm9tIFwiLi4vbmF2YmFyL25hdmJhclwiO1xuaW1wb3J0IGNyZWF0ZUhvbGRlckJveFVJIGZyb20gXCIuLi9ob2xkZXJCb3gvaG9sZGVyQm94XCI7XG5cbmNvbnN0IGNyZWF0ZUNvbnRlbnRCb3hVSSA9IChhcHApID0+IHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgdGl0bGVJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuXG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiY29udGVudC1ib3gtY29udGFpbmVyXCIpO1xuXG4gIHRpdGxlSWNvbi5jbGFzc0xpc3QuYWRkKFwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiKTtcbiAgdGl0bGVJY29uLmFwcGVuZChcImNoZWNrbGlzdFwiKTtcblxuICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwiY29udGVudC1ib3gtdGl0bGVcIiwgXCJmbGV4XCIpO1xuXG4gIHRpdGxlLmFwcGVuZCh0aXRsZUljb24sIFwiVG8tRG9cIik7XG5cbiAgY29udGFpbmVyLmFwcGVuZChcbiAgICB0aXRsZSxcbiAgICBjcmVhdGVOYXZiYXJVSShhcHApLFxuICAgIGNyZWF0ZUhvbGRlckJveFVJKGFwcCwgXCJ0b2Rvc1wiLCBhcHAuZ2V0VG9kb3NBcnIoKSwgbnVsbClcbiAgKTtcblxuICByZXR1cm4gY29udGFpbmVyO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29udGVudEJveFVJO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIm4iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicCIsImIiLCJiYXNlVVJJIiwic2VsZiIsImhyZWYiLCJuYyIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmd1bWVudHMiLCJhcmdTdHIiLCJEYXRlIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJ3YXJuIiwic3RhY2siLCJOYU4iLCJ0b0ludGVnZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsIk51bWJlciIsImlzTmFOIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJzdGFydE9mV2VlayIsImRpcnR5RGF0ZSIsIl9yZWYiLCJfcmVmMiIsIl9yZWYzIiwiX29wdGlvbnMkd2Vla1N0YXJ0c09uIiwiX29wdGlvbnMkbG9jYWxlIiwiX29wdGlvbnMkbG9jYWxlJG9wdGlvIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMiIsIndlZWtTdGFydHNPbiIsImxvY2FsZSIsIlJhbmdlRXJyb3IiLCJkYXRlIiwiZGF5IiwiZ2V0RGF5IiwiZGlmZiIsInNldERhdGUiLCJnZXREYXRlIiwic2V0SG91cnMiLCJpc1NhbWVXZWVrIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiZGF0ZUxlZnRTdGFydE9mV2VlayIsImRhdGVSaWdodFN0YXJ0T2ZXZWVrIiwiaXNUaGlzV2VlayIsIm5vdyIsImVsIiwiYXR0cnMiLCJnZW5lcmF0ZVJhbmRvbUlEIiwidGl0bGUiLCJtaW4iLCJtYXgiLCJyYW5kb20iLCJnZXRUb2RheUluWVlZWU1NREQiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJ0cmFuc2Zvcm1Ub1RvZG9zRGF0YSIsInRvZG9zQXJyIiwidG9kbyIsImdldElkIiwiY2hlY2tlZCIsImdldENoZWNrZWQiLCJnZXRUaXRsZSIsIm5vdGVzIiwiZ2V0Tm90ZXMiLCJkdWVEYXRlIiwiZ2V0RHVlRGF0ZSIsInByaW9yaXR5IiwiZ2V0UHJpb3JpdHkiLCJ1cGRhdGVMb2NhbFN0b3JhZ2UiLCJhcHAiLCJsb2NhbFN0b3JhZ2UiLCJ0b2Rvc0RhdGEiLCJnZXRUb2Rvc0FyciIsInByb2plY3RzRGF0YSIsInByb2plY3RzQXJyIiwicHJvamVjdCIsInRyYW5zZm9ybVRvUHJvamVjdHNEYXRhIiwiZ2V0UHJvamVjdHNBcnIiLCJnZXRPYmpzRHVlVG9kYXkiLCJhcnIiLCJ0b2RheSIsImZpbHRlciIsImdldE9ianNEdWVUaGlzV2VlayIsInByb2Nlc3NlZER1ZURhdGUiLCJnZXRBcHBDb250YWluZXIiLCJnZXRDb250ZW50Qm94IiwiYXBwZW5kVG9Sb290IiwiZWxlbSIsImFwcGVuZCIsImlzRGF0ZSIsInZhbHVlIiwiaXNWYWxpZCIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5QW1vdW50IiwidGltZXN0YW1wIiwiYW1vdW50Iiwic3ViTWlsbGlzZWNvbmRzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZ2V0VVRDRGF5Iiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5IiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJzdGFydE9mVVRDV2VlayIsImdldFVUQ1dlZWtZZWFyIiwiX29wdGlvbnMkZmlyc3RXZWVrQ29uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZmlyc3RXZWVrT2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJzdGFydE9mVVRDV2Vla1llYXIiLCJmaXJzdFdlZWsiLCJhZGRMZWFkaW5nWmVyb3MiLCJ0YXJnZXRMZW5ndGgiLCJzaWduIiwib3V0cHV0IiwiYWJzIiwidG9rZW4iLCJzaWduZWRZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwibnVtYmVyT2ZEaWdpdHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJwb3ciLCJHIiwibG9jYWxpemUiLCJlcmEiLCJ3aWR0aCIsInkiLCJvcmRpbmFsTnVtYmVyIiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicXVhcnRlciIsImNvbnRleHQiLCJxIiwiTSIsIkwiLCJ3Iiwid2VlayIsInJvdW5kIiwiZ2V0VVRDV2VlayIsIkkiLCJpc29XZWVrIiwiZ2V0VVRDSVNPV2VlayIsIkQiLCJkYXlPZlllYXIiLCJzZXRVVENNb250aCIsInN0YXJ0T2ZZZWFyVGltZXN0YW1wIiwiZGlmZmVyZW5jZSIsImdldFVUQ0RheU9mWWVhciIsIkUiLCJkYXlPZldlZWsiLCJsb2NhbERheU9mV2VlayIsImMiLCJpc29EYXlPZldlZWsiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJkYXlQZXJpb2QiLCJ0b0xvd2VyQ2FzZSIsImhvdXJzIiwiQiIsImgiLCJIIiwiSyIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInBhdHRlcm4iLCJmb3JtYXRMb25nIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZSIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJ1dGNEYXRlIiwiVVRDIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsImluZGV4T2YiLCJpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4iLCJ0aHJvd1Byb3RlY3RlZEVycm9yIiwiZm9ybWF0IiwiaW5wdXQiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJkZWZhdWx0V2lkdGgiLCJmb3JtYXRzIiwiZnVsbCIsImxvbmciLCJtZWRpdW0iLCJzaG9ydCIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsInZhbHVlc0FycmF5IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsIl9vcHRpb25zIiwicmVtMTAwIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZEluZGV4IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0Iiwib2JqZWN0IiwicHJlZGljYXRlIiwiYXJyYXkiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55IiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJtYXRjaGVkIiwicmVtb3ZlQ29udGFpbmVyIiwiY29udGFpbmVyIiwiY2xhc3NMaXN0IiwidHlwZSIsIm9ialVJIiwiY29uZmlybWF0aW9uTXNnIiwiYnRuc0NvbnRhaW5lciIsIm5vQnRuIiwieWVzQnRuIiwiYWRkIiwiaW5uZXJUZXh0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUZyb21Ub2Rvc0FyciIsImZvckVhY2giLCJyZW1vdmVGcm9tUHJvamVjdHNBcnIiLCJ1cGRhdGVUb2Rvc1RvdGFsIiwidXBkYXRlUHJvamVjdHNUb3RhbCIsInVwZGF0ZURheVRvdGFsIiwidXBkYXRlV2Vla1RvdGFsIiwidXBkYXRlTmF2YmFyVG90YWxzIiwidG9kb0l0ZW0iLCJwcm9qZWN0c0JveCIsImNhbmNlbEJ0biIsIm9rQnRuIiwic2VsZWN0ZWRQcm9qZWN0cyIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwic2VsZWN0ZWRQcm9qZWN0c0lkIiwiZGF0YXNldCIsImxvZyIsInB1c2hUb1RvZG9zQXJyIiwiZmlsdGVyZWRQcm9qZWN0cyIsImV2ZXJ5IiwicHJvamVjdE9wdGlvblVJcyIsImNoZWNrYm94IiwidG9nZ2xlIiwiY3JlYXRlUHJvamVjdE9wdGlvblVJIiwidG9kb0l0ZW1GYWN0b3J5IiwiaWRGcm9tRGF0YSIsImVkaXRDaGVja2VkIiwiZWRpdFRpdGxlIiwibmV3VGl0bGUiLCJlZGl0Tm90ZXMiLCJuZXdOb3RlcyIsImVkaXREdWVEYXRlIiwibmV3RHVlRGF0ZSIsImVkaXRQcmlvcml0eSIsIm5ld1ByaW9yaXR5IiwiY3JlYXRlVG9kb0l0ZW1VSSIsInByb2plY3RJZCIsImxlZnRDb250YWluZXIiLCJyaWdodENvbnRhaW5lciIsInN1cCIsImVkaXRJY29uIiwibW92ZUljb24iLCJ0cmFzaEljb24iLCJmb3JtYXREdWVEYXRlIiwiYm9yZGVyTGVmdCIsInN0b3BQcm9wYWdhdGlvbiIsInRvcENvbnRhaW5lciIsImJvdHRvbUNvbnRhaW5lciIsImNsb3NlQnRuIiwidG9VcHBlckNhc2UiLCJuYXZiYXJNb2RlIiwibW9kZSIsImNyZWF0ZUZvcm1VSSIsInNwbGl0IiwicHJvY2Vzc2VkTSIsImRpcnR5Rm9ybWF0U3RyIiwiX3JlZjQiLCJfb3B0aW9ucyRsb2NhbGUyIiwiX29wdGlvbnMkbG9jYWxlMiRvcHRpIiwiX3JlZjUiLCJfcmVmNiIsIl9yZWY3IiwiX29wdGlvbnMkbG9jYWxlMyIsIl9vcHRpb25zJGxvY2FsZTMkb3B0aSIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDMiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWw0IiwiZm9ybWF0U3RyIiwiZGVmYXVsdExvY2FsZSIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJmb3JtYXR0ZXIiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwic29ydE9ianNCeURhdGVBc2MiLCJvYmpzQXJyIiwic29ydCIsImRhdGVMZWZ0IiwiZGF0ZVJpZ2h0IiwiY29tcGFyZUFzYyIsImxhc3RFbGVtZW50Q2hpbGQiLCJzb3J0ZWRBcnIiLCJjcmVhdGVQcm9qZWN0VUkiLCJmaWx0ZXJlZEFyciIsInByb2plY3RGYWN0b3J5IiwidG9kb3NBcnJGcm9tRGF0YSIsImFkZEljb24iLCJib3giLCJ0b2RvQnRuIiwicHJvamVjdEJ0biIsImNyZWF0ZVRvZG9GaWVsZHNVSSIsImNyZWF0ZVByb2plY3RGaWVsZHNVSSIsImZpZWxkc0NvbnRhaW5lciIsIm1pZGRsZUNvbnRhaW5lciIsInRpdGxlSW5wdXQiLCJub3Rlc0lucHV0IiwiZHVlRGF0ZUNvbnRhaW5lciIsImR1ZURhdGVMYWJlbCIsImR1ZURhdGVJbnB1dCIsInByaW9yaXR5Q29udGFpbmVyIiwicHJpb3JpdHlUaXRsZSIsInByaW9yaXR5T3B0aW9uc0NvbnRhaW5lciIsImxvd1ByaW9yaXR5SW5wdXQiLCJsb3dQcmlvcml0eUxhYmVsIiwibWlkUHJpb3JpdHlJbnB1dCIsIm1pZFByaW9yaXR5TGFiZWwiLCJoaWdoUHJpb3JpdHlJbnB1dCIsImhpZ2hQcmlvcml0eUxhYmVsIiwicHJldmVudERlZmF1bHQiLCJhZGRUb2RvIiwiZWRpdFRvZG8iLCJhZGRUb1Byb2plY3QiLCJwbGFjZWhvbGRlciIsIm5hbWUiLCJjcmVhdGVCb3R0b21Db250YWluZXJVSSIsImFkZFByb2plY3QiLCJlZGl0UHJvamVjdCIsImdldElucHV0VmFsdWVzIiwicHJpb3JpdHlJbnB1dCIsInRpdGxlVmFsIiwibm90ZXNWYWwiLCJkdWVEYXRlVmFsIiwicHJpb3JpdHlWYWwiLCJjcmVhdGVUb2RvSXRlbSIsImlzRHVlVG9kYXkiLCJpc0R1ZVRoaXNXZWVrIiwiY2hlY2tEdWVEYXRlIiwicmVuZGVyVG9kb3MiLCJ1cGRhdGVUb2Rvc0FyciIsInB1c2hUb1Byb2plY3RzQXJyIiwicmVuZGVyUHJvamVjdHMiLCJ1cGRhdGVQcm9qZWN0c0FyciIsInVwZGF0ZUJ0bnMiLCJ0b2Rvc0J0biIsInByb2plY3RzQnRuIiwiZGF5QnRuIiwid2Vla0J0biIsImlubmVyV2lkdGgiLCJpY29uc0FyciIsImJ0biIsImljb24iLCJjaGFuZ2VCdG5zVG9JY29ucyIsImNoYW5nZUJ0bnNUb1RleHRzIiwiaGFuZGxlQnRuVUkiLCJjb250YWlucyIsInBhcmVudEVsZW1lbnQiLCJ0cmFuc2Zvcm1Ub1RvZG9zQXJyIiwiaW5pdGlhbGl6ZVRvZG9zQXJyIiwiaW5pdGlhbGl6ZVByb2plY3RzQXJyIiwiYXBwRmFjdG9yeSIsImRlZmF1bHRUb2Rvc0FyciIsImRlZmF1bHRQcm9qZWN0c0FyciIsInNoYXJlZFRvZG9JdGVtIiwiZ2VuZXJhdGVEZWZhdWx0SXRlbXMiLCJwYXJzZSIsImluaXRpYWxpemVBcHAiLCJvbmJlZm9yZXVubG9hZCIsInRpdGxlSWNvbiIsInBsdXNCdG4iLCJ1cGRhdGVOYXZiYXJNb2RlIiwibmV3TW9kZSIsIm9ucmVzaXplIiwiY3JlYXRlTmF2YmFyVUkiXSwic291cmNlUm9vdCI6IiJ9